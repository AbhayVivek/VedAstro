using System.Collections.Generic;
namespace VedAstro.Library
{

    /// <summary>
    /// This list is auto generated from code when running StaticTableGenerator,
    /// so that Open API methods have a metadata. Regenerate when files Calculate.cs gets updated
    /// </summary>
    public static class OpenAPIStaticTable
{
    public static List<OpenAPIMetadata> Rows = new List<OpenAPIMetadata>
    {
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<Avasta> PlanetAvasta(PlanetName planetName, Time time)", Description = " Gets all the Avastas for a planet Lajjita Garvita Kshudita etc... ", ExampleOutput = "{ 'PlanetAvasta': 'KshuditaStarved'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInLajjitaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInLajjitaAvasta': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInGarvitaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInGarvitaAvasta': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInKshuditaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInKshuditaAvasta': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInTrashitaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInTrashitaAvasta': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInMuditaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInMuditaAvasta': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInKshobhitaAvasta(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInKshobhitaAvasta': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<APIFunctionResult> AllPlanetData(PlanetName planetName, Time time)", Description = " Gets all possible calculations for a Planet at a given Time", ExampleOutput = "{ 'AllPlanetData': { 'HousePlanetIsIn': 'House10', 'HousesInAspect': 'House4', 'IsPlanetAspectedByBeneficPlanets': 'True', 'IsPlanetAspectedByEnemyPlanets': 'False', 'IsPlanetAspectedByFriendPlanets': 'False', 'IsPlanetAspectedByMaleficPlanets': 'True', 'IsPlanetBenefic': 'False', 'IsPlanetBeneficInShadbala': 'True', 'IsPlanetConjunctWithEnemyPlanets': 'True', 'IsPlanetConjunctWithFriendPlanets': 'False', 'IsPlanetConjunctWithMaleficPlanets': 'True', 'IsPlanetDebilitated': 'False', 'IsPlanetExalted': 'False', 'IsPlanetInEnemyHouse': 'False', 'IsPlanetInFriendHouse': 'False', 'IsPlanetInGarvitaAvasta': 'False', 'IsPlanetInKendra': 'True', 'IsPlanetInKshobhitaAvasta': 'False', 'IsPlanetInKshuditaAvasta': 'True', 'IsPlanetInLajjitaAvasta': 'False', 'IsPlanetInMoolatrikona': 'False', 'IsPlanetInMuditaAvasta': 'False', 'IsPlanetInOwnHouse': 'False', 'IsPlanetInTrashitaAvasta': 'False', 'IsPlanetInWaterySign': 'False', 'IsPlanetMalefic': 'True', 'IsPlanetStrongInShadvarga': 'False', 'PlanetAbdaBala': '0', 'PlanetAvasta': 'KshuditaStarved', 'PlanetAyanaBala': '37.86440971775901', 'PlanetBhinnashtakavargaChart': 'System.Collections.Generic.Dictionary`2[VedAstro.Library.ZodiacName,System.Int32]', 'PlanetConstellation': 'Chitta - 3', 'PlanetDeclination': '-8.854236112896396', 'PlanetDigBala': '56.37027777777778', 'PlanetDrekkanaBala': '15', 'PlanetDrekkanaSign': 'Libra', 'PlanetDrikBala': '15.859965277777775', 'PlanetDwadasamsaSign': 'Libra', 'PlanetEphemerisLongitude': { 'DegreeMinuteSecond': '202° 11' 4', 'TotalDegrees': '202.18444444444444' }, 'PlanetHoraBala': '0', 'PlanetHoraSign': 'Leo', 'PlanetIshtaKashtaScore': '-1', 'PlanetIshtaScore': '0', 'PlanetKalaBala': '103.24422453257381', 'PlanetKashtaScore': '0', 'PlanetKendraBala': '60', 'PlanetMasaBala': '0', 'PlanetMotionName': 'Direct', 'PlanetNaisargikaBala': '60', 'PlanetNathonnathaBala': '48.81666666666667', 'PlanetNatureScore': '-1', 'PlanetNatureScoreMK4': '1', 'PlanetNavamsaSign': 'Libra', 'PlanetNirayanaLongitude': { 'DegreeMinuteSecond': '180° 55' 7', 'TotalDegrees': '180.91861111111112' }, 'PlanetOchchaBala': '3.027037037037037', 'PlanetOjayugmarasyamsaBala': '30', 'PlanetPakshaBala': '16.563148148148144', 'PlanetSaptamsaSign': 'Libra', 'PlanetSaptavargajaBala': '90', 'PlanetsAspectingPlanet': 'Jupiter, Saturn', 'PlanetSayanaLatitude': { 'DegreeMinuteSecond': '0° 0' 0', 'TotalDegrees': '0' }, 'PlanetSayanaLongitude': { 'DegreeMinuteSecond': '202° 11' 4', 'TotalDegrees': '202.18444444444444' }, 'PlanetShadbalaPinda': '433.5', 'PlanetShadvargaBala': '82.5', 'PlanetSignName': { 'Name': 'Libra', 'DegreesIn': { 'DegreeMinuteSecond': '0° 55' 6', 'TotalDegrees': '0.9183333333333333' } }, 'PlanetsInAspect': '', 'PlanetsInConjuction': 'Mercury', 'PlanetSpeed': '0.9918000146913549', 'PlanetSthanaBala': '198.02703703703702', 'PlanetStrength': '433.5', 'PlanetTemporaryFriendList': 'Mars, Saturn, Venus', 'PlanetThrimsamsaSign': 'Scorpio', 'PlanetTribhagaBala': '0', 'PlanetVaraBala': '0', 'ResidentialStrength': '0', 'SignsPlanetIsAspecting': 'Aries', 'SwissEphemeris': '{ Longitude = 202.18463055890365, Latitude = 0.00013917714915584304, DistanceAU = 0.9966429082761756, SpeedLongitude = 0, SpeedLatitude = 0, SpeedDistance = 0 }' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<APIFunctionResult> AllHouseData(HouseName houseName, Time time)", Description = " All possible calculations for a House at a given Time ", ExampleOutput = "{ 'AllHouseData': { 'House': 'House House4 - Begin:-3.1922, Middle:11.8078, End:26.8078', 'HouseConstellation': 'Aswini - 4', 'HouseNatureScore': '-2', 'HouseNatureScoreMK4': '-3', 'HouseNavamsaSign': 'Cancer', 'HouseSignName': 'Aries', 'HouseStrength': '343.7767361111111', 'IsBeneficPlanetAspectHouse': 'False', 'IsBeneficPlanetInHouse': 'False', 'IsMaleficPlanetAspectHouse': 'True', 'IsMaleficPlanetInHouse': 'False', 'LordOfHouse': 'Mars', 'PlanetsAspectingHouse': 'Sun, Mercury', 'PlanetsInHouse': '' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<APIFunctionResult> AllPlanetHouseData(PlanetName planetName, HouseName houseName, Time time)", Description = " All possible calculations for a Planet and House at a given Time ", ExampleOutput = "{ 'AllPlanetHouseData': { 'IsHouseAspectedByPlanet': 'True', 'IsPlanetInGoodAspectToHouse': 'True', 'IsPlanetInHouse': 'False', 'PlanetRelationshipWithHouse': 'BestFriendVarga' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<APIFunctionResult> AllZodiacSignData(ZodiacName zodiacName, Time time)", Description = " All possible calculations for a Zodiac Sign at a given Time ", ExampleOutput = "{ 'AllZodiacSignData': { 'BeneficPlanetListInSign': '', 'IsBeneficPlanetInSign': 'False', 'IsMaleficPlanetInSign': 'True', 'MaleficPlanetListInSign': 'Sun, Mercury', 'PlanetInSign': 'Sun, Mercury', 'PlanetsInSign': 'Sun, Mercury' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String YoniKutaAnimal(Person person)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'YoniKutaAnimal': 'Horse - Female'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ConstellationAnimal YoniKutaAnimal(ConstellationName sign)", Description = " Given a constellation will give animal with sex used for yoni kuta calculations and body appearance prediction ", ExampleOutput = "{ 'YoniKutaAnimal': 'Monkey - Male'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Task<Byte[]> SkyChartGIF(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SkyChartGIF': 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[System.Byte[],VedAstro.Library.Calculate+<SkyChartGIF>d__17]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Task<String> SkyChart(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SkyChart': 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[System.String,VedAstro.Library.Calculate+<SkyChart>d__18]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInWaterySign(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInWaterySign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double ResidentialStrength(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'ResidentialStrength': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle TimeToLongitude(TimeSpan time)", Description = " Converts time back to longitude it is the reverse of GetLocalTimeOffset in Time Exp 5h. 10m. 20s. E. Long. to 77 35 E. Long ", ExampleOutput = "{ 'TimeToLongitude': { 'DegreeMinuteSecond': '15° 0' 0', 'TotalDegrees': '15' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double TimeToEphemerisTime(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'TimeToEphemerisTime': '2421882.8682962963'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle PlanetNirayanaLongitude(Time time, PlanetName planetName)", Description = " Planet longitude that has been corrected with Ayanamsa Gets planet longitude used vedic astrology Nirayana Longitude Sayana Longitude corrected to Ayanamsa Number from 0 to 360 represent the degrees in the zodiac as viewed from earth Note Since Nirayana is corrected in actuality 0 degrees will start at Taurus not Aries ", ExampleOutput = "{ 'PlanetNirayanaLongitude': { 'DegreeMinuteSecond': '180° 55' 7', 'TotalDegrees': '180.91861111111112' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.LunarDay LunarDay(Time time)", Description = " Gets Moons position or day in lunar calendar ", ExampleOutput = "{ 'LunarDay': 'Date:11/30 Day:11/15'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetConstellation MoonConstellation(Time time)", Description = " Gets name of Constellation behind the moon at a given time ", ExampleOutput = "{ 'MoonConstellation': 'Satabhisha - 2'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetConstellation PlanetConstellation(Time time, PlanetName planet)", Description = " Gets the constellation behind a planet at a given time ", ExampleOutput = "{ 'PlanetConstellation': 'Chitta - 3'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Tarabala Tarabala(Time time, Person person)", Description = " Tarabala or birth ruling constellation strength used for personal muhurtha ", ExampleOutput = "{ 'Tarabala': 'Janma - Cycle:1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 Chandrabala(Time time, Person person)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'Chandrabala': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName MoonSignName(Time time)", Description = " Zodiac sign behind the Moon at given time ", ExampleOutput = "{ 'MoonSignName': 'Aquarius'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName LagnaSignName(Time time)", Description = " Zodiac sign at the LagnaAscendant at given time ", ExampleOutput = "{ 'LagnaSignName': 'Capricornus'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.NithyaYoga NithyaYoga(Time time)", Description = " Nithya Yoga Longitude of Sun Longitude of Moon 1320 or 800 ", ExampleOutput = "{ 'NithyaYoga': '37'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Karana Karana(Time time)", Description = " Used for auspicious activities part Panchang like Tithi Nakshatra Yoga etc. ", ExampleOutput = "{ 'Karana': 'Visti'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacSign SunSign(Time time)", Description = " Zodiac sign behind the Sun at a time ", ExampleOutput = "{ 'SunSign': { 'Name': 'Libra', 'DegreesIn': { 'DegreeMinuteSecond': '0° 55' 6', 'TotalDegrees': '0.9183333333333333' } }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Time TimeSunEnteredCurrentSign(Time time)", Description = "Find time when Sun was in 0.001 degrees in current sign just entered sign", ExampleOutput = "{ 'TimeSunEnteredCurrentSign': '16:06 15/10/1918 +05:30'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Time TimeSunLeavesCurrentSign(Time time)", Description = "Find time when Sun was in 29 degrees in current sign just about to leave sign Note 2 possible ways leaving time is calculated 1. degrees Sun is in sign is more than 29.999 degrees very very close to leaving sign 2. accuracy limit is hit", ExampleOutput = "{ 'TimeSunLeavesCurrentSign': '16:18 14/11/1918 +05:30'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<House> AllHouseLongitudes(Time time)", Description = " Calculates creates all houses as list ", ExampleOutput = "{ 'AllHouseLongitudes': 'House House1 - Begin:266.8078, Middle:281.8078, End:296.8078, House House2 - Begin:296.8078, Middle:311.8078, End:326.8078, House House3 - Begin:326.8078, Middle:341.8078, End:-3.1922, House House4 - Begin:-3.1922, Middle:11.8078, End:26.8078, House House5 - Begin:26.8078, Middle:41.8078, End:56.8078, House House6 - Begin:56.8078, Middle:71.8078, End:86.8078, House House7 - Begin:86.8078, Middle:101.8078, End:116.8078, House House8 - Begin:116.8078, Middle:131.8078, End:146.8078, House House9 - Begin:146.8078, Middle:161.8078, End:176.8078, House House10 - Begin:176.8078, Middle:191.8078, End:206.8078, House House11 - Begin:206.8078, Middle:221.8078, End:236.8078, House House12 - Begin:236.8078, Middle:251.8078, End:266.8078'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double ConvertLmtToJulian(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'ConvertLmtToJulian': '2421883.0833333335'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsInConjuction(Time time, PlanetName inputedPlanetName)", Description = " Gets all the planets that are in conjunction with the inputed planet Note 1.The planet inputed is not included in return list 2. Theory behind conjunction Conjunction Two heavenly bodies in the same longitude. The effect of an aspect is felt even if the planets are not exactly in the mutual distances mentioned above. Therefore a socalled orb of aspect and this varies in each aspect is allowed. The orbs of aspects are Conjunction 8 degrees Planets can be in same sign but not conjunct There are also other variations of aspects brought about by two planets remaining in the same sign and not in conjunction but another planet occupying a trine in respect of the two. ", ExampleOutput = "{ 'PlanetsInConjuction': 'Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle DistanceBetweenPlanets(PlanetName planet1, PlanetName planet2, Time time)", Description = " Gets longitudinal space between 2 planets Note Longitude of planet after 360 is 0 degrees when calculating difference this needs to be accounted for. Calculation in Nirayana longitudes Calculates longitudes for you ", ExampleOutput = "{ 'DistanceBetweenPlanets': { 'DegreeMinuteSecond': '0° 0' 0', 'TotalDegrees': '0' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle DistanceBetweenPlanets(Angle planet1, Angle planet2)", Description = " Gets longitudinal space between 2 planets Note Longitude of planet after 360 is 0 degrees when calculating difference this needs to be accounted for Expects you to calculate longitude ", ExampleOutput = "{ 'DistanceBetweenPlanets': { 'DegreeMinuteSecond': '0° 0' 0', 'TotalDegrees': '0' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsInHouse(HouseName houseNumber, Time time)", Description = " Gets list of all planets thats in a housebhava at a given time ", ExampleOutput = "{ 'PlanetsInHouse': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsInSign(ZodiacName signName, Time time)", Description = " Gets list of all planets thats in a sign at a given time ", ExampleOutput = "{ 'PlanetsInSign': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dictionary<PlanetName,ZodiacName> AllPlanetSigns(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetSigns': 'System.Collections.Generic.Dictionary`2[VedAstro.Library.PlanetName,VedAstro.Library.ZodiacName]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetLongitude> AllPlanetLongitude(Time time)", Description = " Gets the Nirayana longitude of all 9 planets ", ExampleOutput = "{ 'AllPlanetLongitude': 'Sun - 180.91861111111112, Moon - 311.2291666666667, Mars - 229.4663888888889, Mercury - 181.515, Jupiter - 84.01916666666666, Venus - 171.1575, Saturn - 124.38722222222222, Ketu - 53.204166666666666, Rahu - 233.20416666666668'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetLongitude> AllPlanetFixedLongitude(Time time)", Description = " Gets longitude positions of all planets Sayana Fixed zodiac ", ExampleOutput = "{ 'AllPlanetFixedLongitude': 'Sun - 202.18444444444444, Moon - 332.495, Mars - 250.73222222222222, Mercury - 202.78083333333333, Jupiter - 105.285, Venus - 192.42333333333335, Saturn - 145.65305555555557, Ketu - 74.47, Rahu - 254.47'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.HouseName HousePlanetIsIn(Time time, PlanetName planetName)", Description = " Gets the House number a given planet is in at a time ", ExampleOutput = "{ 'HousePlanetIsIn': 'House10'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName LordOfHouse(HouseName houseNumber, Time time)", Description = " Gets planet lord of given house at given time The lord of a bhava is the Graha planet in whose Rasi sign the Bhavamadhya falls ", ExampleOutput = "{ 'LordOfHouse': 'Mars'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> LordOfHouseList(List<HouseName> houseList, Time time)", Description = " The lord of a bhava is the Graha planet in whose Rasi sign the Bhavamadhya falls List overload to GetLordOfHouse above method ", ExampleOutput = "{ 'LordOfHouseList': 'Saturn, Mars'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsHouseSignName(HouseName house, ZodiacName sign, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsHouseSignName': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName HouseSignName(HouseName houseNumber, Time time)", Description = " Gets the zodiac sign at middle longitude of the house. ", ExampleOutput = "{ 'HouseSignName': 'Aries'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetConstellation HouseConstellation(HouseName houseNumber, Time time)", Description = " Gets the zodiac sign at middle longitude of the house. ", ExampleOutput = "{ 'HouseConstellation': 'Aswini - 4'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName NavamsaSignNameFromLongitude(Angle longitude)", Description = " Gets Navamsa sign given a longitude ", ExampleOutput = "{ 'NavamsaSignNameFromLongitude': 'Libra'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName SignCountedFromInputSign(ZodiacName inputSign, Int32 countToNextSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SignCountedFromInputSign': 'Leo'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName SignCountedFromMoonSign(Int32 countToNextSign, Time inputTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SignCountedFromMoonSign': 'Gemini'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName SignCountedFromPlanetSign(Int32 countToNextSign, Time inputTime, PlanetName startPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SignCountedFromPlanetSign': 'Aquarius'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName SignCountedFromLagnaSign(Int32 countToNextSign, Time inputTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SignCountedFromLagnaSign': 'Taurus'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 HouseCountedFromInputHouse(Int32 inputHouseNumber, Int32 countToNextHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'HouseCountedFromInputHouse': '9'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacSign PlanetSignName(PlanetName planetName, Time time)", Description = " Get zodiac sign planet is in. ", ExampleOutput = "{ 'PlanetSignName': { 'Name': 'Libra', 'DegreesIn': { 'DegreeMinuteSecond': '0° 55' 6', 'TotalDegrees': '0.9183333333333333' } }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInSign(PlanetName planetName, ZodiacName signInput, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetNavamsaSign(PlanetName planetName, Time time)", Description = " Get Navamsa sign of planet at a given time ", ExampleOutput = "{ 'PlanetNavamsaSign': 'Libra'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<ZodiacName> SignsPlanetIsAspecting(PlanetName planetName, Time time)", Description = " Gives a list of all zodiac signs a specified planet is aspecting All their location with a quarter sight the 5th and the 9th houses with a half sight the 4th and the 8th houses with threequarters of a sight and the 7th house with a full sight. ", ExampleOutput = "{ 'SignsPlanetIsAspecting': 'Aries'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName HouseNavamsaSign(HouseName house, Time time)", Description = " Get navamsa sign of house mid point TODO Checking for correctness needed ", ExampleOutput = "{ 'HouseNavamsaSign': 'Cancer'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetThrimsamsaSign(PlanetName planetName, Time time)", Description = " Get Thrimsamsa sign of house mid point ", ExampleOutput = "{ 'PlanetThrimsamsaSign': 'Scorpio'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetDwadasamsaSign(PlanetName planetName, Time time)", Description = " When a sign is divided into 12 equal parts each is called a dwadasamsa and measures 2.5 degrees. The Bhachakra can thus he said to contain 12x12144 Dwadasamsas. The lords of the 12 Dwadasamsas in a sign are the lords of the 12 signs from it i.e. the lord of the first Dwadasamsa in Mesha is Kuja that of the second Sukra and so on. ", ExampleOutput = "{ 'PlanetDwadasamsaSign': 'Libra'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetSaptamsaSign(PlanetName planetName, Time time)", Description = " sign is divided into 7 equal parts each is called a Saptamsa and measures 4.28 degrees ", ExampleOutput = "{ 'PlanetSaptamsaSign': 'Libra'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetDrekkanaSign(PlanetName planetName, Time time)", Description = " Gets the Drekkana sign the planet is in ", ExampleOutput = "{ 'PlanetDrekkanaSign': 'Libra'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInMoolatrikona(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInMoolatrikona': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetToSignRelationship PlanetRelationshipWithSign(PlanetName planetName, ZodiacName zodiacSignName, Time time)", Description = " Gets a planets relationship to a sign based on the relation to the lord Note Moolatrikona Debilited Exalted is not calculated heres Rahu ketu not accounted for ", ExampleOutput = "{ 'PlanetRelationshipWithSign': 'NeutralVarga'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetToPlanetRelationship PlanetCombinedRelationshipWithPlanet(PlanetName mainPlanet, PlanetName secondaryPlanet, Time time)", Description = " strengths of planets mix the temporary relations and the permanent In order to find the strengths of planets we have to mix the temporary relations and the permanent relations. Thus a temporary enemy plus a permanent or natural enemy becomes a bitter enemy. ", ExampleOutput = "{ 'PlanetCombinedRelationshipWithPlanet': 'SamePlanet'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetToSignRelationship PlanetRelationshipWithHouse(HouseName house, PlanetName planet, Time time)", Description = " Relation between the planet and the lord of the sign of the house Gets a planets relationship with a house Based on the relation between the planet and the lord of the sign of the house Note needs verification if this is correct ", ExampleOutput = "{ 'PlanetRelationshipWithHouse': 'BestFriendVarga'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetToPlanetRelationship PlanetTemporaryRelationshipWithPlanet(PlanetName mainPlanet, PlanetName secondaryPlanet, Time time)", Description = " Planets found in the certain signs from any other planet becomes temporary friends Temporary Friendship Planets found in the 2nd 3rd 4th 10th 11th and 12th signs from any other planet becomes the latters temporary friends. The others are its enemies. ", ExampleOutput = "{ 'PlanetTemporaryRelationshipWithPlanet': 'SamePlanet'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetInSign(ZodiacName signName, Time time)", Description = " Gets all the planets in a sign ", ExampleOutput = "{ 'PlanetInSign': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetTemporaryFriendList(PlanetName planetName, Time time)", Description = " Get list of Temporary Tatkalika Friend for a planet The planets in the 2nd 3rd 4th 10th 11th and 12th signs from any other planet becomes his Tatkalika friend. ", ExampleOutput = "{ 'PlanetTemporaryFriendList': 'Mars, Saturn, Venus'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double GreenwichApparentInJulianDays(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GreenwichApparentInJulianDays': '2421882.8778886646'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTime LocalApparentTime(Time time)", Description = " Shows local apparent time from Swiss Eph ", ExampleOutput = "{ 'LocalApparentTime': '10/16/1918 2:14:12 PM'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTimeOffset LocalMeanTime(Time time)", Description = " This method exists mainly for testing internal time calculation of LMT Important that this method passes the test at all times so much depends on this ", ExampleOutput = "{ 'LocalMeanTime': '10/16/1918 2:00:00 PM +05:10'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.House House(HouseName houseNumber, Time time)", Description = " House start middle and end longitudes ", ExampleOutput = "{ 'House': 'House House4 - Begin:-3.1922, Middle:11.8078, End:26.8078'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PanchakaName Panchaka(Time time)", Description = " Gets Panchaka at a given time ", ExampleOutput = "{ 'Panchaka': 'Raja'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName LordOfWeekday(Time time)", Description = " Planet lord that governs a weekday ", ExampleOutput = "{ 'LordOfWeekday': 'Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName LordOfWeekday(DayOfWeek weekday)", Description = " Planet lord that governs a weekday ", ExampleOutput = "{ 'LordOfWeekday': 'Sun'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTimeOffset LmtToStd(DateTimeOffset lmtDateTime, TimeSpan stdOffset)", Description = " Convert Local Mean Time LMT to Standard Time STD ", ExampleOutput = "{ 'LmtToStd': '9/22/2023 11:02:49 AM +01:00'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 HoraAtBirth(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'HoraAtBirth': '9'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName PlanetHoraSign(PlanetName planetName, Time time)", Description = " Gets hora zodiac sign of a planet ", ExampleOutput = "{ 'PlanetHoraSign': 'Leo'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Time SunriseTime(Time time)", Description = " get sunrise time for that day at that place ", ExampleOutput = "{ 'SunriseTime': '06:13 16/10/1918 +05:30'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Time SunsetTime(Time time)", Description = " Get actual sunset time for that day at that place ", ExampleOutput = "{ 'SunsetTime': '17:57 16/10/1918 +05:30'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTime NoonTime(Time time)", Description = " Get actual noon time for that day at that place Returned in apparent time DateTime Note This is marked when the centre of the Sun is exactly on the meridian of the place. The apparent noon is almost the same for all places. Center of disk is not actually used for now future implementation ", ExampleOutput = "{ 'NoonTime': '10/16/1918 12:00:00 PM'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInGoodAspectToPlanet(PlanetName receivingAspect, PlanetName transmitingAspect, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInGoodAspectToPlanet': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInGoodAspectToHouse(HouseName receivingAspect, PlanetName transmitingAspect, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInGoodAspectToHouse': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetSthanaBalaNeutralPoint(PlanetName planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetSthanaBalaNeutralPoint': '189'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetShadvargaBalaNeutralPoint(PlanetName planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetShadvargaBalaNeutralPoint': '98'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInKendra(PlanetName planet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInKendra': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInKendra(PlanetName[] planetList, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInKendra': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInKendraFromPlanet(PlanetName kendraFrom, PlanetName kendraTo, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInKendraFromPlanet': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 SignDistanceFromPlanetToPlanet(PlanetName startPlanet, PlanetName endPlanet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SignDistanceFromPlanetToPlanet': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsHouseLordInHouse(HouseName lordHouse, HouseName occupiedHouse, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsHouseLordInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetConjunctWithMaleficPlanets(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetConjunctWithMaleficPlanets': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetConjunctWithEnemyPlanets(PlanetName inputPlanet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetConjunctWithEnemyPlanets': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetConjunctWithFriendPlanets(PlanetName inputPlanet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetConjunctWithFriendPlanets': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMaleficPlanetInHouse(HouseName houseNumber, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMaleficPlanetInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsBeneficPlanetInHouse(HouseName houseNumber, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsBeneficPlanetInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMaleficPlanetInSign(ZodiacName sign, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMaleficPlanetInSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> MaleficPlanetListInSign(ZodiacName sign, Time time)", Description = " Gets list of evilmalefic planets in a sign ", ExampleOutput = "{ 'MaleficPlanetListInSign': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsBeneficPlanetInSign(ZodiacName sign, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsBeneficPlanetInSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> BeneficPlanetListInSign(ZodiacName sign, Time time)", Description = " Gets any goodbenefic planets in a sign ", ExampleOutput = "{ 'BeneficPlanetListInSign': 'Venus'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMaleficPlanetAspectHouse(HouseName house, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMaleficPlanetAspectHouse': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsBeneficPlanetAspectHouse(HouseName house, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsBeneficPlanetAspectHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetAspectedByMaleficPlanets(PlanetName lord, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetAspectedByMaleficPlanets': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetAspectedByBeneficPlanets(PlanetName lord, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetAspectedByBeneficPlanets': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetAspectedByEnemyPlanets(PlanetName inputPlanet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetAspectedByEnemyPlanets': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetAspectedByFriendPlanets(PlanetName inputPlanet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetAspectedByFriendPlanets': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName ArudhaLagnaSign(Time time)", Description = " Gets the Arudha Lagna Sign Reference Note Arudha Lagna and planetary dispositions in reference to it have a strong bearing on the financial status of the person. In my own humble experience Arudha Lagna should be given as much importance as the usual Janma Lagna. Arudha Lagna is the sign arrived at by counting as many signs from lord of Lagna as lord of Lagna is removed from Lagna. Thus if Aquarius is ascendant and its lord Saturn is in the 4th Taurus then the 4th from Taurus viz. Leo becomes Arudha Lagna. ", ExampleOutput = "{ 'ArudhaLagnaSign': 'Pisces'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 CountFromSignToSign(ZodiacName startSign, ZodiacName endSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'CountFromSignToSign': '9'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 CountFromConstellationToConstellation(PlanetConstellation start, PlanetConstellation end)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'CountFromConstellationToConstellation': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInHouse(Time time, PlanetName planet, HouseName houseNumber)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsAllPlanetInHouse(Time time, List<PlanetName> planetList, HouseName houseNumber)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsAllPlanetInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsAnyPlanetInHouse(Time time, List<PlanetName> planetList, HouseName houseNumber)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsAnyPlanetInHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetDebilitated(PlanetName planet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetDebilitated': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetExalted(PlanetName planet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetExalted': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.LunarMonth LunarMonth(Time time)", Description = " Gets name of vedic month ", ExampleOutput = "{ 'LunarMonth': 'Empty'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsFullMoon(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsFullMoon': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsWaterSign(ZodiacName moonSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsWaterSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsFireSign(ZodiacName moonSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsFireSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsEarthSign(ZodiacName moonSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsEarthSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsAirSign(ZodiacName moonSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsAirSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.EventNature PlanetAntaramNature(Person person, PlanetName planet)", Description = " WARNING MARKED FOR DELETION ERONEOUS RESULTS NOT SUITED FOR INTENDED PURPOSE METHOD NOT VERIFIED This methods perpose is to define the final good or bad nature of planet in antaram. For now only data from chapter Keyplanets for Each Sign If this proves to be inacurate add more checks in this method. bindu points Similar to method GetDasaInfoForAscendant Data from pg 80 of Keyplanets for Each Sign in Hindu Predictive Astrology TODO meant to determine nature of antram ", ExampleOutput = "{ 'PlanetAntaramNature': 'Neutral'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetBeneficToLagna(PlanetName planetName, ZodiacName lagna)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetBeneficToLagna': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetMaleficToLagna(PlanetName planetName, ZodiacName lagna)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetMaleficToLagna': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetYogakarakaToLagna(PlanetName planetName, ZodiacName lagna)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetYogakarakaToLagna': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetMarakaToLagna(PlanetName planetName, ZodiacName lagna)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetMarakaToLagna': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInOwnHouse(Time time, PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInOwnHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInEnemyHouse(Time time, PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInEnemyHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetInFriendHouse(Time time, PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetInFriendHouse': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Object SwissEphemeris(Time time, PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'SwissEphemeris': '{ Longitude = 202.18463055890365, Latitude = 0.00013917714915584304, DistanceAU = 0.9966429082761756, SpeedLongitude = 0, SpeedLatitude = 0, SpeedDistance = 0 }'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetSameHouseWithHouseLord(Time birthTime, Int32 houseNumber, PlanetName planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetSameHouseWithHouseLord': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 HouseNatureScore(Time personBirthTime, HouseName inputHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'HouseNatureScore': '-2'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double HouseNatureScoreMK4(Time personBirthTime, HouseName inputHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'HouseNatureScoreMK4': '-3'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetNatureScoreMK4(Time personBirthTime, PlanetName inputPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetNatureScoreMK4': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 PlanetNatureScore(Time personBirthTime, PlanetName inputPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetNatureScore': '-1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Varna BirthVarna(Time birthTime)", Description = " Get a persons varna or color character A persons varna can be observed in real life ", ExampleOutput = "{ 'BirthVarna': 'VaisyaWorkmen'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetIshtaKashtaScore(PlanetName planet, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetIshtaKashtaScore': '-1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetKashtaScore(PlanetName planet, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetKashtaScore': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetIshtaScore(PlanetName planet, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetIshtaScore': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromMoon(Int32 signsFromMoon, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromMoon': 'Jupiter'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromLagna(Int32 signsFromLagna, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromLagna': 'Ketu'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromMoon(Int32[] signsFromList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromMoon': 'Jupiter'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromPlanet(Int32[] signsFromList, Time birthTime, PlanetName startPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromPlanet': 'Moon'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromPlanet(Int32 signsFromMoon, Time birthTime, PlanetName startPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromPlanet': 'Moon'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetsSignsFromLagna(Int32[] signsFromList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetsSignsFromLagna': 'Ketu'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetsInSignsFromMoon(Int32[] signsFromList, PlanetName[] planetList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetsInSignsFromMoon': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetsInSignsFromPlanet(Int32[] signsFromList, PlanetName[] planetList, PlanetName startPlanet, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetsInSignsFromPlanet': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetsInSignsFromLagna(Int32[] signsFromList, PlanetName[] planetList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetsInSignsFromLagna': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsBeneficsInSignsFromMoon(Int32[] signsFromList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsBeneficsInSignsFromMoon': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsBeneficsInSignsFromLagna(Int32[] signsFromList, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsBeneficsInSignsFromLagna': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle Ayanamsa(Time time)", Description = " The distance between the Hindu First Point and the Vernal Equinox measured at an epoch is known as the Ayanamsa in Varahamihiras time the summer solistice coincided with the first degree of Cancer and the winter solistice with the first degree of Capricorn whereas at one time the summer solistice coincided with the middle of the Aslesha ", ExampleOutput = "{ 'Ayanamsa': { 'DegreeMinuteSecond': '21° 15' 57', 'TotalDegrees': '21.265833333333333' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle PlanetSayanaLongitude(Time time, PlanetName planetName)", Description = " Get fixed longitude used in western systems connects SwissEph Library with VedAstro NOTE This method connects SwissEph Library with VedAstro Library ", ExampleOutput = "{ 'PlanetSayanaLongitude': { 'DegreeMinuteSecond': '202° 11' 4', 'TotalDegrees': '202.18444444444444' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTime NextLunarEclipse(Time time)", Description = " find time of next lunar eclipse UTC time ", ExampleOutput = "{ 'NextLunarEclipse': '12/17/1918 7:05:32 PM'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTime NextSolarEclipse(Time time)", Description = " finds the next solar eclipse globally UTC time ", ExampleOutput = "{ 'NextSolarEclipse': '12/3/1918 3:21:41 PM'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle PlanetEphemerisLongitude(Time time, PlanetName planetName)", Description = " Get fixed longitude used in western systems aka Sayana longitude NOTE This method connects SwissEph Library with VedAstro Library ", ExampleOutput = "{ 'PlanetEphemerisLongitude': { 'DegreeMinuteSecond': '202° 11' 4', 'TotalDegrees': '202.18444444444444' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle PlanetSayanaLatitude(Time time, PlanetName planetName)", Description = " Gets Swiss Ephemeris longitude for a planet ", ExampleOutput = "{ 'PlanetSayanaLatitude': { 'DegreeMinuteSecond': '0° 0' 0', 'TotalDegrees': '0' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetSpeed(Time time, PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetSpeed': '0.9918000146913549'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetConstellation ConstellationAtLongitude(Angle planetLongitude)", Description = " Converts Planet Longitude to Constellation equivelant Gets info about the constellation at a given longitude ie. Constellation Name Quarter Degrees in constellation etc. ", ExampleOutput = "{ 'ConstellationAtLongitude': 'Chitta - 2'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacSign ZodiacSignAtLongitude(Angle longitude)", Description = " Converts Planet Longitude to Zodiac Sign equivalent ", ExampleOutput = "{ 'ZodiacSignAtLongitude': { 'Name': 'Virgo', 'DegreesIn': { 'DegreeMinuteSecond': '30° 0' 0', 'TotalDegrees': '30' } }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle LongitudeAtZodiacSign(ZodiacSign zodiacSign)", Description = " Converts Zodiac Sign to Planet Longitude equivalent ", ExampleOutput = "{ 'LongitudeAtZodiacSign': { 'DegreeMinuteSecond': '315° 0' 0', 'TotalDegrees': '315' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DayOfWeek DayOfWeek(Time time)", Description = " Get Day Of Week ", ExampleOutput = "{ 'DayOfWeek': 'Wednesday'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName LordOfHora(Int32 hora, DayOfWeek day)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'LordOfHora': 'Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Angle HouseJunctionPoint(Angle previousHouse, Angle nextHouse)", Description = " Gets the junction point sandhi between 2 consecutive houses where one house begins and the other ends. ", ExampleOutput = "{ 'HouseJunctionPoint': { 'DegreeMinuteSecond': '180° 0' 0', 'TotalDegrees': '180' }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName LordOfZodiacSign(ZodiacName signName)", Description = " Gets planet which is the lord of a given sign ", ExampleOutput = "{ 'LordOfZodiacSign': 'Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacName NextZodiacSign(ZodiacName inputSign)", Description = " Gets next zodiac sign after input sign ", ExampleOutput = "{ 'NextZodiacSign': 'Cancer'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 NextHouseNumber(Int32 inputHouseNumber)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'NextHouseNumber': '6'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacSign PlanetExaltationPoint(PlanetName planetName)", Description = " Gets the exact longitude where planet is ExaltedExaltation NOTE Rahu ketu have exaltation points ref Astroloy for Beginners pg. 12 Exaltation Each planet is held to be exalted when it is in a particular sign. The power to do good when in exaltation is greater than when in its own sign. Throughout the sign ascribed the planet is exalted but in a particular degree its exaltation is at the maximum level. ", ExampleOutput = "{ 'PlanetExaltationPoint': { 'Name': 'Aries', 'DegreesIn': { 'DegreeMinuteSecond': '10° 0' 0', 'TotalDegrees': '10' } }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ZodiacSign PlanetDebilitationPoint(PlanetName planetName)", Description = " Gets the exact longitude where planet is DebilitatedDebility TODO method needs testing Note Rahu ketu have debilitation points ref Astroloy for Beginners pg. 12 planet to sign relationship is the whole sign this is just a point The 7th house or the 180th degree from the place of exaltation is the place of debilitation or fall. The Sun is debilitated in the 10th degree of Libra the Moon 3rd of Scorpio and so on. The debilitation or depression points are found by adding 180 to the maximum points given above. While in a state of fall planets give results contrary to those when in exaltation. ref Astroloy for Beginners pg. 11 ", ExampleOutput = "{ 'PlanetDebilitationPoint': { 'Name': 'Libra', 'DegreesIn': { 'DegreeMinuteSecond': '10° 0' 0', 'TotalDegrees': '10' } }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsEvenSign(ZodiacName planetSignName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsEvenSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsOddSign(ZodiacName planetSignName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsOddSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsFixedSign(ZodiacName sunSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsFixedSign': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMovableSign(ZodiacName sunSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMovableSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsCommonSign(ZodiacName sunSign)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsCommonSign': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetToPlanetRelationship PlanetPermanentRelationshipWithPlanet(PlanetName mainPlanet, PlanetName secondaryPlanet)", Description = " Gets a planets permenant relationship. Based on Hindu Predictive Astrology pg. 21 Note Rahu Ketu are not mentioned in any permenant relatioship by Raman. But some websites do mention this. As such Ramans take is taken as final. Since theres so far no explanation by Raman on Rahu Ketu permenant relation it is assumed that such relationship is not needed and to make them up for conveniece sake could result in wrong prediction down the line. But temporary relationship are mentioned by Raman for Rahu Ketu so explicitly use Temperary relationship where needed. ", ExampleOutput = "{ 'PlanetPermanentRelationshipWithPlanet': 'SamePlanet'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTime ConvertJulianTimeToNormalTime(Double julianTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'ConvertJulianTimeToNormalTime': '12/30/1899 12:00:00 AM'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTimeOffset GreenwichTimeFromJulianDays(Double julianTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GreenwichTimeFromJulianDays': '12/30/1899 12:00:00 AM +00:00'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double GreenwichLmtInJulianDays(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GreenwichLmtInJulianDays': '2421882.8680555555'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double[] GetHouse1And10Longitudes(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetHouse1And10Longitudes': '0, 303.07368472648614, 333.07368472648614, 3.0736847264861353, 33.073684726486135, 63.073684726486135, 93.07368472648614, 123.07368472648614, 153.07368472648614, 183.07368472648614, 213.07368472648614, 243.07368472648614, 273.07368472648614'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.DateTimeOffset LmtToUtc(Time time)", Description = " Converts Local Mean Time LMT to Universal Time UTC ", ExampleOutput = "{ 'LmtToUtc': '10/16/1918 8:50:00 AM +00:00'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 GocharaHouse(Time birthTime, Time currentTime, PlanetName planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GocharaHouse': '9'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsGocharaObstructed(PlanetName planet, Int32 gocharaHouse, Time birthTime, Time currentTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsGocharaObstructed': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsInGocharaHouse(Time birthTime, Time currentTime, Int32 gocharaHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetsInGocharaHouse': 'Jupiter'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 Vedhanka(PlanetName planet, Int32 house)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'Vedhanka': '11'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsGocharaOccurring(Time birthTime, Time time, PlanetName planet, Int32 gocharaHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsGocharaOccurring': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetGocharaBindu(Time birthTime, Time nowTime, PlanetName planet, Int32 bindu)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetGocharaBindu': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 PlanetAshtakvargaBindu(PlanetName planet, ZodiacName signToCheck, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetAshtakvargaBindu': '3'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dictionary<PlanetName,Dictionary`2> AllBhinnashtakavargaChart(Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllBhinnashtakavargaChart': 'System.Collections.Generic.Dictionary`2[VedAstro.Library.PlanetName,System.Collections.Generic.Dictionary`2[VedAstro.Library.ZodiacName,System.Int32]]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dictionary<ZodiacName,Int32> PlanetBhinnashtakavargaChart(PlanetName mainPlanet, Time birthTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetBhinnashtakavargaChart': 'System.Collections.Generic.Dictionary`2[VedAstro.Library.ZodiacName,System.Int32]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32[] GetPlanetBeneficHouseAshtakvarga(String mainPlanet, String minorPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetPlanetBeneficHouseAshtakvarga': '1, 2, 4, 7, 8, 9, 10, 11'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.ValueTuple<EventNature,String> GetPlanetDasaMajorPlanetAndMinorRelationship(PlanetName majorPlanet, PlanetName minorPlanet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetPlanetDasaMajorPlanetAndMinorRelationship': '(Bad, Unpleasantness with relatives and superiors, anxieties, headache, pain in the ear, some tendency to urinary or kidney troubles, sickness, fear from rulers and enemies, fear of death, loss of money, danger to father if the Sun is afflicted, stomachache and travels, gains through religious people, mental sufferings, a wandering life in a foreign country.)'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Int32 CurrentDasaCountFromBirth(Time birthTime, Time currentTime)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'CurrentDasaCountFromBirth': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dasas CurrentPlanetDasas(Time birthTime, Time currentTime)", Description = " The main method that starts all Dasa Calculations Gets the occuring Planet Dasas PD1 PD2... for a person at the given time ", ExampleOutput = "{ 'CurrentPlanetDasas': 'VedAstro.Library.Dasas'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dasas DasaCountedFromInputDasa(PlanetName startDasaPlanet, Double years)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'DasaCountedFromInputDasa': 'VedAstro.Library.Dasas'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName NextDasaPlanet(PlanetName planet)", Description = " Gets next planet in Dasa order This order is also used for Bhukti Antaram RefHindu Predictive Astrology pg. 54 ", ExampleOutput = "{ 'NextDasaPlanet': 'Moon'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double TimeLeftInBirthDasa(Time birthTime, PlanetConstellation startConstellation)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'TimeLeftInBirthDasa': '0.17499999999999893'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double YearsTraversedInBirthDasa(Time birthTime, PlanetConstellation startConstellation)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'YearsTraversedInBirthDasa': '6.825000000000001'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double DasaTimePerMinute(ConstellationName constellationName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'DasaTimePerMinute': '0.02375'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetName ConstellationDasaPlanet(ConstellationName constellationName)", Description = " Gets the related lord Dasa planet for a given constellation Used to find the ruling Dasa Planet RefHindu Predictive Astrology pg. 54 ", ExampleOutput = "{ 'ConstellationDasaPlanet': 'Jupiter'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD1PlanetFullYears(PlanetName planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD1PlanetFullYears': '6'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD2PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD2PlanetFullYears': '0.30000000000000004'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD3PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD3PlanetFullYears': '0.015000000000000003'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD4PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet, PlanetName pd4Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD4PlanetFullYears': '0.0007500000000000002'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD5PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet, PlanetName pd4Planet, PlanetName pd5Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD5PlanetFullYears': '3.750000000000002E-05'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD6PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet, PlanetName pd4Planet, PlanetName pd5Planet, PlanetName pd6Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD6PlanetFullYears': '1.875000000000001E-06'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD7PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet, PlanetName pd4Planet, PlanetName pd5Planet, PlanetName pd6Planet, PlanetName pd7Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD7PlanetFullYears': '9.375000000000006E-08'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PD8PlanetFullYears(PlanetName pd1Planet, PlanetName pd2Planet, PlanetName pd3Planet, PlanetName pd4Planet, PlanetName pd5Planet, PlanetName pd6Planet, PlanetName pd7Planet, PlanetName pd8Planet)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PD8PlanetFullYears': '4.687500000000003E-09'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMercuryAfflicted(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMercuryAfflicted': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMercuryMalefic(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMercuryMalefic': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsMoonBenefic(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsMoonBenefic': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetBenefic(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetBenefic': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> BeneficPlanetList(Time time)", Description = " Gets all planets that are benefics at a given time since moon mercury changes Benefics on the other hand tend to do good but sometimes they also become capable of doing harm. ", ExampleOutput = "{ 'BeneficPlanetList': 'Jupiter, Venus, Moon'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetMalefic(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetMalefic': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> MaleficPlanetList(Time time)", Description = " Gets list of permanent malefic planets for moon mercury it is based on changing factors Malefics are always inclined to do harm but under certain conditions the intensity of the mischief is tempered. ", ExampleOutput = "{ 'MaleficPlanetList': 'Sun, Saturn, Mars, Rahu, Ketu, Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsInAspect(PlanetName inputPlanet, Time time)", Description = " Gets all planets the inputed planet is transmitting aspect to ", ExampleOutput = "{ 'PlanetsInAspect': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsAspectingPlanet(Time time, PlanetName receivingAspect)", Description = " Gets all planets the transmitting aspect to inputed planet ", ExampleOutput = "{ 'PlanetsAspectingPlanet': 'Jupiter, Saturn'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<HouseName> HousesInAspect(PlanetName planet, Time time)", Description = " Gets houses aspected by the inputed planet ", ExampleOutput = "{ 'HousesInAspect': 'House4'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> PlanetsAspectingHouse(HouseName inputHouse, Time time)", Description = " Gets all planets aspecting inputed house ", ExampleOutput = "{ 'PlanetsAspectingHouse': 'Sun, Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetAspectedByPlanet(PlanetName receiveingAspect, PlanetName transmitingAspect, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetAspectedByPlanet': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsHouseAspectedByPlanet(HouseName receiveingAspect, PlanetName transmitingAspect, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsHouseAspectedByPlanet': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetConjunctWithPlanet(PlanetName planetA, PlanetName planetB, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetConjunctWithPlanet': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> AllPlanetOrderedByStrength(Time time)", Description = " Returns an array of all planets sorted by strenght 0 index being strongest to 8 index being weakest Note Significance of being Powerful.Among the several planets associated with a bhava that which has the greatest Sbadbala influences the bhava most. ", ExampleOutput = "{ 'AllPlanetOrderedByStrength': 'Mercury, Sun, Jupiter, Moon, Saturn, Venus, Ketu, Mars, Rahu'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetBeneficInShadbala(PlanetName planet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetBeneficInShadbala': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsHouseBeneficInShadbala(HouseName house, Time birthTime, Double threshold)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsHouseBeneficInShadbala': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<ValueTuple`2> AllPlanetStrength(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'AllPlanetStrength': '(433.5, Sun), (392.32, Moon), (288.63, Mars), (543.62, Mercury), (427.37, Jupiter), (370, Venus), (384.45, Saturn), (288.63, Rahu), (370, Ketu)'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.HouseName[] GetAllHousesOrderedByStrength(Time time)", Description = " Returns an array of all houses sorted by strength 0 index being strongest to 11 index being weakest ", ExampleOutput = "{ 'GetAllHousesOrderedByStrength': 'House9, House6, House12, House3, House1, House8, House2, House10, House7, House5, House11, House4'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetShadbalaPinda(PlanetName planetName, Time time)", Description = " THE FINAL TOTAL STRENGTH Shadbala the six sources of strength and weakness the planets The importance of and the part played by the Shadbalas in the science of horoscopy are manifold In order to obtain the total strength of the Shadbala Pinda of each planet we have to add together its Sthana Bala Dik Bala Kala Bala. Chesta Bala and Naisargika Bala. And the Grahas Drik Bala must be added to or subtracted from the above sum according as it is positive or negative. The result obtained is the Shadbala Pinda of the planet in Shashtiamsas. Note Rahu Ketu supported via house lord ", ExampleOutput = "{ 'PlanetShadbalaPinda': '433.5'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetStrength(PlanetName planetName, Time time)", Description = " get total combined strength of the inputed planet input birth time to get strength in horoscope note an alias method to GetPlanetShadbalaPinda strength is easier to remember ", ExampleOutput = "{ 'PlanetStrength': '433.5'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetDrikBala(PlanetName planetName, Time time)", Description = " Aspect strength This strength is gained by the virtue of the aspect Graha Dristi of different planets on other planet. The aspect of benefics is considered to be strength and the aspect of malefics is considered to be weaknesses. Drik Bala.This means aspect strength. The Drik Bala of a Gqaha is onefourth of the Drishti Pinda on it. It is positive or negative according as the Drishti Pinda is positive or negative. See the formula given on page 85. There is special aspect for Jupiter Mars and Saturn on the 5th and 9th 4th and 8th and 3rd and 10th signs respectively. ", ExampleOutput = "{ 'PlanetDrikBala': '15.859965277777775'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double FindViseshaDrishti(Double dk, PlanetName p)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'FindViseshaDrishti': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double FindDrishtiValue(Double dk)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'FindDrishtiValue': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetNaisargikaBala(PlanetName planetName, Time time)", Description = " Nalsargika Bala.This is the natural strength that each Graha possesses. The value assigned to each depends upon its luminosity. Ravi the brightest of all planets has the greatest Naisargika strength while Sani the darkest has the least Naisargika Bala. This is the natural or inherent strength of a planet. ", ExampleOutput = "{ 'PlanetNaisargikaBala': '60'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetChestaBala(PlanetName planetName, Time time, Boolean includeSunMoon)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetChestaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa SunMoonChestaBala(PlanetName planetName)", Description = " special function to get chesta score for IshtaKashta score Bala book pg. 108 ", ExampleOutput = "{ 'SunMoonChestaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Dictionary<PlanetName,Double> Madhya(Double epochToBirthDays, Time time1)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'Madhya': 'System.Collections.Generic.Dictionary`2[VedAstro.Library.PlanetName,System.Double]'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double EpochInterval(Time time1)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'EpochInterval': '6862.579'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.PlanetMotion PlanetMotionName(PlanetName planetName, Time time)", Description = " Gets the planets motion name can be Retrograde Direct Stationary a name version of Chesta Bala ", ExampleOutput = "{ 'PlanetMotionName': 'Direct'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetCirculationTime(PlanetName planetName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetCirculationTime': '1'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetSaptavargajaBala(PlanetName planetName, Time time)", Description = " Sapthavargajabala This is the strength of a planet due to its residence in the seven subdivisions according to its relation with the dispositor. Saptavargaja bala means the strength a planet gets by virtue of its disposition in a friendly neutral or inimical Rasi Hora Drekkana Sapthamsa Navamsa Dwadasamsa and Thrimsamsa. ", ExampleOutput = "{ 'PlanetSaptavargajaBala': '90'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetShadvargaBala(PlanetName planetName, Time time)", Description = " Shadvarga bala This is the strength of a planet due to its residence in the 6 subdivisions according to its relation with the dispositor. They are 1 Rasi 2 Hora 3 Drekkana 4 Navamsa 5 Dwadasamsa and 6 Trimsamsa. ", ExampleOutput = "{ 'PlanetShadvargaBala': '82.5'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsPlanetStrongInShadvarga(PlanetName planet, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsPlanetStrongInShadvarga': 'False'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetSthanaBala(PlanetName planetName, Time time)", Description = " residence of the planet and as such a certain degree of strength or weakness attends on it Positonal strength A planet occupies a certain sign in a Rasi and friendly neutrai or inimical varga. It is either exalted or debilitated lt ocupies its Moolathrikona or it has its own varga. All these states refer to the position or residence of the planet and as such a certain degree of strength or weakness attends on it. This strength or potency is known as the Sthanabala. 1.Uccha Bala Uccha means exaltation. When a planet is placed in its highest exaltation point it is of full strength and when it is in its deepest debilitation point it is devoid of any strength. When in between the strength is calculated proportionately dependent on the distance these planets are placed from the highest exaltation or deepest debilitation point. 2.Sapta Vargiya Bala Rashi Hora Drekkana Saptamsha Navamsha Dwadasamsha and Trimsamsha constitute the Sapta Varga. The strength of the planets in these seven divisional charts based on their placements in Mulatrikona own sign friendly sign etc. constitute the Sapta vargiya bala. 3.OjaYugma RashiAmsha Bala Oja means odd signs and Yugma means even signs. Thus as the name imply this strength is derived from a planets placement in the odd or even signs in the Rashi and Navamsha. 4.Kendradi Bala The name itself implies how to compute this strength. A planet in a Kendra 14710 gets full strength while one in Panapara 25811 gets half and the one in Apoklimas 12369 gets quarter strength. 5.Drekkana Bala Due to placement in first second or third Drekkana of a sign male female and hermaphrodite planets respectively get a quarter strength according to placements in the first second and third Drekkana. ", ExampleOutput = "{ 'PlanetSthanaBala': '198.02703703703702'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetDrekkanaBala(PlanetName planetName, Time time)", Description = " Drekkanabala The Sun Jupiter and Mars in the lst Saturn and Mercury in the 2nd and the Moon and Venus in the last Drekkana get full strength of 60 shashtiamsas. ", ExampleOutput = "{ 'PlanetDrekkanaBala': '15'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetKendraBala(PlanetName planetName, Time time)", Description = " Kendrtzbala Planets in Kendras get 60 shashtiamsas in Panapara 30 and in Apoklima 15. ", ExampleOutput = "{ 'PlanetKendraBala': '60'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetOjayugmarasyamsaBala(PlanetName planetName, Time time)", Description = " Ojayugmarasyamsa In odd Rasi and Navamsa the Sun Mars Jupiter Mercury and Saturn get strength and the rest in even signs ", ExampleOutput = "{ 'PlanetOjayugmarasyamsaBala': '30'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetKalaBala(PlanetName planetName, Time time)", Description = " Gets a planets Kala Bala or Temporal strength ", ExampleOutput = "{ 'PlanetKalaBala': '103.24422453257381'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetYuddhaBala(PlanetName inputedPlanet, Dictionary<PlanetName,Shashtiamsa> preKalaBalaValues, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetYuddhaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetAyanaBala(PlanetName planetName, Time time)", Description = " Ayanabala All planets get 30 shasbtiamsas at the equator. For the Sun Jupiter Mars and Venus add proportionately when they are in northern course and for the Moon and Saturn when in southern course. Deduct proportionately when they are in the opposite direction. Unit of strength is 60 shashtiamsas. TODO some values for calculation with standard hooscope out of whack it seems small differences in longitude seem magnified at final value not 100 sure need further testing for confirmation but final values seem ok so far ", ExampleOutput = "{ 'PlanetAyanaBala': '37.86440971775901'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double PlanetDeclination(PlanetName planetName, Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'PlanetDeclination': '-8.854236112896396'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Double EclipticObliquity(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'EclipticObliquity': '23.44937660164435'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetHoraBala(PlanetName planetName, Time time)", Description = " Hora Bala AKA Horadhipathi Bala ", ExampleOutput = "{ 'PlanetHoraBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetAbdaBala(PlanetName planetName, Time time)", Description = " The planet who is the king of the year of birth is assigned a value of 15 Shashtiamsas as his Abdabala. ", ExampleOutput = "{ 'PlanetAbdaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetMasaBala(PlanetName planetName, Time time)", Description = " Gets a planets masa bala the lord of the month of birth is assigned a value of 30 Shashtiamsas as his Masabala ", ExampleOutput = "{ 'PlanetMasaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetVaraBala(PlanetName planetName, Time time)", Description = "Empty sample text", ExampleOutput = "{ 'PlanetVaraBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Object YearAndMonthLord(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'YearAndMonthLord': '{ YearLord = Saturn, MonthLord = Mercury }'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetTribhagaBala(PlanetName planetName, Time time)", Description = " Thribhagabala Mercury the Sun and Saturn get 60 shashtiamsas each during the lst 2nd and 3rd onethird positions of the day respectively. The Moon Venus and Mars govern the lst 2nd and 3rd onethird portion of the night respectively. Jupiter is always strong and gets 60 shashtiamsas of strength. ", ExampleOutput = "{ 'PlanetTribhagaBala': '0'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetOchchaBala(PlanetName planetName, Time time)", Description = " Oochchabala The distance between the planets longitude and its debilitation point divided by 3 gives its exaltation strength or oochchabaJa. ", ExampleOutput = "{ 'PlanetOchchaBala': '3.027037037037037'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Boolean IsDayBirth(Time time)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'IsDayBirth': 'True'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetPakshaBala(PlanetName planetName, Time time)", Description = " Pakshabala When the Moon is waxing take the distance from the Sun to the Moon and divide it by 3. The quotient is the Pakshabala. When the Moon is waning take the distance from the Moon to the Sun and divide it by 3 for assessing Pakshabala. Moon Jupiter Venus and Mercury are strong in Sukla Paksba and the others in Krishna Paksha. Note Mercury is benefic or malefic based on planets conjunct with it ", ExampleOutput = "{ 'PlanetPakshaBala': '16.563148148148144'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetNathonnathaBala(PlanetName planetName, Time time)", Description = " Nathonnathabala Midnight to midday the Sun Jupiter and Venus gain strength proportionately till they get maximum at zenith. The other planets except Mercury. are gaining strength from midday to midnight proportionately. In the same way Mercury is always strong and gets 60 shashtiamsas. ", ExampleOutput = "{ 'PlanetNathonnathaBala': '48.81666666666667'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa PlanetDigBala(PlanetName planetName, Time time)", Description = " Gets Dig Bala of a planet. Jupiter and Mercury are strong in Lagna Ascendant the Sun and Mars in the 10th Saturn in the 7th and the Moon and Venus in the 4th. The opposite houses are weak points. Divide the distance between the longitude of the planet and its depression point by 3. Quotient is the strength. ", ExampleOutput = "{ 'PlanetDigBala': '56.37027777777778'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.Shashtiamsa HouseStrength(HouseName inputHouse, Time time)", Description = " Bhava Bala.Bhava means house and Bala means strength. Bhava Bala is the potency or strength of the house or bhava or signification. We have already seen that there are 12 bhavas which comprehend all human events. Each bhava signifies or indicates certain events or functions. For instance the first bhava represents Thanu or body the appearance of the individual his complexion his disposition his stature etc. If it attains certain strength the native will enjoy the indications of the bhava fully otherwise he will not sufficiently enjoy them. The strength of a bhava is composed of three factors viz. 1 Bhavadhipathi Bala 2 Bhava Digbala 3 Bhava Drishti Bala. ", ExampleOutput = "{ 'HouseStrength': '343.7767361111111'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.HouseSubStrength BhavaDrishtiBala(Time time)", Description = " House received aspect strength Bhavadrishti Bala.Each bhava in a horoscope remains aspected by certain planets. Sometimes the aspect cast on a bhava will be positive and sometimes it will be negative according as it is aspected by benefics or malefics. For all 12 houses ", ExampleOutput = "{ 'BhavaDrishtiBala': { 'BhavaDrishtiBala': [ { 'House': 1, 'Strength': 83.23621527777777 }, { 'House': 2, 'Strength': 29.96486111111109 }, { 'House': 3, 'Strength': 54.11437500000004 }, { 'House': 4, 'Strength': 55.14673611111112 }, { 'House': 5, 'Strength': 24.56802083333332 }, { 'House': 6, 'Strength': 18.781493055555565 }, { 'House': 7, 'Strength': -3.2845486111110986 }, { 'House': 8, 'Strength': 19.114652777777778 }, { 'House': 9, 'Strength': 42.08138888888889 }, { 'House': 10, 'Strength': 26.678229166666668 }, { 'House': 11, 'Strength': 41.93315972222221 }, { 'House': 12, 'Strength': 57.66541666666669 } ] }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.HouseSubStrength CalcBhavaDigBala(Time time)", Description = " House strength from different types of signs Bhava Digbala.This is the strength acquired by the different bhavas falling in the different groups or types of signs. For all 12 houses ", ExampleOutput = "{ 'CalcBhavaDigBala': { 'BhavaDigBala': [ { 'House': 1, 'Strength': 30.0 }, { 'House': 2, 'Strength': 50.0 }, { 'House': 3, 'Strength': 50.0 }, { 'House': 4, 'Strength': 0.0 }, { 'House': 5, 'Strength': 10.0 }, { 'House': 6, 'Strength': 10.0 }, { 'House': 7, 'Strength': 30.0 }, { 'House': 8, 'Strength': 40.0 }, { 'House': 9, 'Strength': 20.0 }, { 'House': 10, 'Strength': 30.0 }, { 'House': 11, 'Strength': 20.0 }, { 'House': 12, 'Strength': 50.0 } ] }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.HouseSubStrength BhavaAdhipathiBala(Time time)", Description = " Bhavadhipatbi Bala This is the potency of the lord of the bhava. For all 12 houses ", ExampleOutput = "{ 'BhavaAdhipathiBala': { 'BhavaAdhipathiBala': [ { 'House': 1, 'Strength': 384.45 }, { 'House': 2, 'Strength': 384.45 }, { 'House': 3, 'Strength': 427.37 }, { 'House': 4, 'Strength': 288.63 }, { 'House': 5, 'Strength': 370.0 }, { 'House': 6, 'Strength': 543.62 }, { 'House': 7, 'Strength': 392.32 }, { 'House': 8, 'Strength': 433.5 }, { 'House': 9, 'Strength': 543.62 }, { 'House': 10, 'Strength': 370.0 }, { 'House': 11, 'Strength': 288.63 }, { 'House': 12, 'Strength': 427.37 } ] }}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> BeneficPlanetListByShadbala(Time personBirthTime, Int32 threshold)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'BeneficPlanetListByShadbala': 'Sun, Moon, Mars, Mercury, Jupiter, Venus, Saturn, Rahu, Ketu'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> BeneficPlanetListByShadbala(Time personBirthTime)", Description = "Empty sample text", ExampleOutput = "{ 'BeneficPlanetListByShadbala': 'Mercury'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<HouseName> BeneficHouseListByShadbala(Time personBirthTime, Int32 threshold)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'BeneficHouseListByShadbala': 'House1, House2, House3, House4, House5, House6, House7, House8, House9, House10, House11, House12'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<HouseName> BeneficHouseListByShadbala(Time personBirthTime)", Description = "Empty sample text", ExampleOutput = "{ 'BeneficHouseListByShadbala': 'House9'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> MaleficPlanetListByShadbala(Time personBirthTime, Int32 threshold)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'MaleficPlanetListByShadbala': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<PlanetName> MaleficPlanetListByShadbala(Time personBirthTime)", Description = " 0 index is most malefic ", ExampleOutput = "{ 'MaleficPlanetListByShadbala': 'Rahu'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<HouseName> MaleficHouseListByShadbala(Time personBirthTime, Int32 threshold)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'MaleficHouseListByShadbala': ''}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.List<HouseName> MaleficHouseListByShadbala(Time personBirthTime)", Description = "Empty sample text", ExampleOutput = "{ 'MaleficHouseListByShadbala': 'House4'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String GetHouseTags(HouseName house)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetHouseTags': 'peace of mind, home life, mother, conveyances, house property, landed and ancestral properties, education and neck and shoulders'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String GetSignTags(ZodiacName zodiacName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetSignTags': 'fixed, even, feminine, mild, watery, of long ascension, rising by the head.'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String GetPlanetTags(PlanetName lordOfHouse)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetPlanetTags': 'Father, masculine, malefic, copper colour, philosophical tendency, royal, ego, sons, patrimony, self reliance, political power, windy and bilious temperament, month, places of worship, money-lenders, goldsmith, bones, fires, coronation chambers, doctoring capacity'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String GetHouseType(HouseName houseNumber)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetHouseType': 'Quadrants (kendras)'}" },
        new OpenAPIMetadata() { Signature = "VedAstro.Library.Calculate.String GetDasaInfoForAscendant(ZodiacName ascendantName)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetDasaInfoForAscendant': '\r\n Scorpio - Jupiter is beneficial. The Sun and the Moon\r\n produce Rajayoga. Mercury and Venus are evil. Jupiter,\r\n even if be becomes a maraka, does not inflict death. Mercury\r\n and other evil planets, when they get death-inlflicting powers,\r\n do not certainly spare the native.\r\n '}" },
        new OpenAPIMetadata() { Signature = "System.Object.Type GetType()", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetType': 'System.Reflection.TargetException: Non-static method requires a target.\r\n at System.Reflection.MethodInvokerCommon.ValidateInvokeTarget(Object target, MethodBase method)\r\n at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n at VedAstro.Library.AutoCalculator.ExecuteCals(IEnumerable`1 foundCalcs, Object[] paramInput) in C:\\Users\\VedAstro\\Desktop\\Projects\\VedAstro\\Library\\managers\\AutoCalculator.cs:line 138'}" },
        new OpenAPIMetadata() { Signature = "System.Object.String ToString()", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'ToString': 'System.Reflection.TargetException: Non-static method requires a target.\r\n at System.Reflection.MethodInvokerCommon.ValidateInvokeTarget(Object target, MethodBase method)\r\n at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n at VedAstro.Library.AutoCalculator.ExecuteCals(IEnumerable`1 foundCalcs, Object[] paramInput) in C:\\Users\\VedAstro\\Desktop\\Projects\\VedAstro\\Library\\managers\\AutoCalculator.cs:line 138'}" },
        new OpenAPIMetadata() { Signature = "System.Object.Boolean Equals(Object obj)", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'Equals': 'System.Reflection.TargetException: Non-static method requires a target.\r\n at System.Reflection.MethodInvokerCommon.ValidateInvokeTarget(Object target, MethodBase method)\r\n at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n at VedAstro.Library.AutoCalculator.ExecuteCals(IEnumerable`1 foundCalcs, Object[] paramInput) in C:\\Users\\VedAstro\\Desktop\\Projects\\VedAstro\\Library\\managers\\AutoCalculator.cs:line 138'}" },
        new OpenAPIMetadata() { Signature = "System.Object.Int32 GetHashCode()", Description = "NO DESC FOUND!! ERROR", ExampleOutput = "{ 'GetHashCode': 'System.Reflection.TargetException: Non-static method requires a target.\r\n at System.Reflection.MethodInvokerCommon.ValidateInvokeTarget(Object target, MethodBase method)\r\n at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n at VedAstro.Library.AutoCalculator.ExecuteCals(IEnumerable`1 foundCalcs, Object[] paramInput) in C:\\Users\\VedAstro\\Desktop\\Projects\\VedAstro\\Library\\managers\\AutoCalculator.cs:line 138'}" },
    };
}

}

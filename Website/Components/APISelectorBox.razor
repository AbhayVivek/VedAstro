@*⠀⠀⠀⠀⠀⠀⠀⢠⣶⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣴⣾⣶⣄⠘⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠙⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣾⣿⣿⣿⠿⠿⠓⢀⣀⣠⣤⣤⣄⠀⠀⠀
⠀⣀⣤⡀⠀⠀⢀⣤⣶⣤⡙⢿⣿⣿⣿⡟⣩⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀
⢸⣿⣿⣿⣦⡀⠸⣿⣿⣿⣿⣦⡙⢿⣿⡇⣿⣿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⡆
⠈⠻⣿⣿⣿⣿⣦⡉⢿⣿⣿⣿⣿⣦⡙⢿⣬⣉⣩⣭⣤⣴⣶⣿⣿⣿⣿⣿⣿⣧
⠀⠀⠈⠻⣿⣿⣿⣿⣦⡉⠻⣿⣿⣿⣿⣦⡙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟
⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣷⣍⠻⣿⣿⣿⠇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇
⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣷⣬⣭⣥⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⣿⣿⣿⡿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀
KEEP IT REAL
*@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Collections
@using FuzzySharp

<div class="hstack">
	@*Component shows combo box with people list*@
	<div class="btn-group" style="width: @GR.W412px;">
		@* DROPDOWN BUTTON *@
		<button type="button" @onclick="OnClickTrigger" style="text-align-last: center;font-size: 16px; font-weight: 500;" class="btn dropdown-toggle btn-outline-primary text-start" data-bs-toggle="dropdown">
			@FormattedMethodName
		</button>
		@* DROPDOWN SECTION *@
		<ul class="dropdown-menu ps-2 pe-3" style="height: @GR.W412px; width: @GR.W412px; overflow-y: scroll; overflow-x: clip;">

			@* SEARCH *@
			<div class="hstack gap-2">
				<input @ref="_searchInput" @onkeyup="OnKeyUpSearchBar" type="text" class="form-control ms-0 mb-2 ps-3" placeholder="Search...">
				<Icon ExtraClass="mb-2" ExtraStyle="cursor: pointer;" TooltipText="View List" IconName="pepicons-pop:list" OnClickCallback="@(() => AppData.Go(PageRoute.APICallList))" />
			</div>

			@* LIST OF PEOPLE *@
			@if (IsReady)
			{
				@foreach (var apiMethod in MethodListFiltered)
				{
					<li class="dropdown-item d-flex gap-2 w-100" @onclick="@(() => OnClickMethodName(apiMethod))" style="cursor: pointer;">
						<span style=" font-size: 16px; font-weight: 500; ">@(Format.FormatName(apiMethod.Name))</span>
						<IconTooltip Opacity="0.3" Interactive="false" ShowOnHover="true" Size="16" TooltipText="@apiMethod.Description" SmallIcon="true" />
				</li>
				}
			}
			@* LOADING ICON *@
			@* loading icon when list is being made, no loading popup because reduces user UX *@
			else
			{
				<div class="d-flex flex-column align-items-center mt-5">
					<strong>Loading...</strong>
					<div class="spinner-border" role="status" aria-hidden="true"></div>
				</div>
			}


		</ul>
	</div>

	@*ADD NEW FUNCTION ICON*@
	<IconButton ExtraClass="ms-2" TooltipText="Add New API" IconName="ic:round-add-box" OnClickCallback="OnClickAddNewApi" />
</div>


@code {

	/// <summary>
	/// Name of selected method to show
	/// </summary>
	private string FormattedMethodName { get; set; } = DefaultMessage;  //used to detect if selected

	private const string DefaultMessage = "Make a choice...";  //used to detect if selected

	/// <summary>
	/// only this way of marking works
	/// </summary>
	private bool IsReady = false;

	private ElementReference _searchInput;

	/// <summary>
	/// list that is shown to user and is changed by search
	/// </summary>
	private List<OpenAPIMetadata> MethodListFiltered { get; set; } = new();

	public OpenAPIMetadata SelectedMethod { get; set; }

	private List<OpenAPIMetadata> MethodListALL = new();

	/// <summary>
	/// extracted search text for faster search
	/// </summary>
	private string[] MethodListALLSearchText;

	/// <summary>
	/// Event fired when selection of method is changed
	/// </summary>
	public event EventHandler OnChangeSelectMethod;


	protected override async Task OnInitializedAsync()
	{
		//hide display
		await _jsRuntime.ShowLoading();
		IsReady = false;

		var allApiCalculatorsMethodInfo = Tools.GetAllApiCalculatorsMethodInfo();

		//NOTE: raw info about calculators is converted to hard data package, to speed up rendering on auto search
		MethodListALL = OpenAPIMetadata.FromMethodInfoList(allApiCalculatorsMethodInfo);

		//to speed up search array of description
		MethodListALLSearchText = MethodListALL.Select(x => x.SearchText).ToArray();

		//make copy for search
		MethodListFiltered = MethodListALL;
		
		//show data on display
		IsReady = true;
		_jsRuntime.HideAlert();
	}

	/// <summary>
	/// checks if OnChangeSelectMethod is not null (meaning it has at least one subscriber)
	/// </summary>
	public void RaiseOnChangeSelectMethod()
	{
		OnChangeSelectMethod?.Invoke(this, EventArgs.Empty);
	}

	/// <summary>
	/// when a method name in tooltip drop down menu is clicked
	/// </summary>
	private void OnClickMethodName(OpenAPIMetadata method)
	{
		//set value for reference
		SelectedMethod = method;
		FormattedMethodName = Format.FormatName(SelectedMethod.Name);

		//fire event, so parent listening can update other elements
		RaiseOnChangeSelectMethod();

		//needed to make change appear
		StateHasChanged();
	}

	/// <summary>
	/// Handle when user uses the Search
	/// </summary>
	private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
	{
		//get search text, lower case for more results
		var searchText = (await _jsRuntime.GetValue(_searchInput)).ToLower();

		//if no search text then show all
		if (string.IsNullOrEmpty(searchText))
		{
			MethodListFiltered = MethodListALL;
		}
		else
		{
			//find in string list
			var results = Process.ExtractAll(searchText, MethodListALLSearchText, cutoff: 60).OrderByDescending(r => r.Score); ;

			// foreach (var result in results)
			// {
			// 	Console.WriteLine($" Score: {result.Score}, Index: {result.Index}, Choice: {result.Value}");
			// }

			MethodListFiltered = results.Select(yy => MethodListALL[yy.Index]).ToList();

			//MethodListFiltered = MethodListALL.FindAll(person => person.DisplayName.ToLower().Contains(text));
		}

	}

	/// <summary>
	/// When main button is clicked to trigger auto focus to search bar
	/// </summary>
	private void OnClickTrigger()
	{
		_searchInput.FocusAsync();
	}

	/// <summary>
	/// if not selected will return empty
	/// </summary>
	public string GetSelectedMethodName() => SelectedMethod.Name ?? "";


	private async Task OnClickAddNewApi()
	{
		//get suggestion from user via js sweet alert lib
		var newApiDesc = await AppData.JsRuntime.PopupTextInput("Add new API Call", "textarea", "name or describe");

		//loading box show
		await _jsRuntime.ShowLoading();

		//add message to API Messages book
		await WebsiteTools.SendMailToAPI(AppData.CurrentUser.Id, $"Add new API : {newApiDesc}");

		//say thank you and will get back
		await _jsRuntime.ShowAlert("success", "Thank you", "stay tuned in our Facebook for updates");

	}

	/// <summary>
	/// Return true if drop down is selected, else false
	/// </summary>
	/// <returns></returns>
	public async Task<bool> IsSelected() => FormattedMethodName != DefaultMessage;

}

@namespace Website.Pages
@using VedAstro.Library
@using System.Xml.Linq
@using Newtonsoft.Json.Linq
@using System.Text


<div @ref="MainElement" class="vstack gap-1">

    @* BUTTON ROW *@
    <div class="hstack gap-3 mb-2">
        <IconButton SmallSize="true" ButtonText="Show/Hide" IconName="bx:hide" OnClickCallback="@(() => _jsRuntime.FunFeaturePopUp("ShowHideEventsChart"))" />
        <IconButton DropDownWidthPx="@GR.W255px" ExtraDropdownClass="" SmallSize="true" ButtonText="Highlight" IconName="fluent:highlight-16-filled">
            <DropDownList>
                <div class="d-flex flex-wrap gap-1">
                    @foreach (var eventNameKeyword in SelectedHighlightDictionary.Keys)
                    {
                        <div style="width: @GR.W97px; margin-left:10px;" class="form-check">
                            <input @onclick="@(()=>OnClickHighlightKeyword(eventNameKeyword))" style="width: 20px; height: 20px;" class="form-check-input" type="checkbox" id="@eventNameKeyword">
                            <label class="form-check-label"  for="@eventNameKeyword">
                                @eventNameKeyword
                            </label>
                        </div>
                    }
                </div>
            </DropDownList>
        </IconButton>
        <IconButton SmallSize="true" ButtonText="Life Events" IconName="mdi:calendar-outline" OpenNewTab="true" ClickUrl="@($"{PageRoute.Journal}/{SelectedPerson.Id}")" />
        <IconButton SmallSize="true" ButtonText="Download" IconName="ic:outline-save" OnClickCallback="OnClickSaveChartSvg" />
        <IconButton SmallSize="true" ButtonText="Print" IconName="ic:round-print" OnClickCallback="@(() => _jsRuntime.FunFeaturePopUp("PrintEventsChart"))" />
        <IconButton SmallSize="true" ButtonText="Share" IconName="tabler:share-2">
            <DropDownList>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("ShareEmailEventsChart"))">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="ic:outline-attach-email" />
                        <span>Email PDF</span>
                    </a>
                </li>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(() => WebsiteTools.ShareCurrentPageOnFacebook())">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="uil:facebook" />
                        <span>Facebook</span>
                    </a>
                </li>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(() => Website.AppData.Go(URL.Instagram, newTab:true))">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="uil:instagram" />
                        <span>Instagram</span>
                    </a>
                </li>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(() => Website.AppData.Go(URL.Twitter, newTab:true))">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="uil:twitter" />
                        <span>Twitter</span>
                    </a>
                </li>
            </DropDownList>
        </IconButton>

    </div>

    @*
    dark mode is disabled for chart with mix-blend-mode
    note: extra logic to remove filter in normal mode
    *@
    <div @ref="eventsChartSvgHolder" class="container-xxl" id="EventsChartSvgHolder" style="margin-left: -11px; @(AppData.DarkMode?"mix-blend-mode: difference;":"")"></div>

    @*bottom chart options row*@

</div>

@code {


    //█▀▄ ▄▀█ ▀█▀ ▄▀█
    //█▄▀ █▀█ ░█░ █▀█

    /// <summary>
    /// Reference to main holder div
    /// </summary>
    public ElementReference MainElement;
    public ElementReference eventsChartSvgHolder;

    private string PdfFileName = "";

    /// <summary>
    /// Id of chart that is shown
    /// </summary>
    public string CurrentChartId { get; set; }


    public Person SelectedPerson { get; set; }
    public string _timePreset { get; set; }
    public string _eventPreset { get; set; }

    ElementReference _eventsChartSvgHolder;
    public Time StartTime { get; set; }
    public Time EndTime { get; set; }
    public TimeRange TimeRange => new TimeRange(StartTime, EndTime);
    public List<EventTag> InputedEventTags { get; set; }

    private IconButton _showButton;
    private IconButton _hideButton;
    private IconButton _mobileViewButton;

    /// <summary>
    /// Raw SVG string of the latest chart
    /// </summary>
    string _finalSvg;

    /// <summary>
    /// When true html is rendered
    /// </summary>
    bool _isReady = false;

    public string RawChartSvg { get; set; }

    public TimeRange SelectedTimeRange { get; set; }

    public Dictionary<string, bool> SelectedHighlightDictionary { get; set; } = new Dictionary<string, bool>();


    //█▀█ █░█ █▄▄ █░░ █ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▄█ █▄█ █▄▄ █ █▄▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    protected override async Task OnInitializedAsync()
    {

        InitHighLightCheckboxDictionary();

    }

    private void InitHighLightCheckboxDictionary()
    {
        //checkboxes for 12 houses
        foreach (var houseName in House.AllHouses)
        {
            var formatedHouseName = Format.FormatName(houseName.ToString());
            SelectedHighlightDictionary.Add(formatedHouseName, false);
        }

        //checkboxes for 9 planets
        foreach (var planetName in PlanetName.All9Planets)
        {
            var formatedPlanetName = Format.FormatName(planetName.ToString());
            SelectedHighlightDictionary.Add(formatedPlanetName, false);
        }

    }

    private void ResetHighLightCheckboxDictionary()
    {
        //checkboxes for 12 houses
        foreach (var houseName in House.AllHouses)
        {
            var formatedHouseName = Format.FormatName(houseName.ToString());
            SelectedHighlightDictionary[formatedHouseName] = false;
        }

        //checkboxes for 9 planets
        foreach (var planetName in PlanetName.All9Planets)
        {
            var formatedPlanetName = Format.FormatName(planetName.ToString());
            SelectedHighlightDictionary[formatedPlanetName] = false;
        }

    }


    /// <summary>
    /// Sets the data that is processed and fill the content
    /// - Parent element calls here to start display chart process
    /// </summary>
    public async Task ShowChart(Person person, TimeRange timeRange, List<EventTag> inputedEventTags, ChartOptions summaryOptions)
    {
        //stop if empty person
        if (Person.Empty.Equals(person)) { throw new InvalidOperationException("PERSON CAN'T BE EMPTY!!!"); }

        try
        {
            //close previous if any
            _isReady = false;

            //saved to be accessed later
            SelectedPerson = person;
            InputedEventTags = inputedEventTags;
            SelectedTimeRange = timeRange;


            //get raw SVG chart from API as string
            int maxWidth = 940; //to fit nicely in page
            RawChartSvg = await AppData.API.EventsChart.GetEventsChart(person, timeRange, inputedEventTags, maxWidth, summaryOptions);

            //bring chart to live with EventsChart.js
            await _jsRuntime.InvokeVoidAsync(JS.ChartFromSVG, RawChartSvg);

            //get latest dark mode setting
            //so that event chart is not lost in darkness
            await AppData.UpdateDarkMode(_jsRuntime);

            //play sound for better ux
            _jsRuntime.PlayDoneSound();

            //render html
            _isReady = true;

            //reset highlight check box from previous
            ResetHighLightCheckboxDictionary();

            //needed to make save button appear again
            StateHasChanged();
        }
        catch (Exception e)
        {
            WebLogger.Error(e);
            Console.WriteLine(e.Message);
        }



    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    /// <summary>
    /// Generates the needed url and opens new tab with it
    /// </summary>
    /// <returns></returns>
    private async Task OnClickMobileViewButton()
    {
        //generate url
        var personId = SelectedPerson.Id;
        var eventPreset = _eventPreset;
        var timePreset = _timePreset;
        var url = $"{AppData.URL.ApiUrl}/chart/{personId}/{eventPreset}/{timePreset}";

        _jsRuntime.OpenNewTab(url);
    }

    private async Task OnClickCopyChartLink()
    {
        //generate the url
        var url = AppData.URL.ApiUrl + $"/savedchart/{CurrentChartId}";

        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync(JS.CopyToClipboard, url);

        //let user know link coppied
        await _jsRuntime.ShowAlert("success", $"Chart Link Copied!", false, 2600);
    }

    //todo use for lite viewer
    private async Task OnClickSaveChartLocal()
    {
        await _jsRuntime.ShowLoading();

        //check if number of charts exceed 3 (real 4), as that seems to be chrome limit
        var savedChartCount = (await WebsiteTools.GetSavedChartNameList()).Count;
        if (savedChartCount > 3)
        {
            await _jsRuntime.ShowAlert("success", $"Saved charts is full!", false, 2600);
        }

        //a name to uniquely identify this chart
        var chartName = $"{SelectedPerson.Id}|{StartTime.GetStdYear()}-{EndTime.GetStdYear()}|Chart|{SelectedPerson.Name}"; //"Chart" important used later to find
        await _jsRuntime.SetProperty(chartName, _finalSvg);

        _jsRuntime.HideLoading();

        //show message to user
        await _jsRuntime.ShowAlert("success", $"Chart saved successfully!", false, 2600);

    }


    private async Task OnClickShareToEmail()
    {

        try
        {
            //poll till get
            int maxWidth = 940;
            var algorithmFuncsList = new List<AlgorithmFuncs>() { EventsChartManager.Algorithm.GetGeneralScore };
            var summaryOptions = new ChartOptions(algorithmFuncsList);
            string chartSvg = await AppData.API.EventsChart.GetEventsChart(SelectedPerson, SelectedTimeRange, InputedEventTags, maxWidth, summaryOptions);

            //control reaches here than already complete
            await _jsRuntime.InvokeVoidAsync(JS.ChartFromSVG, chartSvg);

            //get latest dark mode setting
            //so that event chart is not lost in darkness
            await AppData.UpdateDarkMode(_jsRuntime);

            //play sound for better ux
            _jsRuntime.PlayDoneSound();

            //render html
            _isReady = true;

            //needed to make save button appear again
            StateHasChanged();
        }
        catch (Exception e)
        {
            WebLogger.Error(e);
            Console.WriteLine(e.Message);
        }
    }

    /// <summary>
    /// Takes the chart as an SVG string and saves it to Downloads as SVG file
    /// </summary>
    /// <returns></returns>
    private async Task OnClickSaveChartSvg()
    {
        var encodingHeader = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
        var bytes = Encoding.UTF8.GetBytes(encodingHeader + RawChartSvg);
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:text/plain;base64,{base64}";
        var filename = $"LifePredictor-{SelectedPerson.NameWithNoSpace}-{SelectedPerson.BirthYear}.svg";
        //await JSRuntime.InvokeVoidAsync("saveAsFile", filename, url);
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, url);
    }


    /// <summary>
    /// Toggle highlight of events upon click of checkbox
    /// </summary>
    private void OnClickHighlightKeyword(string keyword)
    {
        //value not yet auto toggled, here we toggle to get correct result
        var toggled = !SelectedHighlightDictionary[keyword];
        SelectedHighlightDictionary[keyword] = toggled; //set back value

        //calling this via JS
        if (toggled)
        {
            _jsRuntime.InvokeVoidAsync(JS.highlightByEventName, keyword);
        }

        //UNHIGHLIGHT
        else
        {
            _jsRuntime.InvokeVoidAsync(JS.unhighlightByEventName, keyword);
        }
    }



}


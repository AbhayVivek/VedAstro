@namespace Website.Pages
@using Genso.Astrology.Library;
@using System.Xml.Linq


<style>
    .iconButton {
        width: fit-content;
        height: fit-content;
        /*align-self: end;*/
        /* padding: 5px; */
        min-width: 100px;
        /*align-self: center;*/
    }

    /*usually placed next to input*/
    .iconOnlyButton {
        margin-left: 6px;
        min-width: auto !important;
        height: 37px;
    }

</style>

<button @ref="ElementReference" @onclick="OnClickButton" class="@ButtonClassStr">
    @*only show icon if specified*@
    @if (IconName != null)
    {
        <span class="iconify" data-icon="@IconName" data-width="25" />
    }
    @ButtonText
</button>

@*text below button*@
@if (ShowDelayWarning)
{
    <div class="hstack gap-1" style="align-items: start;margin-top: -10px;">
        <span class="iconify" data-icon="mdi:snail" data-width="20"></span>
        <p style="font-size: 13px; color: #8f8f8f;">Warning Slow</p>
    </div>
}

@code {

    /// <summary>
    /// the final class list added to button elm
    /// </summary>
    private string ButtonClassStr
    {
        get
        {
            //add outline class if specified
            var colorStyle = $"btn-{Color}" + (Outline ? "-outline " : " ");

            return (SmallSize ? "btn-sm " : "") //remember space between class names
                   + (IsIconOnly ? "iconOnlyButton " : "")
                   + colorStyle
                   + "btn hstack gap-2 iconButton "
                   + ExtraClass;
        }
    }

    /// <summary>
    /// Bootstrap outline
    /// </summary>
    [Parameter]
    public bool Outline { get; set; } = false;

    /// <summary>
    /// Text that will be displayed in button
    /// </summary>
    [Parameter]
    public string? ButtonText { get; set; }

    /// <summary>
    /// If true means no text provided so icon is made small by css class
    /// </summary>
    public bool IsIconOnly => string.IsNullOrEmpty(ButtonText);

    [Parameter]
    public bool ShowDelayWarning { get; set; } = false;

    [Parameter]
    public bool SmallSize { get; set; } = false;

    /// <summary>
    /// Bootstrap button color class
    /// default to : primary
    /// other:secondary,success,danger,...
    /// </summary>
    [Parameter]
    public string Color { get; set; } = "primary";

    /// <summary>
    /// Special icon name from icon-sets.iconify.design
    /// If not specified, icon automatically not set
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }

    /// <summary>
    /// If specified extra, added directly to button class attribute
    /// </summary>
    [Parameter]
    public string? ExtraClass { get; set; }


    /// <summary>
    /// Tooltip text
    /// </summary>
    [Parameter]
    public string? TooltipText { get; set; }


    /// <summary>
    /// Function that is called on click of button
    /// Note: using delegate so that can change function based on page mode
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    /// <summary>
    /// If URL is provided, on button click will navigate to URL
    /// </summary>
    [Parameter]
    public string? ClickUrl { get; set; }

    public ElementReference ElementReference { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //attach tooltip lib element if tooltip provided
            if (!string.IsNullOrEmpty(TooltipText))
            {
                await _jsRuntime.Tippy(ElementReference, new { content = this.TooltipText });
            }
        }
    }



    /// <summary>
    /// Default button click will send page to URL link if provided
    /// else exit silently
    /// </summary>
    private async Task OnClickButton(MouseEventArgs obj)
    {
        //log this
        await WebLogger.Click(ButtonText);

        //if custom onclick has been specified than use that
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(obj);
        }
        //else if URL has been specified use that
        else if (ClickUrl != "" || ClickUrl != null)
        {
            _navigation.NavigateTo(ClickUrl);
        }

    }

}

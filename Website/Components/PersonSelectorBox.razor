@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Collections

@*Component shows combo box with people list*@

<div>
    <label class="form-label">@Label</label>
    <div class="hstack">
        @*PersonSelector class used to programatically set visible person selection*@
        <select @bind="SelectedPersonId" class="form-control PersonSelector" style="width:@GR.W255px; height:@GR.W37px;">
            <option value="">Select Name</option>
            @DropDownOptionsHtml
        </select>
        <IconButton TooltipText="Add new person" IconName="ant-design:user-add-outlined" ClickUrl="@PageRoute.AddPerson" />
    </div>
</div>


@code {

    //DEFAULTS
    const string DefaultLabel = "Person";
    private MarkupString DropDownOptionsHtml { get; set; } = new("");
    private const string NotSelectedPersonId = "0";
    private string _selectedPersonId = NotSelectedPersonId;


    //PARAMETERS

    /// <summary>
    /// Get selected person name
    /// </summary>
    [Parameter]
    public string SelectedPersonId
    {
        get => _selectedPersonId;
        set
        {
            //this stops update loops
            if (_selectedPersonId == value) return;

            //log this, don't await to reduce lag
            WebLogger.Data($"Selected Person:{value}");

            _selectedPersonId = value;
            //update value in parent page
            SelectedPersonIdChanged.InvokeAsync(value);
        }
    }



    /// <summary>
    /// Text that is shown above list
    /// </summary>
    [Parameter]
    public string? Label { get; set; } = DefaultLabel;


    //below prop needed for 2-way binding between page & component to work
    [Parameter]
    public EventCallback<string> SelectedPersonIdChanged { get; set; }




    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    private async Task _OnInitialized()
    {


        //else use already available list
        await FillDropDown();

    }

    private async Task FillDropDown()
    {
        //show loading box
        await _jsRuntime.ShowLoading();

        var html = "";

        var personList = await AppData.TryGetPersonListSortedAZ();

        //generate drop down options in html
        foreach (var person in personList)
        {
            //auto select person set by parent
            var isSelected = person.Id == SelectedPersonId ? "selected" : "";
            html += $"<option value=\"{person.Id}\" {isSelected}>{person.Name} - {person.BirthYear}</option>";
        }

        //set drop down list into view
        DropDownOptionsHtml = new MarkupString(html);


        //need to propagate changes
        this.StateHasChanged();

        //hide loading box
        _jsRuntime.HideLoading();

    }

    public async Task<Person> GetSelectedPerson() => await WebsiteTools.GetPersonFromId(SelectedPersonId, _jsRuntime);

    /// <summary>
    /// True if a person has been selected else false
    /// </summary>
    public bool IsPersonSelected => SelectedPersonId != NotSelectedPersonId && SelectedPersonId != null && SelectedPersonId != "";

    /// <summary>
    /// Programmatically sets a person from ID, as though selected by user
    /// </summary>
    public async Task SetPerson(string personIdUrl)
    {
        //set the backend data
        SelectedPersonId = personIdUrl;
    }


}

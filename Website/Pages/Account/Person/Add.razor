@using VedAstro.Library
@*A simple page specialized for adding new Person profiles fast & easy*@
@attribute [Route(PageRoute.AddPerson)]


<PageTitle>Add New Person Profile</PageTitle>

<PageTop Title="Add New Person" IconName="icomoon-free:profile">
    <Description>
        Person's birth info for astronomical calculation
    </Description>
</PageTop>

<div class="d-flex flex-wrap">
    <div class="vstack gap-3 me-5 mb-4" style="max-width:@GR.W412px">
        <div>
            <label>Name<HelpIconTooltip SmallIcon="true" HelpText="@HelpText.PrivateProfileName" /></label>
            <input @bind="_nameInput" type="text" class="form-control" placeholder="Enter name">
        </div>
        <TimeInputSimple @ref="_timeInput" LabelText="Birth Time" />
        <GeoLocationInput @ref="_geoLocationInput" LabelText="Birth Location" HideLongLat="@true" />
        <div>
            <label>
                Gender
                <HelpIconTooltip SmallIcon="true" HelpText="@HelpText.Gender" />
            </label>
            <select @bind="_genderInput" class="form-control">
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>
        <div class="hstack gap-4">
            <IconButton SmallSize="true" IconName="akar-icons:arrow-back" ButtonText="Back" OnClickCallback="_jsRuntime.GoBack"></IconButton>
            <IconButton SmallSize="true" Color="success" IconName="bx:save" ButtonText="Save" OnClickCallback="@OnClickSubmitButton" />
        </div>
    </div>
    @*PRIVATE DATA MESSAGE*@
    <InfoBox MaxWidth="365" Title="Private" Description="Person data is private &amp; not visible to public." IconName="flat-color-icons:privacy" />
</div>



@code {
    TimeInputSimple _timeInput;
    private string? _nameInput;
    private GeoLocationInput _geoLocationInput;
    private string? _genderInput = "Male"; //since Male is first in combobox
    private Person _person;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    /// <summary>
    /// Function that is called on save click of button
    /// </summary>
    private async Task OnClickSubmitButton() => await InvokeAsync(async () => await _OnClickSubmitButton()).Try(_jsRuntime);




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    //sends the newly created person to API server
    private async Task _OnClickSubmitButton()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //make a new person from the details in the input
        _person = await GetPersonInstanceFromInput();

        //send newly created person to API server
        await AppData.API.AddPerson(_person);

        //page ready
        _jsRuntime.HideAlert();

        await _jsRuntime.ShowAlert("success", $"{_nameInput} added successfully!", false, 2500);

        //wait a little and send user back to previous page
        await Task.Delay(500);
        _jsRuntime.GoBack();

    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Name
        if (String.IsNullOrWhiteSpace(_nameInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
            return false;
        }

        //TEST 2 : Gender
        if (String.IsNullOrWhiteSpace(_genderInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectGender, true);
            return false;
        }

        //TEST 3 : Location
        var isValid = await _geoLocationInput.IsValid();
        if (!isValid)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.InvalidLocation, true);
            return false;
        }

        //TEST 4 : check if user is sleeping by letting time be set as current year and date and month
        var tempTime = await _timeInput.GetDateTimeOffset();
        var thisYear = tempTime.Year == DateTimeOffset.Now.Year;
        var thisMonth = tempTime.Month == DateTimeOffset.Now.Month;
        var thisDate = tempTime.Month == DateTimeOffset.Now.Month;
        isValid = !(thisYear && thisMonth);
        if (!isValid)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", "Are you sleeping?", "It says you are <strong>born today</strong>, looks like you forgot to input correct birth date. Go wash your face dear.");
            return false;
        }

        //TEST 4 : Time Traveler Detection
        var futureTime = tempTime > DateTimeOffset.Now; //future large than now
        if (futureTime)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", "Time traveler?", "It says you are <strong>born in future</strong> date, looks like you input wrong birth date. Time travelers not supported yet, maybe in the future.");
            return false;
        }


        //if control reaches here than, it's valid
        return true;

    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private async Task<Person> GetPersonInstanceFromInput()
    {
        //auto set correct Timezone based on location & birth date
        var dateTimeOffset = await _timeInput.GetDateTimeOffset(); //offset is ignored here
        _timeInput.TimeZone = await Tools.GetTimezoneOffsetApi(_geoLocationInput.GetGeoLocation(), dateTimeOffset, ServerManager.GoogleGeoLocationApiKey);

        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();

        //create a new person from the inputed data
        var birthTime = await _timeInput.GetTime(geoLocation);

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //if user not signed in, use their visitor id as user ID
        //done so that public list is not clouded
        var newPersonOwnerId = AppData.IsGuestUser ? AppData.VisitorId : AppData.CurrentUser?.Id;

        //there is possibility user has put invalid characters, clean it!
        var nameInput = Tools.CleanNameText(_nameInput);

        //new human readable person ID made specially by API
        //note : ID for person should be only created here, for maintenance sake
        var newPersonProfileId = await AppData.API.GetNewPersonId(nameInput, birthTime.GetStdYear());

        //create the new complete person profile
        return new Person(newPersonProfileId, nameInput, birthTime, gender, new[] { newPersonOwnerId });

        //----------LOCAL FUNCTION ---------------------
    }

}

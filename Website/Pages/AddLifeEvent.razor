@using Genso.Astrology.Library
@attribute [Route(PageRoute.AddLifeEvent)]

<PageTitle>Life Event</PageTitle>
<PageTop Title="Life Event" IconName="ic:twotone-event">
    <Description>Life events is shown in Dasa chart. Find astrological reason for bad or good events in your life.</Description>
    @*    <ButtonsRow>
    <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
    </ButtonsRow>
    *@
</PageTop>


@*Person selector*@
<div class="vstack gap-2" style="max-width: @AppData.MaxContentWidthPx;">
    <PeopleSelectorBox @ref="_peopleSelectorBox" />
    <div>
        <label class="form-label">Event Name</label>
        <input @bind="_nameInput" type="text" class="form-control" placeholder="Marriage">
    </div>
    <div>
        <label class="form-label">Description</label>
        <input @bind="_descriptionInput" type="text" class="form-control" placeholder="Marriage did not last">
    </div>
    <label class="form-label">Nature</label>
    <select class="form-control"  @bind="_natureInputValue" style="width: fit-content;min-width: 273px;">
        <option value="Good" selected>Good</option>
        <option value="Bad">Bad</option>
        <option value="Neutral">Neutral</option>
    </select>
    <div>
        <TimeInput @ref="_timeInput" />
    </div>

    <button class="btn btn-primary" style="align-self: end;" @onclick="AddButtonClicked">Add</button>
</div>



@code {

    private PeopleSelectorBox? _peopleSelectorBox;
    private string? _nameInput;
    private string? _descriptionInput;
    private TimeInput _timeInput;
    private string? _natureInputValue = "Good"; //without this, defaults to empty string


    private async Task AddButtonClicked()
    {
        await _globalVariable.LoadingMessage.Show();

        //create an life event from the inputed data
        var _inputedLifeEvent = new LifeEvent
            {
                Name = _nameInput,
                Description = _descriptionInput,
                StartTime = _timeInput.FullTimeString,
                Nature = _natureInputValue
            };

        //add life event to existing person
        var selectedPerson = _peopleSelectorBox.GetSelectedPerson();
        var hashBeforeAdd = selectedPerson.Hash;
        selectedPerson.LifeEventList.Add(_inputedLifeEvent);

        //update person in API by hash
        await WebsiteTools.UpdatePerson(selectedPerson, hashBeforeAdd);


        //page ready
        await _globalVariable.LoadingMessage.Hide();

        //show message to user
        await _jsRuntime.ShowAlert("success", $"{_nameInput} added successfully!", false, 2500);

        //reload page to clear previous data
        WebsiteTools.ReloadPage(_navigation);
    }


}

@using Genso.Astrology.Library
@*A simple page specialized for adding new Person profiles fast & easy*@
@attribute [Route(PageRoute.AddPerson)]


<PageTitle>Add New Person Profile</PageTitle>

<PageTop Title="Add New Person" IconName="icomoon-free:profile">
    <Description>
        Add new Person's birth info for astronomical calculation
    </Description>
    <ButtonsRow>
        <IconButton IconName="akar-icons:arrow-back" ButtonText="Back" OnClickCallback="_jsRuntime.GoBack"></IconButton>
        @*        <IconButton IconName="dashicons:video-alt3" ButtonText="Watch Guide" OnClickCallback="()=> _jsRuntime.OpenNewTab(PageRoute.AddPersonGuideVideo)"></IconButton>
        *@
    </ButtonsRow>
</PageTop>

<div class="vstack gap-3" style="max-width:286px">
    <div>
        <label>Name<HelpBox SmallIcon="true" HelpText="@HelpText.PrivateProfileName"></HelpBox></label>
        <input @bind="_nameInput" type="text" class="form-control" placeholder="Enter name">
    </div>
    <TimeInputSimple @ref="_timeInput" LabelText="Birth Time" />
    <GeoLocationInput @ref="_geoLocationInput" LabelText="Birth Location" HideLongLat="@true" />
    <div>
        <label>
            Gender
            <HelpBox SmallIcon="true" HelpText="@HelpText.Gender"></HelpBox>
        </label>
        <select @bind="_genderInput" class="form-control">
            <option value="Male">Male</option>
            <option value="Female">Female</option>
        </select>
    </div>
    <IconButton ButtonText="Save" IconName="bx:save" OnClickCallback="@OnClickSubmitButton" />

</div>

@code {
    TimeInputSimple _timeInput;
    private string? _nameInput;
    private GeoLocationInput _geoLocationInput;
    private string? _genderInput = "Male"; //since Male is first in combobox
    private Person _person;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    /// <summary>
    /// Function that is called on save click of button
    /// </summary>
    private async Task OnClickSubmitButton() => await InvokeAsync(async () => await _OnClickSubmitButton()).Try(_jsRuntime);




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    //sends the newly created person to API server
    private async Task _OnClickSubmitButton()
    {
        await _jsRuntime.ShowLoading();


        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //auto set correct Timezone based on location & birth date
        var dateTimeOffset = await _timeInput.GetDateTimeOffset(); //offset is ignored here
        _timeInput.TimeZone = await Tools.GetTimezoneOffsetApi(_geoLocationInput.GetGeoLocation(), dateTimeOffset, ServerManager.GoogleGeoLocationApiKey);

        //make a new person from the details in the input
        _person = await GetPersonInstanceFromInput();

        //send newly created person to API server
        await WebsiteTools.AddPerson(_person);

        //page ready
        _jsRuntime.HideAlert();

        await _jsRuntime.ShowAlert("success", $"{_nameInput} added successfully!", false, 2500);

        //wait a little and send user back to previous page
        await Task.Delay(500);
        _jsRuntime.GoBack();

    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Name
        if (String.IsNullOrWhiteSpace(_nameInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
            return false;
        }

        //TEST 2 : Gender
        if (String.IsNullOrWhiteSpace(_genderInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectGender, true);
            return false;
        }

        //TEST 3 : Location
        if (!_geoLocationInput.IsValid())
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.InvalidLocation, true);
            return false;
        }

        //if control reaches here than, it's valid
        return true;

    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private async Task<Person> GetPersonInstanceFromInput()
    {

        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();

        //create a new person from the inputed data
        var birthTime = await _timeInput.GetTime(geoLocation);

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //if user not signed in, use their visitor id as user ID
        //done so that public list is not clouded
        var newPersonOwnerId = AppData.IsGuestUser ? AppData.VisitorId : AppData.CurrentUser?.Id;

        //there is possibility user has put invalid characters, clean it!
        var nameInput = Tools.CleanText(_nameInput);

        //new person ID made from thin air
        var newPersonProfileId = Tools.GenerateId();

        //create the new complete person profile
        return new Person(newPersonProfileId, nameInput, birthTime, gender, new[] { newPersonOwnerId });

        //----------LOCAL FUNCTION ---------------------
    }

}

@attribute [Route(PageRoute.GoodTimeFinder)]
@using VedAstro.Library
@using System.Collections

<PageTitle>@pageTitle</PageTitle>

@* PAGE HEADER *@
<PageTopSideImage ImageName="good-time-finder.png"
                  Title="Good Time Finder"
                  DescriptionText="Find the right time for wedding, job interview, buying house and etc. Muhurtha is sanskrit for Good Time or Electional Astrology." />


@* SELECTOR AND INFO BOXES*@
<div class="d-md-flex justify-content-between">

    @*SELECTOR*@
    <div class="me-5">
        <div class="vstack gap-3 p-3">

            <PersonSelectorBox @ref="_easyPersonSelectorBox" @bind-SelectedPersonId="@SelectedPersonId" />

            <div>
                <label class="form-label">Time Range<HelpIconTooltip SmallIcon="true" HelpText="@HelpText.DasaTimeRange" /></label>
                <select @bind="SelectedTimeRangePreset" class="form-control" style="width: @GR.W255px;">
                    <option value="3month" selected>+/- 3 Months</option>
                    <option value="1day">+/- 1 Day</option>
                    <option value="1week">+/- 1 Week</option>
                    <option value="1month">+/- 1 Month</option>
                    <option value="6month">+/- 6 Months</option>
                    <option value="1year">+/- 1 Year</option>
                    <option value="5year">+/- 5 Year</option>
                    <option value="10year">+/- 10 Year</option>
                    <option style=" font-weight: bold; color: #0d6efd; " value="selectyear">Custom Year</option>
                </select>
            </div>


            @* EVENT SELECT *@
            <IconTitle Title="Event Type" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)" />
            <div style="width: @GR.W509px;" class="d-flex flex-wrap gap-1">
                @for (var i = 0; i < FullList.Count; i++)
                {
                    var eventTag = FullList[i];
                    //if more than height limit, break rendered list
                    <div style="width: @GR.W194px;" class="form-check">
                        <input @bind="@(SelectedTagsDictionary[eventTag])" class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            @(Format.FormatName(eventTag.ToString()))
                        </label>
                    </div>
                }


            </div>
            <IconButton SmallSize="true" IconName="uim:process" ButtonText="Calculate" Color="success" OnClickCallback="OnClickCalculateEasy" ShowDelayWarning="true" />
        </div>
    </div>

</div>


@* CHART DISPLAY HERE *@
<div>
    <hr>
    @*hide until ready but initialized as well*@
    <div style="@(_isResultReady?"":"display:none;")">
        <div @ref="_holderDiv">
            <EventsChartViewer @ref="_eventsChartViewer" />
        </div>
    </div>

    @* PLACE HOLDER MESSAGE *@
    @* hide when loaded *@
    <div class="d-flex justify-content-center" style="@((!_isResultReady) ? "" : "display:none !important;")">
        @* important needed to override flex *@
        <span class="" style="color: @AppData.Grey; font-size: 14px;">Chart will appear here after you click calculate</span>
    </div>
    <hr />
</div>


@code {

    private string pageTitle;
    private bool _isResultReady;
    private ElementReference _holderDiv;
    private EventsChartViewer _eventsChartViewer;
    public string? SelectedTimeRangePreset { get; set; } = "3month"; //default to 3 months

    private PersonSelectorBox _easyPersonSelectorBox;
    public string SelectedPersonId { get; set; }

    public string SelectedLifeYearStart { get; set; }

    public string? SelectedLifeYearEnd { get; set; }

    private List<string> lifeYearList = new List<string>();

    /// <summary>
    /// Gets all tags that have been selected in checkbox
    /// </summary>
    public List<EventTag> SelectedTags => SelectedTagsDictionary.Where(pair => pair.Value).Select(pair => pair.Key).ToList();

    /// <summary>
    /// data from HTML when selection changes is auto updated here
    /// </summary>
    private Dictionary<EventTag, bool> SelectedTagsDictionary;


    protected override async Task OnInitializedAsync()
    {
        //load tag extenstion list
        FullList = EventTagExtensions.GetAll();

        //remove PD1 to PD8 doesnt make sense to show here (has number in name)
        FullList.RemoveAll(et =>
        {
            var hasNumber = et.ToString().Any(char.IsDigit);
            return hasNumber;//if has number than return true
        });

        //set all not selected as default
        SelectedTagsDictionary = new Dictionary<EventTag, bool>();
        foreach (var eventTag in FullList)
        {
            SelectedTagsDictionary.Add(eventTag, false);
        }

    }

    public List<EventTag> FullList { get; set; }


    /// <summary>
    /// Gets possible age list for selection 120 years
    /// </summary>
    private static List<string> GetAgeSelectionRange()
    {
        var compiledList = new List<string>();

        for (int i = 1; i < 120; i++)
        {
            compiledList.Add(i.ToString());
        }

        //make visible
        return compiledList;
    }


    private async Task OnClickCalculateEasy()
    {
        //keep copy of selected time range else gets reset, on re-render
        var backUpSelection = SelectedTimeRangePreset;

        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!EasyValidationPassed()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get data from inputs and save it for use by other components
        SelectedPerson = await _easyPersonSelectorBox.GetSelectedPerson();

        //put person name into tab title for easy multi-tabbing
        pageTitle = $"Muhurtha | {SelectedPerson.Name}";

        //set data into dasa viewer
        var timeRange = GetTimeRange();

        //for muhurtha standard event nature is more logical
        var summaryOptions = new SummaryOptions(Algorithm.Empty, true);

        //pump data into chart
        await _eventsChartViewer.ShowChart(SelectedPerson, timeRange, SelectedTags, summaryOptions);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();

        //place time preset value back
        SelectedTimeRangePreset = backUpSelection;
    }


    public Person SelectedPerson { get; set; }

    /// <summary>
    /// Gets parsed time from users crazy input
    /// </summary>
    /// <returns></returns>
    private TimeRange GetTimeRange()
    {
        var systemTimezone = Tools.GetSystemTimezone();

        //if user selected indiviual year than make new preset is placed in format that can be read by parser
        if (SelectedTimeRangePreset == "selectyear") { SelectedTimeRangePreset = $"{SelectedLifeYearStart}-{SelectedLifeYearEnd}"; } //exp 2000-2010
                                                                                                                                     //else if (SelectedTimeRangePreset == "selectage") { SelectedTimeRangePreset = $"age{SelectedLifeAgeStart}to{SelectedLifeAgeEnd}"; } //exp age4to50

        var timeRange = EventChartTools.AutoCalculateTimeRange(SelectedPerson, SelectedTimeRangePreset, systemTimezone);

        return timeRange;
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool EasyValidationPassed()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_easyPersonSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        //TEST 2
        //at least 1 event tag is selected
        if (!SelectedTags.Any())
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", "Select at least 1 event type!", true);
            return false;
        }


        //if control reaches here than, it's valid
        return true;
    }


}

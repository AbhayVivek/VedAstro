@using Genso.Astrology.Library
@using System.Xml.Linq
@attribute [Route(PageRoute.Contact)]

<PageTitle>Contact</PageTitle>

<PageTop Title="Contact us" IconName="fluent:chat-mail-20-filled">
    <Description>You can report a bug, suggest a feature or just say Hi. Our email is contact@vedastro.org</Description>
</PageTop>

@*<h3>Our Email: contact@vedastro.org</h3>
*@
<div @ref="_messageFormElement" class="vstack gap-2" style="max-width:@AppData.MaxWidth;">
    <div>
        <label for="emailInputId">Email</label>
        <input @bind="_emailInput" type="text" id="emailInputId" class="form-control" placeholder="john@example.com">
    </div>
    <div>
        <label for="messageInputId">Message</label>
        <textarea style="min-height:132px;" class="form-control" @bind="_messageInput" id="messageInputId" placeholder="Hi, this is a short message."></textarea>
    </div>
    <IconButton OnClickCallback="@OnClickSendButton" ButtonText="Send" IconName="bi:send-check" />
</div>

@*Default hidden Thank you message*@
<div style="display: none;" @ref="_thankYouMessageElement">
    <h3>
        Thank you for your message.<br />
        We'll reply soon.
    </h3>
</div>

@code {

    private string? _messageInput;
    private string? _emailInput;
    private ElementReference _messageFormElement;
    private ElementReference _thankYouMessageElement;



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    private async void OnClickSendButton() => await InvokeAsync(async () => await SendMessage()).Try(_jsRuntime);


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task SendMessage()
    {
        //loading box show
       await _jsRuntime.ShowLoading();

    //package message data to be sent
        var textXml = new XElement("Text", _messageInput);
        var emailXml = new XElement("Email", _emailInput);
        var userIdXml = new XElement("UserId", AppData.CurrentUser?.Id);
        var messageXml = new XElement("Message", userIdXml, emailXml, Tools.TimeStampSystemXml, textXml);

        //send message to API server
        await ServerManager.WriteToServerXmlReply(URL.AddMessageApi, messageXml, _jsRuntime);


        //hide message form
        await _jsRuntime.Hide(_messageFormElement);
        //show thank you message
        await _jsRuntime.Show(_thankYouMessageElement);

        //hide loading box
        _jsRuntime.HideAlert();
    }
}

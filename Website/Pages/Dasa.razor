@attribute [Route(PageRoute.Dasa)]
@using Genso.Astrology.Library

@*<UnderConstructionHeader PageName="Dasa" />
*@

<PageTitle>Dasa</PageTitle>
<PageTop Title="Dasa and Bhukti" IconName="fluent:book-star-20-filled">
    <Description>
        Dasas are major periods in which the indications of the planets are realised.
        Know good and bad periods of your life years ahead.
    </Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>



<div class="vstack gap-2">
    @*PERSON SELECTOR
    note: selector placed here because multiple components use it
    *@
    <PeopleSelectorBox @ref="_peopleSelectorBox" />
    <MonthYearSelectorBox LabelText="Start" @ref="_startTimeSelector" />
    <MonthYearSelectorBox LabelText="End" @ref="_endTimeSelector" />

    @*CALCULATE BTN*@
    <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculate"></IconButton>

    @*hide until ready but initialized as well*@
    <div style="@(_isResultReady?"":"display:none;")">
        <hr>
        @*DASA VIEW BOX*@
        <div>
            <HelpBox Label="Dasa" HelpText="@HelpText.Dasa"></HelpBox>
            <DasaReportViewer @ref="_dasaReportViewer" />
        </div>
    </div>

    @if (_isResultReady)
    {
        <hr>
        @*PLANET INFO LIST*@
        <div>
            <h4 class="mt-2">Planets</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <PlanetInfoBox PlanetName="PlanetName.Sun" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Moon" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mercury" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mars" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Jupiter" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Saturn" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Venus" Time="@SelectedPerson.BirthTime" />
            </div>
        </div>
        @*HOUSE INFO LIST*@
        <div>
            <h4 class="mt-2">Houses</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <HouseInfoBox HouseNumber="1" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="2" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="3" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="4" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="5" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="6" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="7" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="8" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="9" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="10" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="11" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="12" Time="@SelectedPerson.BirthTime" />
            </div>
        </div>

    }
</div>

@*HELP SECTION*@
<PageHelpSection @ref="_helpSection">
    <Content>

        <h4 class="fw-bold">Purpose?</h4>
        <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
            The vexed question of timing events is solved to a great
            extent by the Dasa system. From a scientific point of view,
            we cannot say with any sort of definiteness, upon what basis
            each planet is allotted a certain number of years as its term of Dasa.
            But in actual practice, the Dasa system yields very satisfactory result
        </p>

        <h4 class="fw-bold">What Dasa system do you use?</h4>
        <p class="text-justify mb-4" style="max-width: @AppData.MaxWidth;">
            There are any number of Dasas in general use,
            but we propose to deal with Vimshottari. In the
            choice of any particular type of Dasa, the criterion must be
            that of experience and Vimshottari has answered this test.
        </p>

        <h4 class="fw-bold">How to calculate?</h4>
        <p class="text-justify mb-4" style="max-width: @AppData.MaxWidth;">
            The position of the Moon at birth is important in the
            calculation of the Dasas. Every constellation covers 13.3°
            degrees of the zodiacal space. Each nakshatra has a planet
            assigned as its lord and the Dasa at birth is determined rather
            indicated by the constellation occupied by the Moon at the
            moment of birth.
        </p>

        @AppData.HinduPredictiveAstrologyCredit

    </Content>
</PageHelpSection>


@code {

    //--------------------FIELDS
    private PageHelpSection _helpSection;

    private PeopleSelectorBox? _peopleSelectorBox;

    private DasaReportViewer? _dasaReportViewer;

    public Person SelectedPerson { get; set; }
    public GeoLocation SelectedLocation { get; set; }
    private bool _isResultReady = false; //marks if the page ready to loaded
    private MonthYearSelectorBox _startTimeSelector;
    private MonthYearSelectorBox _endTimeSelector;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await InitPage()).Try();

    private async Task OnClickCalculate() => await InvokeAsync(async () => await DoCalculation()).Try();



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    private async Task InitPage()
    {
        //todo below marked for deletion 10/1/2022
        ////show loading box
        //_jsRuntime.ShowLoading();

        ////set people list into people selector
        ////note : without above first call _peopleSelectorBox is null
        //PersonList = await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id);
        //_peopleSelectorBox.SetData(PersonList);

        ////hide loading box
        //_jsRuntime.HideAlert();
    }


    private async Task DoCalculation()
    {
        //only continue if passed input field validation
        if (!ValidationPassed()) { return; }

        _jsRuntime.ShowLoading();

        //get data from inputs and save it for use by other components
        SelectedPerson = _peopleSelectorBox.GetSelectedPerson();

        await _jsRuntime.AddToProgressBar(5);

        //set data into dasa viewer
        dynamic timeRange = ComputeStartEndTimeFromInput();
        var startTime = timeRange.Start;
        var endTime = timeRange.End;

        //note: we calculate days per pixel here as to auto show/hide some events
        //normally would not be needed
        var daysPerPixel = DasaReportViewer.GetDayPerPixel(startTime, endTime);
        //generate the events row & time header row
        var inputedEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Gochara };
        //only show tara chandra when zoomed in
        if (daysPerPixel <= 0.08)
        {
            inputedEventTags.Add(EventTag.Tarabala);
            inputedEventTags.Add(EventTag.Chandrabala);
        }
        inputedEventTags.Add(EventTag.DasaSpecialRules);

        await _dasaReportViewer.SetData(SelectedPerson, startTime, endTime, inputedEventTags);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassed()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            var msg = $"Select person name!";
            _jsRuntime.ShowAlert("error", msg, true, timer: 0);
            return false;
        }


        //if control reaches here than, it's valid
        return true;
    }


    private object ComputeStartEndTimeFromInput()
    {
        var startMonthYear = _startTimeSelector.GetSelectedTimeText();
        var x = $"00:00 01/{startMonthYear} {SelectedPerson.BirthTimeZone}";
        var startTime = new Time(x, SelectedPerson.GetBirthLocation());

        var endMonthYear = _endTimeSelector.GetSelectedTimeText();
        var y = $"11:59 {GetLastDay(endMonthYear)}/{endMonthYear} {SelectedPerson.BirthTimeZone}";
        var endTime = new Time(y, SelectedPerson.GetBirthLocation());

        return new { Start = startTime, End = endTime };

        //gets last day of any month at any time
        int GetLastDay(string monthYearText)
        {
            //split month and year
            string[] splited = monthYearText.Split('/');
            var month = int.Parse(splited[0]);
            var year = int.Parse(splited[1]);

            int daysInMonth = DateTime.DaysInMonth(year: year, month: month);
            return daysInMonth;

        }
    }



}
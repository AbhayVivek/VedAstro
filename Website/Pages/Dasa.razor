@attribute [Route(PageRoute.Dasa)]
@using Genso.Astrology.Library
@using Website.Code

<UnderConstructionHeader PageName="Dasa" />


<div class="vstack gap-2">
    @*PERSON SELECTOR
    note: selector placed here because multiple components use it
    *@
    <PeopleSelectorBox @ref="_peopleSelectorBox" />
    <MonthYearSelectorBox LabelText="Start" @ref="_startTimeSelector" />
    <MonthYearSelectorBox LabelText="End" @ref="_endTimeSelector" />

    @*CALCULATE BTN*@
    <div>
        <button @onclick="OnClickCalculate" class="btn btn-primary">Calculate</button>
    </div>
    <hr>
    @*DASA VIEW BOX*@
    <div>
        <HelpBox Label="Dasa" HelpText="@HelpText.Dasa"></HelpBox>
        <DasaReportViewer @ref="_dasaReportViewer" />
    </div>
    <hr>
    @*PLANET INFO LIST*@
    <div>
        @if (_isResultReady)
        {
            <h4 class="mt-2">Planets</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <PlanetInfoBox PlanetName="PlanetName.Sun" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Moon" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mercury" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mars" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Jupiter" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Saturn" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Venus" Time="@SelectedPerson.BirthTime" />
            </div>
        }
    </div>
    @*HOUSE INFO LIST*@
    <div>
        @if (_isResultReady)
        {
            <h4 class="mt-2">Houses</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <HouseInfoBox HouseNumber="1" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="2" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="3" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="4" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="5" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="6" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="7" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="8" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="9" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="10" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="11" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="12" Time="@SelectedPerson.BirthTime" />
            </div>
        }
    </div>
</div>



@code {

    //--------------------FIELDS

    private PeopleSelectorBox? _peopleSelectorBox;

    private DasaReportViewer? _dasaReportViewer;

    public Person SelectedPerson { get; set; }
    public GeoLocation SelectedLocation { get; set; }
    private bool _isResultReady = false; //marks if the page ready to loaded
    private MonthYearSelectorBox _startTimeSelector;
    private MonthYearSelectorBox _endTimeSelector;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await InitPage()).Try();

    private async Task OnClickCalculate() => await InvokeAsync(async () => await DoCalculation()).Try();



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    private async Task InitPage()
    {
        //todo below marked for deletion 10/1/2022
        ////show loading box
        //await _globalVariable.LoadingMessage.Show();

        ////set people list into people selector
        ////note : without above first call _peopleSelectorBox is null
        //PersonList = await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id);
        //_peopleSelectorBox.SetData(PersonList);

        ////hide loading box
        //await _globalVariable.LoadingMessage.Hide();
    }


    private async Task DoCalculation()
    {
        await _globalVariable.LoadingMessage.Show();

        //get data from inputs and save it for use by other components
        SelectedPerson = _peopleSelectorBox.GetSelectedPerson();

        await _jsRuntime.AddToProgressBar(5);

        //set data into dasa viewer
        dynamic timeRange = ComputeStartEndTimeFromInput();
        var startTime = timeRange.Start;
        var endTime = timeRange.End;

        //note: we calculate days per pixel here as to auto show/hide some events
        //normally would not be needed
        var daysPerPixel = DasaReportViewer.GetDayPerPixel(startTime, endTime);
        //generate the events row & time header row
        var inputedEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Gochara };
        //only show tara chandra when zoomed in
        if (daysPerPixel <= 0.08)
        {
            inputedEventTags.Add(EventTag.Tarabala);
            inputedEventTags.Add(EventTag.Chandrabala);
        }
        inputedEventTags.Add(EventTag.DasaSpecialRules);

        await _dasaReportViewer.SetData(SelectedPerson, startTime, endTime, inputedEventTags);

        //mark page as ready to show results
        _isResultReady = true;

        await _globalVariable.LoadingMessage.Hide();
    }

    private object ComputeStartEndTimeFromInput()
    {
        var startMonthYear = _startTimeSelector.GetSelectedTimeText();
        var x = $"00:00 01/{startMonthYear} {SelectedPerson.BirthTimeZone}";
        var startTime = new Time(x, SelectedPerson.GetBirthLocation());

        var endMonthYear = _endTimeSelector.GetSelectedTimeText();
        var y = $"11:59 {GetLastDay(endMonthYear)}/{endMonthYear} {SelectedPerson.BirthTimeZone}";
        var endTime = new Time(y, SelectedPerson.GetBirthLocation());

        return new { Start = startTime, End = endTime };

        //gets last day of any month at any time
        int GetLastDay(string monthYearText)
        {
            //split month and year
            string[] splited = monthYearText.Split('/');
            var month = int.Parse(splited[0]);
            var year = int.Parse(splited[1]);

            int daysInMonth = DateTime.DaysInMonth(year: year, month: month);
            return daysInMonth;

        }
    }



}
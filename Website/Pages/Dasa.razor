@attribute [Route(PageRoute.Dasa)]
@using Genso.Astrology.Library

@*<UnderConstructionHeader PageName="Dasa" />
*@

<PageTitle>Dasa</PageTitle>
<PageTop Title="Dasa" IconName="fluent:book-star-20-filled">
    <Description>Astrological predictions of a person's horoscope</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
        <IconButton IconName="carbon:graphical-data-flow" ButtonText="Horoscope Data" ClickUrl="@PageRoute.HoroscopeData"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>



<div class="vstack gap-2">
    @*PERSON SELECTOR
    note: selector placed here because multiple components use it
    *@
    <PeopleSelectorBox @ref="_peopleSelectorBox" />
    <MonthYearSelectorBox LabelText="Start" @ref="_startTimeSelector" />
    <MonthYearSelectorBox LabelText="End" @ref="_endTimeSelector" />

    @*CALCULATE BTN*@
    <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculate"></IconButton>

    <hr>
    @*DASA VIEW BOX*@
    <div>
        <HelpBox Label="Dasa" HelpText="@HelpText.Dasa"></HelpBox>
        <DasaReportViewer @ref="_dasaReportViewer" />
    </div>
    <hr>
    @*PLANET INFO LIST*@
    <div>
        @if (_isResultReady)
        {
            <h4 class="mt-2">Planets</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <PlanetInfoBox PlanetName="PlanetName.Sun" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Moon" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mercury" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Mars" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Jupiter" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Saturn" Time="@SelectedPerson.BirthTime" />
                <PlanetInfoBox PlanetName="PlanetName.Venus" Time="@SelectedPerson.BirthTime" />
            </div>
        }
    </div>
    @*HOUSE INFO LIST*@
    <div>
        @if (_isResultReady)
        {
            <h4 class="mt-2">Houses</h4>
            <div class="container-xxl d-flex flex-nowrap" style="overflow-x: scroll">
                <HouseInfoBox HouseNumber="1" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="2" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="3" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="4" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="5" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="6" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="7" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="8" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="9" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="10" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="11" Time="@SelectedPerson.BirthTime" />
                <HouseInfoBox HouseNumber="12" Time="@SelectedPerson.BirthTime" />
            </div>
        }
    </div>
</div>

@*HELP SECTION*@
<PageHelpSection @ref="_helpSection">
    <Content>
        <h4 class="fw-bold">Where are these predictions from?</h4>
        <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
            Prediction data come from books by renowned astrologer B.V. Raman.
            Books such as <span class="fw-bold">How to Judge Horoscope</span> and
            <span class="fw-bold">Hindu Predictive Astrology</span>,
            were used to make this calculator.
        </p>

        <h4 class="fw-bold">How to use these predictions?</h4>
        <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
            For accurate predictions, results must be duly modified
            or qualified according to the affliction or otherwise of the
            planets concerned. For example, predictions involving planets with
            high strength (Bhava Bala), is often accurate.
        </p>
    </Content>
</PageHelpSection>


@code {

    //--------------------FIELDS
    private PageHelpSection _helpSection;

    private PeopleSelectorBox? _peopleSelectorBox;

    private DasaReportViewer? _dasaReportViewer;

    public Person SelectedPerson { get; set; }
    public GeoLocation SelectedLocation { get; set; }
    private bool _isResultReady = false; //marks if the page ready to loaded
    private MonthYearSelectorBox _startTimeSelector;
    private MonthYearSelectorBox _endTimeSelector;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await InitPage()).Try();

    private async Task OnClickCalculate() => await InvokeAsync(async () => await DoCalculation()).Try();



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    private async Task InitPage()
    {
        //todo below marked for deletion 10/1/2022
        ////show loading box
        //_jsRuntime.ShowLoading();

        ////set people list into people selector
        ////note : without above first call _peopleSelectorBox is null
        //PersonList = await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id);
        //_peopleSelectorBox.SetData(PersonList);

        ////hide loading box
        //_jsRuntime.HideAlert();
    }


    private async Task DoCalculation()
    {
        //only continue if passed input field validation
        if (!ValidationPassed()) { return; }

        _jsRuntime.ShowLoading();
        
        //get data from inputs and save it for use by other components
        SelectedPerson = _peopleSelectorBox.GetSelectedPerson();

        await _jsRuntime.AddToProgressBar(5);

        //set data into dasa viewer
        dynamic timeRange = ComputeStartEndTimeFromInput();
        var startTime = timeRange.Start;
        var endTime = timeRange.End;

        //note: we calculate days per pixel here as to auto show/hide some events
        //normally would not be needed
        var daysPerPixel = DasaReportViewer.GetDayPerPixel(startTime, endTime);
        //generate the events row & time header row
        var inputedEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Gochara };
        //only show tara chandra when zoomed in
        if (daysPerPixel <= 0.08)
        {
            inputedEventTags.Add(EventTag.Tarabala);
            inputedEventTags.Add(EventTag.Chandrabala);
        }
        inputedEventTags.Add(EventTag.DasaSpecialRules);

        await _dasaReportViewer.SetData(SelectedPerson, startTime, endTime, inputedEventTags);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassed()
    {
        var isValid = true;

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            isValid = false;
            var msg = $"Select person name!";
            _jsRuntime.ShowAlert("error", msg, true, timer: 0);
        }



        return isValid;
    }


    private object ComputeStartEndTimeFromInput()
    {
        var startMonthYear = _startTimeSelector.GetSelectedTimeText();
        var x = $"00:00 01/{startMonthYear} {SelectedPerson.BirthTimeZone}";
        var startTime = new Time(x, SelectedPerson.GetBirthLocation());

        var endMonthYear = _endTimeSelector.GetSelectedTimeText();
        var y = $"11:59 {GetLastDay(endMonthYear)}/{endMonthYear} {SelectedPerson.BirthTimeZone}";
        var endTime = new Time(y, SelectedPerson.GetBirthLocation());

        return new { Start = startTime, End = endTime };

        //gets last day of any month at any time
        int GetLastDay(string monthYearText)
        {
            //split month and year
            string[] splited = monthYearText.Split('/');
            var month = int.Parse(splited[0]);
            var year = int.Parse(splited[1]);

            int daysInMonth = DateTime.DaysInMonth(year: year, month: month);
            return daysInMonth;

        }
    }



}
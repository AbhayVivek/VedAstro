@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools

<style>


    #DasaViewHolder {
        text-align: center;
        color: ivory;
        z-index: 1;
        cursor: pointer;
    }

</style>


<div class="vstack gap-1">
    <div style="background-color: cadetblue;" class="fw-bold" id="TimeCursorLegend"></div>
    @*ID set because used by auto move cursor line handler*@
    <div class="container-xxl" @ref="_dasaViewBox" style="overflow-x: scroll;">@DasaReportSvg</div>
</div>


@code {

    /// <summary>
    /// One precision value for generating all dasa components,
    /// because misalignment occurs if use different precision
    /// </summary>
    static double _eventsPrecision = Tools.DaysToHours(14);

    double _timeSlicePrecision = _eventsPrecision;

    ElementReference _dasaViewBox;

    //px width & height of each slice of time
    //used when generating dasa rows
    //note: changes needed only here
    int _widthPerSlice = 1;
    int _heightPerSlice = 35;



    //PROPERTIES
    private Person Person { get; set; }

    private List<Event>? DasaEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    private List<Event>? AntaramEventList { get; set; }

    private MarkupString DasaReportSvg { get; set; } = new("");





    //OVERRIDES
    /// <summary>
    /// JS events are attached here because the html element is already loaded
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }



    //METHODS

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person)
    {
        //save inputed data
        this.Person = person;

        //generate dasa report in svg from server
        var finalSvg = await GetDasaReportSvgFromApi(person);

        //inject new svg into page via JS for a more responsive progress update
        //doing it in blazor, causes progress bar freeze while updating
        await _jsRuntime.InjectIntoElement(_dasaViewBox, finalSvg);
        //DasaRowItemsSvg = new MarkupString(finalSvg);

        //needed to show generated dasa diagram
        //this.StateHasChanged();

        //attach handlers now that component is loaded
        //attach mouse handler to auto move cursor line
        await _jsRuntime.AddEventListener(_dasaViewBox, "mousemove", "onMouseMoveDasaViewEventHandler");
    }

    private async Task<string> GetDasaReportSvgFromApi(Person inputPerson)
    {

        //prep data
        var startTime = inputPerson.GetBirthDateTime(); //start time is birth time
        var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

        //use the inputed data to get events from API
        //note: below methods access the data internally
        DasaEventList = await WebsiteTools.GetDasaEvents(_eventsPrecision, startTime, endTime, _jsRuntime, inputPerson);
        await _jsRuntime.AddToProgressBar(10);
        BhuktiEventList = await WebsiteTools.GetBhuktiEvents(_eventsPrecision, startTime, endTime, _jsRuntime, inputPerson);
        await _jsRuntime.AddToProgressBar(10);
        AntaramEventList = await WebsiteTools.GetAntaramEvents(_eventsPrecision, startTime, endTime, _jsRuntime, inputPerson);
        await _jsRuntime.AddToProgressBar(10);

        //generate rows and pump them into the page
        var dasaSvgWidth = 0; //will be filled when calling row generator
        var compiledRow = "";
        //generate time slice only once for all rows
        var timeSlices = GetTimeSlices();
        //save a copy of the number of time slices used to calculate the svg total width later
        dasaSvgWidth = timeSlices.Count;

        compiledRow += await GenerateYearRowSvg(DasaEventList, timeSlices, _eventsPrecision, 0);
        compiledRow += await GenerateRowSvg(DasaEventList, timeSlices, _eventsPrecision, 12);
        compiledRow += await GenerateRowSvg(BhuktiEventList, timeSlices, _eventsPrecision, 12 + (37 * 1));
        compiledRow += await GenerateRowSvg(AntaramEventList, timeSlices, _eventsPrecision, 12 + (37 * 2));
        //add in the cursor line
        compiledRow += $"<rect id=\"CursorLine\" width=\"2.3506315\" height=\"124.60775\" style=\"fill:#000000;\" x=\"0\" y=\"0\" />";
        compiledRow += $"<rect id=\"NowVerticalLine\" width=\"2.3506315\" height=\"124.60775\" style=\"fill:blue;\" x=\"0\" y=\"0\" />";
        var finalSvg = WrapSvgElements(compiledRow, dasaSvgWidth, (_heightPerSlice * 3) + 10); //little wiggle room

        return finalSvg;


        //-----------------------LOCAL FUNCTIONS-------------------------

        async Task<string> GenerateRowSvg(List<Event> eventList, List<Time> timeSlices, double precisionHours, int yAxis)
        {

            await _jsRuntime.AddToProgressBar(10);

            //generate the row for each time slice
            var rowHtml = "";
            var horizontalPosition = 0; //distance from left
            var prevEventName = EventName.EmptyEvent;
            foreach (var slice in timeSlices)
            {
                //get event that occurred at this time slice
                //if more than 1 event raise alarm
                var foundEventList = eventList.FindAll(tempEvent => tempEvent.IsOccurredAtTime(slice));
                if (foundEventList.Count > 1) throw new Exception("Only 1 event in 1 time slice!");
                var foundEvent = foundEventList[0];

                //if current event is different than event has changed, so draw a black line
                var isNewEvent = prevEventName != foundEvent.Name;
                var color = isNewEvent ? "black" : GetEventColor(foundEvent?.Nature);
                prevEventName = foundEvent.Name;

                //generate and add to row
                //the hard coded attribute names used here are used in App.js
                var rect = $"<rect " +
                           $"eventName=\"{foundEvent?.FormattedName}\" " +
                           $"age=\"{inputPerson.GetAge(slice)}\" " +
                           $"stdTime=\"{slice.GetStdDateTimeOffset():dd/MM/yyyy}\" " + //show only date
                           $"x=\"{horizontalPosition}\" " +
                           $"width=\"{_widthPerSlice}\" " +
                           $"height=\"{_heightPerSlice}\" " +
                           $"fill=\"{color}\" />";

                //set position for next element
                horizontalPosition += _widthPerSlice;

                rowHtml += rect;

            }

            //wrap all the rects inside a svg so they can me moved together
            //svg tag here acts as group, svg nesting
            rowHtml = $"<svg y=\"{yAxis}\" >{rowHtml}</svg>";

            return rowHtml;
        }

        async Task<string> GenerateYearRowSvg(List<Event> eventList, List<Time> timeSlices, double precisionHours, int yAxis)
        {

            await _jsRuntime.AddToProgressBar(10);

            //generate the row for each time slice
            var rowHtml = "";
            var previousYear = 0;
            var yearBoxWidthCount = 0;
            int rectWidth = 0;
            int newX = 0;
            foreach (var slice in timeSlices)
            {

                //only generate new year box when year changes
                var yearChanged = previousYear != slice.GetStdYear();

                //if year changed
                if (yearChanged)
                {
                    //and it is in the beginning
                    if (previousYear == 0)
                    {
                        yearBoxWidthCount = 0; //reset width
                    }
                    else
                    {
                        //generate previous year data first before resetting
                        newX += rectWidth; //use previous rect width to position this
                        rectWidth = yearBoxWidthCount * _widthPerSlice; //calculate new rect width

                        var rect = $"<g x=\"{newX}\" y=\"{20}\" transform=\"matrix(1, 0, 0, 1, {newX}, 0)\">" +
                                            $"<rect " +
                                                $"fill=\"#0d6efd\" x=\"0\" y=\"0\" width=\"{rectWidth}\" height=\"{11}\" rx=\"0\" ry=\"0\"" + $"style=\"paint-order: stroke; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-linejoin: round;\"/>" +
                                                $"<text x=\"0\" y=\"18.034\" fill=\"white\" " +
                                                    $"style=\"fill: rgb(255, 255, 255); font-size: 10.2278px; font-weight: 700; line-height: 36.3655px; white-space: pre;\"" +
                                                    $"transform=\"matrix(0.966483, 0, 0, 0.879956, 2, -6.779947)\"" +
                                                    $"x=\"0\" y=\"18.034\" bx:origin=\"0.511627 0.5\">" +
                                                    $"{previousYear}" + //previous year generate at begin of new year
                                                $"</text>" +
                                         $"</g>";

                        //<g x="3" y="20" transform="matrix(1, 0, 0, 1, 3, 0)">
                        //    <rect fill="#0d6efd" width="27" height="11" style="paint-order: stroke; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-linejoin: round;"/>
                        //    <text style="fill: rgb(255, 255, 255); font-size: 10.2278px; font-weight: 700; line-height: 36.3655px; white-space: pre;" transform="matrix(0.966483, 0, 0, 0.879956, 2, -6.779947)" x="0" y="18.034" bx:origin="0.511627 0.5">1943</text>
                        //</g>



                        //add to final return
                        rowHtml += rect;

                        //reset width
                        yearBoxWidthCount = 0;

                    }
                }
                //year same as before
                else
                {
                    //update width only, position is same
                    //as when created the year box
                    //yearBoxWidthCount *= _widthPerSlice;

                }

                //update previous year for next slice
                previousYear = slice.GetStdYear();

                yearBoxWidthCount++;


            }

            //wrap all the rects inside a svg so they can me moved together
            //svg tag here acts as group, svg nesting
            //rowHtml = $"<svg y=\"{yAxis}\" >{rowHtml}</svg>";

            return rowHtml;
        }

        // Get dasa color based on nature & number of events
        string GetEventColor(EventNature? eventNature)
        {
            var colorId = "gray";

            if (eventNature == null) { return colorId; }

            //set color id based on nature
            switch (eventNature)
            {
                case EventNature.Good:
                    colorId = "green";
                    break;
                case EventNature.Neutral:
                    colorId = "";
                    break;
                case EventNature.Bad:
                    colorId = "red";
                    break;
            }

            return colorId;
        }

        //wraps a list of svg elements inside 1 main svg element
        //if width not set defaults to 1000px, and height to 1000px
        string WrapSvgElements(string combinedSvgString, int svgWidth = 1000, int svgTotalHeight = 1000)
        {

            //create the final svg that will be displayed
            var svgTotalWidth = svgWidth + 10; //add little for wiggle room
            var svgBody = $"<svg id=\"DasaViewHolder\" " +
                          $"style=\"" +
                          $"width:{svgTotalWidth}px;" +
                          $"height:{svgTotalHeight}px;" +
                          $"\" " +
                          $"xmlns=\"http://www.w3.org/2000/svg\">" +
                          $"{combinedSvgString}</svg>";

            return svgBody;
        }

        //generates time slices for dasa
        List<Time> GetTimeSlices()
        {
            //get time slices used to get events
            var startTime = inputPerson.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)
            List<Time> timeSlices = EventManager.GetTimeListFromRange(startTime, endTime, _timeSlicePrecision);

            return timeSlices;
        }

    }

}

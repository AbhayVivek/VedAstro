@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools
@inherits IPage


<div style="width: 1000px;
            scroll-behavior: smooth;
            overflow-x: scroll;">
    @DasaRowItems
</div>


@code {

    //INTERNAL TYPES


    //FIELDS
    double _dasaEventsPrecision = Tools.DaysToHours(14);
    double _bhuktiEventsPrecision = Tools.DaysToHours(14);
    double _antaramEventsPrecision = Tools.DaysToHours(14);



    //PROPERTIES
    private Person Person { get; set; }

    private GeoLocation Location { get; set; }

    private List<Event>? DasaEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    private List<Event>? AntaramEventList { get; set; }

    private MarkupString DasaRowItems { get; set; } = new MarkupString("<p>test</p>");//in html string



    //METHODS

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person, GeoLocation location)
    {
        //save inputed data
        this.Person = person;
        this.Location = location;

        //use the inputed data to get events from API
        //note: below methods access the data internally
        DasaEventList = await getDasaEvents();
        //BhuktiEventList = await getBhuktiEvents();
        //AntaramEventList = await getAntaramEvents();

        //generate rows
        DasaRowItems = new MarkupString(GenerateRowSvg(DasaEventList, _dasaEventsPrecision));



        this.StateHasChanged();


        //-----------------------LOCAL FUNCTIONS-------------------------

        string GenerateRow(List<Event> eventList, double precisionHours)
        {
            //get time slices used to get events
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)
            var timeSlices = EventManager.GetTimeListFromRange(startTime, endTime, precisionHours);

            //generate the row for each time slice
            var rowHtml = "";
            foreach (var slice in timeSlices)
            {
                //get event that occurred at this time slice
                var findResult = eventList.FindAll(tempEvent => tempEvent.IsOccurredAtTime(slice));
                var foundEvent = findResult.Count > 1 ? findResult[0] : null;

                //if more than 1 event found, raise alarm
                //if (findResult.Count > 1) { throw new Exception("Only 1 event at 1 time slice!"); }

                //generate and add to row
                var pxPerSlice = 10;
                string div;
                div = $"<div title='{foundEvent?.Description}' value='{slice.GetStdDateTimeOffsetText()}' style='height:30px; width:{pxPerSlice}px; background-color:{GetEventColor(foundEvent?.Nature)};'></div>";

                rowHtml += div;

            }
            Console.WriteLine($"Rows added : {timeSlices.Count}");
            return rowHtml;

        }
        string GenerateRowSvg(List<Event> eventList, double precisionHours)
        {
            //get time slices used to get events
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)
            var timeSlices = EventManager.GetTimeListFromRange(startTime, endTime, precisionHours);

            //generate the row for each time slice
            var rowHtml = "";
            var horizontalPosition = 0; //distance from left
            foreach (var slice in timeSlices)
            {
                //get event that occurred at this time slice
                var foundEvent = eventList.Find(tempEvent => tempEvent.IsOccurredAtTime(slice));
                //var foundEvent = findResult.Count > 1 ? findResult[0] : null;

                //if more than 1 event found, raise alarm
                //if (findResult.Count > 1) { throw new Exception("Only 1 event at 1 time slice!"); }

                //generate and add to row
                var pxPerSlice = 1;
                var sliceHeight = 30;
                var rect = $"<rect " +
                          $"eventName=\"{foundEvent?.FormattedName}\" " +
                          $"stdTime=\"{slice.GetStdDateTimeOffsetText()}\" " +
                          $"x=\"{horizontalPosition}\" " +
                          $"width=\"{pxPerSlice}\" " +
                          $"height=\"{sliceHeight}\" " +
                          $"fill=\"{GetEventColor(foundEvent?.Nature)}\" />";

                //set position for next element
                horizontalPosition += pxPerSlice;

                rowHtml += rect;

                //Console.WriteLine($"Slice : {slice.GetStdDateTimeOffsetText()}");
                //Console.WriteLine($"Event : {foundEvent?.FormattedName}");

            }

            var svgTotalWidth = horizontalPosition + 100; //add 100 for wiggle room
            var svgBody = $"<svg style=\"width:{svgTotalWidth}px;\" xmlns=\"http://www.w3.org/2000/svg\" >{rowHtml}</svg>";


            return svgBody;

        }

        // Get dasa color based on nature
        string GetEventColor(EventNature? eventNature)
        {
            var colorId = "darkgray";

            if (eventNature == null) { return colorId; }

            //set color id based on nature
            switch (eventNature)
            {
                case EventNature.Good:
                    colorId = "green";
                    break;
                case EventNature.Neutral:
                    colorId = "";
                    break;
                case EventNature.Bad:
                    colorId = "red";
                    break;
            }

            return colorId;
        }

        async Task<List<Event>?> getDasaEvents() => await getEvents(EventTag.Dasa, _dasaEventsPrecision);
        async Task<List<Event>?> getBhuktiEvents() => await getEvents(EventTag.Bhukti, _bhuktiEventsPrecision);
        async Task<List<Event>?> getAntaramEvents() => await getEvents(EventTag.Antaram, _antaramEventsPrecision);

        //the underlying method that does the work
        async Task<List<Event>?> getEvents(EventTag tag, double precisionHours)
        {
            //prep data
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

            //get events from API server
            var dasaEventsUnsorted =
                await GetEvents(
                    startTime,
                    endTime,
                    Location,
                    Person,
                    tag,
                    precisionHours);

            //sort the list by time before sending view
            var orderByAscResult = from dasaEvent in dasaEventsUnsorted
                                   orderby dasaEvent.StartTime.GetStdDateTimeOffset()
                                   select dasaEvent;

            //send sorted events to view
            return orderByAscResult.ToList();
        }

        // Gets Muhurtha events from API
        async Task<List<Event>> GetEvents(Time startTime, Time endTime, GeoLocation location, Person person, EventTag tag, double precisionHours)
        {
            //prepare data to send to API
            var root = new XElement("Root");

            root.Add(
                new XElement("StartTime", startTime.ToXml()),
                new XElement("EndTime", endTime.ToXml()),
                location.ToXml(),
                person.ToXml(),
                Tools.AnyTypeToXml(tag),
                Tools.AnyTypeToXml(precisionHours));

            //send to api and get results
            var resultsRaw = await ServerManager.WriteToServer(ServerManager.GetEventsAPI, root);

            //parse raw results
            List<Event> resultsParsed = Event.FromXml(resultsRaw);

            //send to caller
            return resultsParsed;
        }
    }



}

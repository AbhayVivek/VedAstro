@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools
@using System.Text

<style>


    #DasaViewHolder {
        text-align: center;
        color: ivory;
        z-index: 1;
        cursor: pointer;
    }

</style>


<div class="vstack gap-1">
    <div style="background-color: cadetblue;" class="fw-bold" id="TimeCursorLegend"></div>
    @*ID set because used by auto move cursor line handler*@
    <div class="container-xxl" @ref="_dasaViewBox" style="overflow-x: scroll;">@DasaReportSvg</div>
</div>


@code {

    /// <summary>
    /// One precision value for generating all dasa components,
    /// because misalignment occurs if use different precision
    /// </summary>
    static double _eventsPrecision = Tools.DaysToHours(14);

    double _timeSlicePrecision = _eventsPrecision;

    ElementReference _dasaViewBox;

    //px width & height of each slice of time
    //used when generating dasa rows
    //note: changes needed only here
    int _widthPerSlice = 1;
    int _heightPerSlice = 35;



    //PROPERTIES
    private Person Person { get; set; }

    private List<Event>? DasaEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    private List<Event>? AntaramEventList { get; set; }

    private MarkupString DasaReportSvg { get; set; } = new("");




    //METHODS

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person)
    {
        //save inputed data
        this.Person = person;

        //generate dasa report in svg from server
        var finalSvg = await GetDasaReportSvgFromApi(person);

        //inject new svg into page via JS for a more responsive progress update
        //doing it in blazor, causes progress bar freeze while updating
        await _jsRuntime.InjectIntoElement(_dasaViewBox, finalSvg);

        //attach handlers now that component is loaded
        //attach mouse handler to auto move cursor line & update time legend
        await _jsRuntime.AddEventListener(_dasaViewBox, "mousemove", "onMouseMoveDasaViewEventHandler");
    }

    /// <summary>
    /// Contacts API and gets Person Dasa Report in svg string
    /// Note:
    /// -previously used generate in blazor client,
    ///  but for speed (10s gain) sake moved to server to do heavy lifting
    /// </summary>
    private async Task<string> GetDasaReportSvgFromApi(Person inputPerson)
    {
        //since majority of time spent will be waiting for API to do calculation
        //and receiving the image is fast, so just start an auto progress bar
        _jsRuntime.ProgressBarSlowAutoUpdate(); //do not await to let control go to next

        var personHashXml = new XElement("PersonHash", inputPerson.Hash);
        //note: when calling this api via postman, svg needs to be parsed in boxy-svg before viewable
        var svgStream = await WriteToServerStreamResponse(ServerManager.GetPersonDasaReport, personHashXml);

        //todo just send as string to remove lags of using stream
        // convert stream to string
        svgStream.Position = 0; //reset position otherwise can be null value out
        var reader = new StreamReader(svgStream);
        var svgText = await reader.ReadToEndAsync();

        return svgText;
    }

    /// <summary>
    /// Send xml as string to server and returns stream as response
    /// </summary>
    public static async Task<Stream> WriteToServerStreamResponse(string apiUrl, XElement xmlData)
    {
        //prepare the data to be sent
        var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, apiUrl);

        httpRequestMessage.Content = XmLtoHttpContent(xmlData);

        //get the data sender
        using var client = new HttpClient();

        //tell sender to wait for complete reply before exiting
        var waitForContent = HttpCompletionOption.ResponseContentRead;

        //send the data on its way
        var response = await client.SendAsync(httpRequestMessage, waitForContent);

        //extract the content of the reply data
        var rawMessage = response.Content.ReadAsStreamAsync().Result;

        return rawMessage;

    }


    /// <summary>
    /// Packages the data into ready form for the HTTP client to use in final sending stage
    /// </summary>
    private static StringContent XmLtoHttpContent(XElement data)
    {
        //gets the main XML data as a string
        var dataString = Tools.XmlToString(data);

        //specify the data encoding
        var encoding = Encoding.UTF8;

        //specify the type of the data sent
        //plain text, stops auto formatting
        var mediaType = "plain/text";

        //return packaged data to caller
        return new StringContent(dataString, encoding, mediaType);
    }


}

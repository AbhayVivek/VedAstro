@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools

<style>
    #NowLine {
        background-color: red;
        width: 1px;
        height: 142px;
        z-index: 999;
        left: 0px;
        top: -144px;
        position: relative;
    }

</style>


<div class="vstack gap-1">
    <div style="background-color: cadetblue;" class="fw-bold" id="TimeCursorLegend"></div>
    <div class="container-xxl" @ref="_dasaViewBox" style="overflow-x: scroll;">
        @DasaRowItemsSvg
        @BhuktiRowItemsSvg
        @AntaramRowItemsSvg
    </div>
    <div id="NowLine" style="left: 100px"></div>
</div>


@code {

    /// <summary>
    /// One precision value for generating all dasa components,
    /// because misalignment occurs if use different precision
    /// </summary>
    static double _eventsPrecision = Tools.DaysToHours(14);

    double _timeSlicePrecision = _eventsPrecision;

    ElementReference _dasaViewBox;

    //px width & height of each slice of time
    //used when generating dasa rows
    //note: changes needed only here
    int _widthPerSlice = 1;
    int _heightPerSlice = 35;



    //PROPERTIES
    private Person Person { get; set; }

    private List<Event>? DasaEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    private List<Event>? AntaramEventList { get; set; }

    private MarkupString DasaRowItemsSvg { get; set; } = new("");

    private MarkupString BhuktiRowItemsSvg { get; set; } = new("");

    private MarkupString AntaramRowItemsSvg { get; set; } = new("");




    //OVERRIDES
    /// <summary>
    /// JS events are attached here because the html element is already loaded
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        //after first render attach event handler for Time Cursor
        if (firstRender) { await _jsRuntime.AddEventListener(_dasaViewBox, "mousemove", "mouseOverDasaViewHandler"); }
    }



    //METHODS

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person)
    {
        //save inputed data
        this.Person = person;

        //prep data
        var startTime = Person.GetBirthDateTime(); //start time is birth time
        var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

        //use the inputed data to get events from API
        //note: below methods access the data internally
        DasaEventList = await WebsiteTools.GetDasaEvents(_eventsPrecision, startTime, endTime, _jsRuntime, Person);
        await _jsRuntime.AddToProgressBar(10);
        BhuktiEventList = await WebsiteTools.GetBhuktiEvents(_eventsPrecision, startTime, endTime, _jsRuntime, Person);
        await _jsRuntime.AddToProgressBar(10);
        AntaramEventList = await WebsiteTools.GetAntaramEvents(_eventsPrecision, startTime, endTime, _jsRuntime, Person);
        await _jsRuntime.AddToProgressBar(10);

        //generate rows and pump them into the page
        var dasaSvgWidth = 0; //will be filled when calling row generator
        var x = "";
        x += await GenerateRowSvg(DasaEventList, _eventsPrecision, 0);
        x += await GenerateRowSvg(BhuktiEventList, _eventsPrecision, 38);
        x += await GenerateRowSvg(AntaramEventList, _eventsPrecision, 76);
        var finalSvg = WrapSvgElements(x, dasaSvgWidth, (_heightPerSlice * 3)+10); //little wiggle room
        DasaRowItemsSvg = new MarkupString(finalSvg);

        //needed to show generated dasa diagram
        this.StateHasChanged();


        //-----------------------LOCAL FUNCTIONS-------------------------

        async Task<string> GenerateRowSvg(List<Event> eventList, double precisionHours, int yAxis)
        {

            //get time slices used to get events
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)
            var timeSlices = EventManager.GetTimeListFromRange(startTime, endTime, _timeSlicePrecision);

            //save a copy of the number of time slices used to calculate the svg total width later
            dasaSvgWidth = timeSlices.Count; 

            //generate the row for each time slice
            var rowHtml = "";
            var horizontalPosition = 0; //distance from left
            foreach (var slice in timeSlices)
            {
                //get event that occurred at this time slice
                //if more than 1 event raise alarm
                var foundEventList = eventList.FindAll(tempEvent => tempEvent.IsOccurredAtTime(slice));
                if (foundEventList.Count > 1) throw new Exception("Only 1 event in 1 time slice!");
                var foundEvent = foundEventList[0];

                //generate and add to row
                //the hard coded attribute names used here are used in App.js
                var rect = $"<rect " +
                           $"eventName=\"{foundEvent?.FormattedName}\" " +
                           $"age=\"{Person.GetAge(slice)}\" " +
                           $"stdTime=\"{slice.GetStdDateTimeOffset():dd/MM/yyyy}\" " + //show only date
                           $"x=\"{horizontalPosition}\" " +
                           $"width=\"{_widthPerSlice}\" " +
                           $"height=\"{_heightPerSlice}\" " +
                           $"fill=\"{GetEventColor(foundEvent?.Nature)}\" />";

                //set position for next element
                horizontalPosition += _widthPerSlice;

                rowHtml += rect;

            }

            //wrap all the rects inside a svg so they can me moved together
            //svg tag here acts as group, svg nesting
            rowHtml = $"<svg y=\"{yAxis}\" >{rowHtml}</svg>";

            return rowHtml;
        }

        // Get dasa color based on nature & number of events
        string GetEventColor(EventNature? eventNature)
        {
            var colorId = "gray";

            if (eventNature == null) { return colorId; }

            //set color id based on nature
            switch (eventNature)
            {
                case EventNature.Good:
                    colorId = "green";
                    break;
                case EventNature.Neutral:
                    colorId = "";
                    break;
                case EventNature.Bad:
                    colorId = "red";
                    break;
            }

            return colorId;
        }


        //wraps a list of svg elements inside 1 main svg element
        //if width not set defaults to 1000px, and height to 1000px
        string WrapSvgElements(string combinedSvgString, int svgWidth = 1000, int svgTotalHeight = 1000)
        {

            //create the final svg that will be displayed
            var svgTotalWidth = svgWidth + 10; //add little for wiggle room
            var svgBody = $"<svg " +
                          $"style=\"" +
                          $"width:{svgTotalWidth}px;" +
                          $"height:{svgTotalHeight}px;" +
                          $"\" " +
                          $"xmlns=\"http://www.w3.org/2000/svg\">" +
                          $"{combinedSvgString}</svg>";

            return svgBody;
        }
    }
}

@using Genso.Astrology.Library
@using Tools = Genso.Astrology.Library.Tools




<style>
    .parent-div {
        display: flex;
        flex-wrap: wrap;
        /* for horizontal aligning of child divs */
        justify-content: center;
        /* for vertical aligning */
        align-items: center;
        width: max-content;
        white-space: nowrap;
    }

    #BhuktiRow, .yearRow, .ageRow {
        font-size: x-small;
    }

    .yearRow, .ageRow {
        background-color: #1b6ec2;
    }

    #DasaViewHolder {
        text-align: center;
        color: ivory;
        z-index: 1;
        cursor: pointer;
    }

    .DasaViewHeaderItems {
        font-size: small;
        text-align: center;
        width: 42px;
        font-weight: bold;
    }

    #MainHolder {
        display: flex;
        margin-top: 27px;
    }

    #container1 {
        position: relative;
        overflow: overlay;
        height: 200px;
    }

        #container1 > * {
            position: absolute;
        }

    #NowLine {
        background-color: red;
        width: 1px;
        height: 142px;
        z-index: 999;
        top: -19px;
    }
</style>


@if (_isPageReady)
{

    <div id="MainHolder">
        <div id="">
            <div class="DasaViewHeaderItems border border-primary">Year</div>
            <div class="DasaViewHeaderItems border border-primary">Dasa</div>
            <div class="DasaViewHeaderItems border border-primary">Age</div>
        </div>
        <div @ref="_scrollContainer" id="container1" style="width: @(ViewHolderWidth)px">
            <div @ref="_dasaViewHolder" @onmousewheel="OnMouseWheelInDasaView" id="DasaViewHolder">
                @*Person Age Row*@
                <div class="parent-div">
                    @for (var year = 0; year <= 120; year++)
                    {
                        <div style="width: @YearsToWidth(1)px; "
                     class="ageRow @BorderClass">
                            @year
                        </div>
                    }
                </div>
                @*Year Span Row*@
                <div class="parent-div">
                    @for (var age = 0; age <= 120; age++)
                    {
                        //this is to make current year stand out as "Now"
                        @if (_globalVariable.SystemTimeNow.Year == GetYearFromPersonAge(age, Person))
                        {
                            <div style="width: @YearsToWidth(1)px; background-color: crimson;" class="yearRow @BorderClass">
                                @GetYearFromPersonAge(age, Person)
                            </div>

                        }
                        else
                        {
                            <div style="width: @YearsToWidth(1)px; "
                     class="yearRow @BorderClass">
                                @GetYearFromPersonAge(age, Person)
                            </div>
                        }
                    }
                </div>
                @*Planet Dasa Row*@
                <div id="DasaRow" class="parent-div">
                    @foreach (var _event in DasaEventList)
                    {
                        <div style="width: @DaysToWidth(Tools.MinutesToDays(_event.GetDurationMinutes()))px; background-color: @GetEventColor(_event);"
                     class="dasaRow @BorderClass"
                     title="@_event.Description">
                            @_event.FormattedName
                        </div>

                    }
                </div>
                @*Planet Bhukti Row*@
                <div id="BhuktiRow" class="parent-div">
                    @foreach (var _event in BhuktiEventList)
                    {
                        <div style="width: @DaysToWidth(Tools.MinutesToDays(_event.GetDurationMinutes()))px; background-color: @GetEventColor(_event);"
                     class="dasaRow @BorderClass"
                     title="@_event.Description">
                            @_event.FormattedName
                        </div>
                    }
                </div>
            </div>
            <div id="NowLine" style="left: @(GetNowLinePosition())px"></div>
        </div>
    </div>
    <div>
        <button @onclick="OnClickZoomIn" class="btn btn-primary">Zoom +</button>
        <button @onclick="OnClickZoomOut" class="btn btn-primary">Zoom -</button>
    </div>
}


@code {

    //DATA FIELDS

    double _dasaEventsPrecision = Tools.DaysToHours(14);
    double _bhuktiEventsPrecision = Tools.DaysToHours(14);

    ElementReference _dasaViewHolder;
    ElementReference _scrollContainer;



    private List<Event> DasaEventList { get; set; }

    private List<Event> BhuktiEventList { get; set; }

    private List<Event> AntaramEventList { get; set; }

    [Parameter]
    public Person Person { get; set; }

    [Parameter]
    public GeoLocation Location { get; set; }

    private int ViewHolderWidth { get; set; }
    private double PixelPerYear { get; set; }



    //CONSTANTS
    const double DefaultPixelPerYear = 50.0;

    //the number of pixel zoomed in at a time
    const int ZoomSpeedInPx = 5;

    private double PixelPerDay => PixelPerYear / 360.0;

    private bool _isPageReady = false; //marks if the page ready to loaded

    public string BorderClass => "border-top border-end border-dark border-1";


    //OVERRIDES

    protected override async Task OnInitializedAsync()
    {
        //set default values here
        PixelPerYear = DefaultPixelPerYear;

        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        //update view holder width when page width changes
        var newViewHolderWidth = await GetViewHolderWidth();
        if (ViewHolderWidth != newViewHolderWidth)
        {
            ViewHolderWidth = newViewHolderWidth;
            StateHasChanged();
        }


    }

    //PRIVATE METHODS

    /// <summary>
    /// Get the number of days (double) the person is now
    /// </summary>
    private double GetPersonAgeInDaysNow(Person person)
    {
        var currentTime = Time.Now(person.GetBirthLocation());

        var difference = currentTime.Subtract(person.GetBirthDateTime());

        var days = difference.TotalDays;

        // Console.WriteLine($"GetPersonAgeInYearsNow {days}");

        return days;
    }

    /// <summary>
    /// Gets width of dasa events based on their duration length
    /// </summary>
    private double YearsToWidth(double years) => Math.Round((years * PixelPerYear), 1);

    /// <summary>
    /// Gets width of dasa events based on their duration length
    /// </summary>
    private double DaysToWidth(double days) => Math.Round((days * PixelPerDay), 1);

    private int GetYearFromPersonAge(int age, Person person) => person.GetBirthDateTime().GetStdDateTimeOffset().Year + age;

    /// <summary>
    /// Because width page changes view box width should change proportionately
    /// </summary>
    private async Task<int> GetViewHolderWidth()
    {
        //get width of the article element that holds view
        var windowWidth = await _jsRuntime.InvokeAsync<int>("getWindowInnerWidth");
        //Console.WriteLine($"window :{ windowWidth}");

        //use a portion of the article width as view box's width
        var finalWidth = windowWidth * 0.80; //80% of width

        //remove decimals
        return (int)finalWidth;
    }

    /// <summary>
    /// Get dasa color based on nature
    /// </summary>
    private string GetEventColor(Event _event)
    {
        var colorId = "";

        //set color id based on nature
        switch (_event.GetNature())
        {
            case EventNature.Good:
                colorId = "green";
                break;
            case EventNature.Neutral:
                colorId = "";
                break;
            case EventNature.Bad:
                colorId = "red";
                break;
        }

        return colorId;
    }

    public async Task RefreshData()
    {
        _globalVariable?.loadingMessage?.Open();

        _isPageReady = false;

        //update the list from the new data gotten
        DasaEventList = await getDasaEvents();
        BhuktiEventList = await getBhuktiEvents();

        _isPageReady = true;

        _globalVariable?.loadingMessage?.Close();

        StateHasChanged();

        //FUNCTIONS

        //method sets custom properties
        async Task<List<Event>> getDasaEvents()
        {
            var tag = EventTag.Dasa;

            return await getEvents(tag, _dasaEventsPrecision);
        }

        //method that sets some properties
        async Task<List<Event>> getBhuktiEvents()
        {
            var tag = EventTag.Bhukti;

            return await getEvents(tag, _bhuktiEventsPrecision);
        }

        //the underlying method that does the work
        async Task<List<Event>> getEvents(EventTag tag, double precision)
        {
            //prep data
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

            //get events from API server
            var dasaEventsUnsorted =
                await ServerManager.GetEvents(
                    startTime,
                    endTime,
                    Location,
                    Person,
                    tag,
                    precision);

            //sort the list by time before sending view
            var orderByAscResult = from dasaEvent in dasaEventsUnsorted
                                   orderby dasaEvent.StartTime.GetStdDateTimeOffset() ascending
                                   select dasaEvent;

            //send sorted events to view
            return orderByAscResult.ToList();
        }
    }

    /// <summary>
    /// Gets the px distance NowLine should be from Left side
    /// Distance is based on current age
    /// </summary>
    private double GetNowLinePosition()
    {
        var personAgeDays = GetPersonAgeInDaysNow(Person) * PixelPerDay;
        //Console.WriteLine($"GetNowLinePosition {personAgeDays}");
        return personAgeDays;
    }




    //EVENT HANDLERS

    private void OnClickZoomIn(MouseEventArgs obj)
    {
        PixelPerYear += ZoomSpeedInPx;
    }
    private void OnClickZoomOut(MouseEventArgs obj)
    {
        PixelPerYear -= ZoomSpeedInPx;
    }

    private async Task OnMouseWheelInDasaView(WheelEventArgs obj)
    {
        //only continue if SHIFT is pressed
        if (!obj.ShiftKey) { return; }

        //get old width of dasa view holder before zoom
        var oldHolderWidth = await _jsRuntime.InvokeAsync<double>("getElementWidth", _dasaViewHolder);
        Console.WriteLine($"oldHolderWidth {oldHolderWidth}");


        double dif = 0;

        //Zoom out
        if (obj.DeltaY > 0)
        {
            //make the zoom, which changes scroll position
            OnClickZoomOut(null);
            dif -= 200;
        }

        //Zoom in
        if (obj.DeltaY < 0)
        {
            OnClickZoomIn(null);
            dif += 200;
        }

        this.StateHasChanged();

        //get old width of dasa view holder before zoom
        var newHolderWidth = await _jsRuntime.InvokeAsync<double>("getElementWidth", _dasaViewHolder);
        Console.WriteLine($"newHolderWidth {newHolderWidth}");

        //var dif = newHolderWidth - oldHolderWidth;
        Console.WriteLine($"dif {dif}");

        var currentScrollLeft = await _jsRuntime.InvokeAsync<double>("getElementScrollLeft", _scrollContainer);
        var newScrollPos = currentScrollLeft + dif;
        Console.WriteLine($"newScrollPos {newScrollPos}");

        await _jsRuntime.InvokeVoidAsync("setElementScrollLeft", _scrollContainer, newScrollPos);

    }

}



@using Genso.Astrology.Library
@using Tools = Genso.Astrology.Library.Tools

@inject GlobalVariableManager _globalVariable;
@inject IJSRuntime _jsRuntime



<style>
    .parent-div {
        display: flex;
        flex-wrap: wrap;
        /* for horizontal aligning of child divs */
        justify-content: center;
        /* for vertical aligning */
        align-items: center;
        width: max-content;
        white-space: nowrap;
    }

    /*    .dasaRow, .yearRow, .ageRow {
                        height: 21.5px !important;
                    }
                */
    .yearRow, .ageRow {
        font-size: x-small;
    }

    #DasaViewHolder {
        height: 200px;
        overflow: overlay;
        text-align: center;
        color: ivory;
    }

    .DasaViewHeaderItems {
        font-size: small;
        text-align: center;
        width: 42px;
        font-weight: bold;
    }

    #MainHolder {
        display: flex;
        margin-top: 27px;
    }
</style>


@if (_isPageReady)
{
    <div id="MainHolder">
        <div id="">
            <div class="DasaViewHeaderItems border border-primary">Year</div>
            <div class="DasaViewHeaderItems border border-primary">Dasa</div>
            <div class="DasaViewHeaderItems border border-primary">Age</div>

        </div>
        <div id="DasaViewHolder" style="width: @(ViewHolderWidth)px">
            @*Time Span Row*@
            <div class="parent-div">
                @for (var age = 0; age <= 120; age++)
                {
                    //this is to make current year stand out as "Now"
                    @if (_globalVariable.SystemTimeNow.Year == GetYearFromPersonAge(age, Person))
                    {
                        <div style="width: @GetWidth(1)px; background-color:crimson; "
                 class="yearRow @BorderClass">
                            @GetYearFromPersonAge(age, Person)
                        </div>

                    }
                    else
                    {
                        <div style="width: @GetWidth(1)px; background-color: coral; "
                 class="yearRow @BorderClass">
                            @GetYearFromPersonAge(age, Person)
                        </div>
                    }
                }

            </div>
            @*Planet Dasa Row*@
            <div class="parent-div">
                @foreach (var _event in DasaEventList)
                {
                    <div style="width: @GetWidth(Tools.MinutesToYears(_event.GetDurationMinutes()))px;  background-color: @GetEventColor(_event);"
                 class="dasaRow @BorderClass"
                 title="@_event.Description">
                        @_event.FormattedName
                    </div>

                }
            </div>
            @*Planet Bhukti Row*@
            <div class="parent-div">
                @foreach (var _event in BhuktiEventList)
                {
                    <div style="width: @GetWidth(Tools.MinutesToYears(_event.GetDurationMinutes()))px;  background-color: @GetEventColor(_event);"
                 class="dasaRow @BorderClass"
                 title="@_event.Description">
                        @_event.FormattedName
                    </div>

                }
            </div>
            @*Person Age Row*@
            <div class="parent-div">
                @for (var year = 0; year <= 120; year++)
                {
                    <div style="width: @GetWidth(1)px; background-color: coral; "
                 class="ageRow @BorderClass">
                        @year
                    </div>
                }
            </div>
        </div>
    </div>

}


@code {
    public string BorderClass => "border border-dark border-1";

    private List<Event>? DasaEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    [Parameter]
    public Person Person { get; set; }

    [Parameter]
    public GeoLocation Location { get; set; }

    public int ViewHolderWidth { get; set; }

    private bool _isPageReady = false; //marks if the page ready to loaded


    const double PixelPerYear = 30;


    protected override async Task OnInitializedAsync()
    {
        await UpdateLocalEventListFromApi();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        //update view holder width when page width changes
        var newViewHolderWidth = await GetViewHolderWidth();
        if (ViewHolderWidth != newViewHolderWidth)
        {
            ViewHolderWidth = newViewHolderWidth;
            this.StateHasChanged();
        }


    }

    private string GetPersonAge(Time currentTime, Person person)
    {
        var difference = currentTime.Subtract(person.GetBirthDateTime());

        var years = (difference.Days / 365);

        return years.ToString();
    }

    /// <summary>
    /// Gets width of dasa events based on their duration length
    /// </summary>
    private double GetWidth(double years) => System.Math.Round((years * PixelPerYear), 1);


    private int GetYearFromPersonAge(int age, Person person) => person.GetBirthDateTime().GetStdDateTimeOffset().Year + age;

    /// <summary>
    /// Because width page changes view box width should change proportionately
    /// </summary>
    private async Task<int> GetViewHolderWidth()
    {
        //get width of the article element that holds view
        var windowWidth = await _jsRuntime.InvokeAsync<int>("getWindowInnerWidth");
        Console.WriteLine($"window :{ windowWidth}");

        //use a portion of the article width as view box's width
        var finalWidth = windowWidth * 0.80; //80% of width

        //remove decimals
        return (int)finalWidth;
    }


    /// <summary>
    /// Get dasa color based on nature
    /// </summary>
    private string GetEventColor(Event _event)
    {
        var colorId = "";

        //set color id based on nature
        switch (_event.GetNature())
        {
            case EventNature.Good:
                colorId = "green";
                break;
            case EventNature.Neutral:
                colorId = "";
                break;
            case EventNature.Bad:
                colorId = "red";
                break;
        }

        return colorId;

    }


    private async Task UpdateLocalEventListFromApi()
    {
        //show loading message
        _globalVariable.loadingMessage.Open();


        //update the list from the new data gotten
        DasaEventList = await getDasaEvents();
        BhuktiEventList = await getBhuktiEvents();

        _isPageReady = true;

        //show loading message
        _globalVariable.loadingMessage.Close();

        //FUNCTIONS

        //method sets custom properties
        async Task<List<Event>> getDasaEvents()
        {
            var tag = EventTag.Dasa;
            var precision = Tools.DaysToHours(14);

            return await getEvents(tag, precision);
        }

        //method that sets some properties
        async Task<List<Event>> getBhuktiEvents()
        {
            var tag = EventTag.Bhukti;
            var precision = Tools.DaysToHours(7);

            return await getEvents(tag, precision);
        }

        //the underlying method that does the work
        async Task<List<Event>> getEvents(EventTag tag, double precision)
        {
            //prep data
            var startTime = Person.GetBirthDateTime(); //start time is birth time
            var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

            //get events from API server
            var dasaEventsUnsorted =
                await ServerManager.GetEvents(
                    startTime,
                    endTime,
                    Location,
                    Person,
                    tag,
                    precision);

            //sort the list by time before sending view
            var orderByAscResult = from dasaEvent in dasaEventsUnsorted
                                   orderby dasaEvent.StartTime.GetStdDateTimeOffset() ascending
                                   select dasaEvent;

            //send sorted events to view
            return orderByAscResult.ToList();
        }
    }

}



@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools
@using System.Text


<div class="vstack gap-1" style="width: fit-content;">
    @*
        dark mode is disabled for chart with mix-blend-mode
        note: extra logic to remove filter in normal mode
    *@
    <div class="container-xxl" id="DasaViewBox" @ref="_dasaViewBox" style="margin-left: -11px; @(AppData.DarkMode?"mix-blend-mode: difference;":"")"></div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" @onchange="OnChangeLifeEventCheckBox" checked>
        <label class="form-check-label" for="flexCheckChecked">Show Life Events</label>
    </div>
</div>


@code {

    ElementReference _dasaViewBox;


    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person, Time startTime, Time endTime, List<EventTag> inputedEventTags)
    {
        //try
        //{
        //auto calculate precision
        var daysPerPixel = GetDayPerPixel(startTime, endTime);
        await DrawReport(startTime, endTime, inputedEventTags, daysPerPixel);

        //ATTACH HANDLERS NOW THAT COMPONENT IS LOADED

        //attach mouse handler to auto move cursor line & update time legend
        await _jsRuntime.InvokeVoidAsync("LoadEventDataListFile"); //load event description file 1st
        await _jsRuntime.AddEventListener(_dasaViewBox, "mousemove", "onMouseMoveDasaViewEventHandler");

        //init touch for the dasa chart
        await _jsRuntime.InvokeVoidAsync("InitTouchLib", _dasaViewBox);


        //needed to show changes to inputs
        StateHasChanged();

        //}
        ////this exception seems to occur in
        //catch (Exception e)
        //{
        //    //log error, don't await to reduce lag
        //    WebsiteLogManager.LogError(e, "Error from SetData()");

        //    //let user know critical failure
        //    await _jsRuntime.ShowAlert("error", AlertText.ErrorWillRefresh, false, 3500);

        //    //refresh page
        //    WebsiteTools.ReloadPage(_navigation);
        //}


        //LOCAL FUNCTIONS

        async Task DrawReport(Time startTime, Time endTime, List<EventTag> inputedEventTags, double daysPerPixel = 0)
        {
            //generate dasa report in svg from server
            double _daysPerPixelInput = 30;
            _daysPerPixelInput = daysPerPixel != 0 ? daysPerPixel : _daysPerPixelInput; //if not defined, use input
            var finalSvg = await GetDasaReportSvgFromApi(person, startTime, endTime, _daysPerPixelInput, inputedEventTags);

            //inject new svg into page via JS for a more responsive progress update
            //doing it in blazor, causes progress bar freeze while updating
            await _jsRuntime.InjectIntoElement(_dasaViewBox, finalSvg);

            //attach tooltip lib for life events
            //note: needed on each draw
            await _jsRuntime.InvokeVoidAsync("InitLifeEventLineToolTip");
        }

        /// <summary>
        /// Contacts API and gets Person Dasa Report in svg string
        /// Note:
        /// -previously used generate in blazor client,
        ///  but for speed (10s gain) sake moved to server to do heavy lifting
        /// </summary>
        async Task<string> GetDasaReportSvgFromApi(Person inputPerson, Time startTime, Time endTime, double daysPerPixel, List<EventTag> inputedEventTags)
        {

            var personHashXml = new XElement("PersonHash", inputPerson.Hash);
            var startTimeXml = new XElement("StartTime", startTime.ToXml());
            var endTimeXml = new XElement("EndTime", endTime.ToXml());
            var daysPerPixelXml = new XElement("DaysPerPixel", daysPerPixel);
            var eventTagListXml = EventTagExtensions.ToXmlList(inputedEventTags);
            var rootXml = new XElement("Root", personHashXml, startTimeXml, endTimeXml, eventTagListXml, daysPerPixelXml);
            //note: when calling this api via postman, svg needs to be parsed in boxy-svg before viewable
            var svgStream = await ServerManager.WriteToServerStreamReply(ServerManager.GetPersonEventsReport, rootXml, _jsRuntime);

            //todo just send as string to remove lags of using stream
            // convert stream to string
            svgStream.Position = 0; //reset position otherwise can be null value out
            var reader = new StreamReader(svgStream);
            var svgText = await reader.ReadToEndAsync();

            return svgText;
        }

    }

    /// <summary>
    /// calculates the precision of the events to fit inside 1000px width
    /// </summary>
    public static double GetDayPerPixel(Time start, Time end)
    {
        const int maxWidth = 1000; //px

        var daysBetween = end.Subtract(start).TotalDays;
        var daysPerPixel = Math.Round(daysBetween / maxWidth, 3); //small val = higher precision
                                                                  //var daysPerPixel = Math.Round(yearsBetween * 0.4, 3); //small val = higher precision
                                                                  //daysPerPixel = daysPerPixel < 1 ? 1 : daysPerPixel; // minimum 1 day per px

        return daysPerPixel;
    }


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    private async Task OnChangeLifeEventCheckBox(ChangeEventArgs obj)
    {
        //based on checked value hide or show
        if ((bool)obj.Value)
        {
            await _jsRuntime.Show("#LifeEventLinesHolder");
        }
        else
        {
            await _jsRuntime.Hide("#LifeEventLinesHolder");
        }
    }



}

@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools
@using System.Text


<div class="vstack gap-1" style="width: fit-content;">
    @*
    dark mode is disabled for chart with mix-blend-mode
    note: extra logic to remove filter in normal mode
    *@
    <div class="container-xxl" id="EventsChartSvgHolder" @ref="_eventsChartSvgHolder" style="margin-left: -11px; @(AppData.DarkMode?"mix-blend-mode: difference;":"")"></div>

    @*bottom chart options row*@
    <div class="hstack gap-3 mt-2">
@*        <IconButton @ref="_showButton" ButtonText="Life Events" IconName="clarity:eye-show-solid" OnClickCallback="OnClickShowLifeEvents" SmallSize="true" />
        <IconButton @ref="_hideButton" ButtonText="Life Events" IconName="clarity:eye-hide-solid" OnClickCallback="OnClickHideLifeEvents" SmallSize="true" />

*@        @*only show mobile view when eventPreset & timePreset has been set*@
        @if (!string.IsNullOrEmpty(_eventPreset))
        {
            <IconButton @ref="_mobileViewButton" ButtonText="Mobile View" IconName="icomoon-free:mobile" OnClickCallback="OnClickMobileViewButton" SmallSize="true" />
        }
        @*only show "Save" button if viewing newly generated chart, so that no erroneous double save*@
        @if (!_nowSavedChart)
        {
            <IconButton ButtonText="Save Chart" IconName="entypo:save" OnClickCallback="OnClickSaveChartAPI" SmallSize="true" />
        }
        @*only show "Direct Link" & "Delete" button if viewing saved chart*@
        @if (_nowSavedChart)
        {
            <IconButton ButtonText="Copy Link" IconName="carbon:link" OnClickCallback="OnClickCopyChartLink" SmallSize="true" />
            <IconButton ButtonText="Delete" IconName="fluent:delete-16-regular" OnClickCallback="OnClickDeleteChart" SmallSize="true" />
        }
    </div>
</div>


@code {
    /// <summary>
    /// Id of chart that is shown
    /// </summary>
    public string CurrentChartId { get; set; }

    private bool _nowSavedChart = false; //set by show chart button

    public Person SelectedPerson { get; set; }
    public string _timePreset { get; set; }
    public string _eventPreset { get; set; }

    ElementReference _eventsChartSvgHolder;
    public Time StartTime { get; set; }
    public Time EndTime { get; set; }
    public List<EventTag> InputedEventTags { get; set; }

    private IconButton _showButton;
    private IconButton _hideButton;
    private IconButton _mobileViewButton;

    /// <summary>
    /// Raw SVG string of the latest chart
    /// </summary>
    string _finalSvg;

    bool isDirty = true; //so that it runs on 1st render

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isDirty)
        {
            //default show life event
            //await OnClickShowLifeEvents();
            isDirty = false;//reset
        }
    }

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task ShowChart(Person person, Time startTime, Time endTime, List<EventTag> inputedEventTags)
    {

        //saved to be accessed later
        SelectedPerson = person;
        StartTime = startTime;
        EndTime = endTime;
        InputedEventTags = inputedEventTags;

        //1 GENERATE CHART IN SVG FROM SERVER
        //saved for later use by Chart Saver
        _finalSvg = await GetEventsChartSvgFromApi(person, startTime, endTime, inputedEventTags);

        //2 LOAD CHART INTO PAGE
        await LoadChartIntoPage(_finalSvg);

        //set current chart as not from saved version
        _nowSavedChart = false;

        //needed to make save button appear again
        StateHasChanged();
    }

    private async Task<string> GetSavedEventsChartSvgFromApi(string chartId)
    {
        var chartIdXml = new XElement("ChartId", chartId);
        var svgStream = await ServerManager.WriteToServerStreamReply(ServerManager.GetSavedEventsChart, chartIdXml, _jsRuntime);

        //todo just send as string to remove lags of using stream (testing needed 1st, maybe same or faster)
        // convert stream to string
        svgStream.Position = 0; //reset position otherwise can be null value out
        var reader = new StreamReader(svgStream);
        var svgText = await reader.ReadToEndAsync();

        return svgText;

    }

    /// <summary>
    /// Contacts API and gets Person Dasa Report in svg string
    /// Note:
    /// -previously used generate in blazor client,
    ///  but for speed (10s gain) sake moved to server to do heavy lifting
    /// </summary>
    private async Task<string> GetEventsChartSvgFromApi(Person inputPerson, Time startTime, Time endTime, List<EventTag> inputedEventTags)
    {
        //auto calculate precision
        var daysPerPixelRaw = GetDayPerPixel(startTime, endTime);
        //if not defined, use input
        double daysPerPixelInput = 30;
        daysPerPixelInput = daysPerPixelRaw != 0 ? daysPerPixelRaw : daysPerPixelInput;


        var personIdXml = new XElement("PersonId", inputPerson.Id);
        var startTimeXml = new XElement("StartTime", startTime.ToXml());
        var endTimeXml = new XElement("EndTime", endTime.ToXml());
        var daysPerPixelXml = new XElement("DaysPerPixel", daysPerPixelInput);
        var eventTagListXml = EventTagExtensions.ToXmlList(inputedEventTags);
        var rootXml = new XElement("Root", personIdXml, startTimeXml, endTimeXml, eventTagListXml, daysPerPixelXml);
        //note: when calling this api via postman, svg needs to be parsed in boxy-svg before viewable
        var svgStream = await ServerManager.WriteToServerStreamReply(ServerManager.GetEventsChart, rootXml, _jsRuntime);

        //todo just send as string to remove lags of using stream (testing needed 1st, maybe same or faster)
        // convert stream to string
        svgStream.Position = 0; //reset position otherwise can be null value out
        var reader = new StreamReader(svgStream);
        var svgText = await reader.ReadToEndAsync();

        return svgText;
    }

    private async Task<bool> SaveReportSvgInApi(Person inputPerson, Time startTime, Time endTime, List<EventTag> inputedEventTags)
    {
        //auto calculate precision
        var daysPerPixelRaw = GetDayPerPixel(startTime, endTime);
        //if not defined, use input
        double daysPerPixelInput = 30;
        daysPerPixelInput = daysPerPixelRaw != 0 ? daysPerPixelRaw : daysPerPixelInput;


        var personIdXml = new XElement("PersonId", inputPerson.Id);
        var startTimeXml = new XElement("StartTime", startTime.ToXml());
        var endTimeXml = new XElement("EndTime", endTime.ToXml());
        var daysPerPixelXml = new XElement("DaysPerPixel", daysPerPixelInput);
        var eventTagListXml = EventTagExtensions.ToXmlList(inputedEventTags);
        var rootXml = new XElement("Root", personIdXml, startTimeXml, endTimeXml, eventTagListXml, daysPerPixelXml);
        //note: when calling this api via postman, svg needs to be parsed in boxy-svg before viewable
        Console.WriteLine(rootXml.ToString());
        var result = await ServerManager.WriteToServerXmlReply(ServerManager.SaveEventsChart, rootXml, _jsRuntime);

        return result.IsPass;
    }

    /// <summary>
    /// Given a saved chart name in local storage, it will load it into page
    /// </summary>
    public async Task ShowSavedChart(string selectedChartId)
    {
        //save chart id, used to generate direct link
        CurrentChartId = selectedChartId;

        //set current chart as from saved version (to hide save button)
        //only show "Save" button if viewing newly generated chart, so that no erroneous double save
        _nowSavedChart = true;

        //1 GENERATE CHART IN SVG FROM SERVER
        //saved for later use by Chart Saver
        _finalSvg = await GetSavedEventsChartSvgFromApi(selectedChartId);

        //gets person profile used to generate the saved chart being showed now
        //needs to be set else parent depending will fail
        SelectedPerson = await WebsiteTools.GetPersonIdFromChartId(selectedChartId, _jsRuntime);

        //2 LOAD CHART INTO PAGE
        await LoadChartIntoPage(_finalSvg);

        //needed to make save button appear again
        StateHasChanged();

    }

    /// <summary>
    /// Given an SVG as string, it will inject it into page & attach
    /// the needed JS handlers for animation
    /// </summary>
    private async Task LoadChartIntoPage(string rawSvgChart)
    {

        //2 Animate SVG chart with tiny JS lib
        await _jsRuntime.InvokeVoidAsync("ChartFromSvgString", rawSvgChart, _eventsChartSvgHolder);

        //get latest dark mode setting
        //so that event chart is set properly
        await AppData.UpdateDarkMode(_jsRuntime);

        //needed to show changes to inputs
        StateHasChanged();

    }

    /// <summary>
    /// calculates the precision of the events to fit inside 1000px width
    /// </summary>
    public static double GetDayPerPixel(Time start, Time end)
    {
        const int maxWidth = 1000; //px

        var daysBetween = end.Subtract(start).TotalDays;
        var daysPerPixel = Math.Round(daysBetween / maxWidth, 3); //small val = higher precision
                                                                  //var daysPerPixel = Math.Round(yearsBetween * 0.4, 3); //small val = higher precision
                                                                  //daysPerPixel = daysPerPixel < 1 ? 1 : daysPerPixel; // minimum 1 day per px

        return daysPerPixel;
    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    
    private async Task OnChangeLifeEventCheckBox(ChangeEventArgs obj)
    {
        //based on checked value hide or show
        if ((bool)obj.Value)
        {
            await _jsRuntime.Show("#LifeEventLinesHolder");
        }
        else
        {
            await _jsRuntime.Hide("#LifeEventLinesHolder");
        }
    }

    private async Task OnClickMobileViewButton()
    {
        //generate url
        var personId = SelectedPerson.Id;
        var eventPreset = _eventPreset;
        var timePreset = _timePreset;
        var url = $"{ServerManager.WebDomainToApi}/chart/{personId}/{eventPreset}/{timePreset}";

        _jsRuntime.OpenNewTab(url);
    }

    private async Task OnClickHideLifeEvents()
    {
        //hide & show the relevant buttons
        await _jsRuntime.Hide(_hideButton.ElementReference);
        await _jsRuntime.Show(_showButton.ElementReference);

        //hide element
        await _jsRuntime.Hide("#LifeEventLinesHolder");

    }

    private async Task OnClickDeleteChart()
    {
        //show loading message
        await _jsRuntime.ShowLoading();

        //tell API to delete chart, using chart id
        await WebsiteTools.DeleteSavedChart(CurrentChartId, _jsRuntime);

        //let user know chart has been deleted
        await _jsRuntime.ShowAlert("success", $"Chart deleted successfully!", false, timer: 2000);

        //refresh the page variables
        //todo marked for deletion, test without = no difference > delete
        this.StateHasChanged();

        //page ready
        _jsRuntime.HideAlert();

        ////send user to task list page after period of time
        //await Task.Delay(100);
        //_navigation.NavigateTo(PageRoute.PersonList);
    }

    private async Task OnClickCopyChartLink()
    {
        //generate the url
        var url = ServerManager.WebDomainToApi + $"/savedchart/{CurrentChartId}";

        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync("CopyToClipboard", url);

        //let user know link coppied
        await _jsRuntime.ShowAlert("success", $"Chart Link Copied!", false, 2600);
    }

    /// <summary>
    /// saves chart to server
    /// </summary>
    /// <returns></returns>
    private async Task OnClickSaveChartAPI()
    {
        //todo for some reason after click there still remains a lag
        await _jsRuntime.ShowLoading();

        //hold control until loading box popped
        await AppData.IfNoLoadingBoxPleaseHold();

        //tell server to generate & save this chart
        //give the server settings used to generate this chart
        var result = await SaveReportSvgInApi(SelectedPerson, StartTime, EndTime, InputedEventTags);

        _jsRuntime.HideLoading();


        //show message to user based on success or failure
        if (result) { await _jsRuntime.ShowAlert("success", $"Chart saved successfully!", false, 2600); }
        else { await _jsRuntime.ShowAlert("error", $"Chart failed to save! Try again.", true); }

    }

    //todo use for lite viewer
    private async Task OnClickSaveChartLocal()
    {
        await _jsRuntime.ShowLoading();

        //check if number of charts exceed 3 (real 4), as that seems to be chrome limit
        var savedChartCount = (await WebsiteTools.GetSavedChartNameList()).Count;
        if (savedChartCount > 3)
        {
            await _jsRuntime.ShowAlert("success", $"Saved charts is full!", false, 2600);
        }

        //a name to uniquely identify this chart
        var chartName = $"{SelectedPerson.Id}|{StartTime.GetStdYear()}-{EndTime.GetStdYear()}|Chart|{SelectedPerson.Name}"; //"Chart" important used later to find
        await _jsRuntime.SetProperty(chartName, _finalSvg);

        _jsRuntime.HideLoading();

        //show message to user
        await _jsRuntime.ShowAlert("success", $"Chart saved successfully!", false, 2600);

    }

    /// <summary>
    /// when user clicked tab saved tab, refresh saved list immediately
    /// </summary>
    /// <returns></returns>
    public async Task<List<string>> GetSavedChartNameListLocal()
    {
        //get all latest keys from browser
        var allKeys = await _jsRuntime.InvokeAsync<List<string>>("getAllLocalStorageKeys");

        //find the keys that hold the needed charts
        var filtered = allKeys.Where(x => x.Contains("Chart")).ToList();

        return filtered;
    }




}

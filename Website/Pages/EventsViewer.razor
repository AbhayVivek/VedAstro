@using Genso.Astrology.Library
@using System.Xml.Linq
@using Tools = Genso.Astrology.Library.Tools

<style>
    #NowLine {
        background-color: red;
        width: 1px;
        height: 142px;
        z-index: 999;
        left: 0px;
        top: -144px;
        position: relative;
    }

</style>

<div class="vstack gap-2">
    @*PERSON SELECTOR*@
    <div>
        <PeopleSelectorBox @ref="_peopleSelectorBox" />
    </div>
    <div class="hstack">
        <div class="col-5">
            <label class="form-label">Start Time (24h)</label>
            <input @bind="_startHourMinInput" type="text" class="form-control" placeholder="06:42">
        </div>
        <div class="col-5">
            <label class="form-label">Date</label>
            <input @bind="_startDateInput" type="text" class="form-control" placeholder="16/04/2021">
        </div>
    </div>
    <div class="hstack">
        <div class="col-5">
            <label class="form-label">End Time (24h)</label>
            <input @bind="_endHourMinInput" type="text" class="form-control" placeholder="06:42">
        </div>
        <div class="col-5">
            <label class="form-label">Date</label>
            <input @bind="_endDateInput" type="text" class="form-control" placeholder="16/04/2021">
        </div>
    </div>
    <GeoLocationInput @ref="_geoLocationInput" />
    <div class="col">
        <label class="form-label">Timezone</label>
        <input @bind="_timeZonInput" type="text" class="form-control" placeholder="+08:00">
    </div>

    @*CALCULATE BTN*@
    <div>
        <button @onclick="OnClickCalculate" class="btn btn-primary">Calculate</button>
    </div>
</div>



<div class="border border-dark border-0 vstack gap-1 mt-5">
    <div style="background-color: cadetblue;" class="fw-bold" id="TimeCursorLegend"></div>
    <div class="container-xxl" @ref="_dasaViewBox" style="overflow-x: scroll;">
        @DasaRowItemsSvg
        @BhuktiRowItemsSvg
        @AntaramRowItemsSvg
    </div>
    <div id="NowLine" style="left: 100px"></div>
</div>


@code {

    string? _startHourMinInput, _startDateInput, _timeZonInput;
    string? _endHourMinInput, _endDateInput;
    private GeoLocationInput _geoLocationInput;
    public Person SelectedPerson { get; set; }
    //public List<Person>? PersonList { get; set; } //data from URL not necessary provided
    private PeopleSelectorBox? _peopleSelectorBox;


    //FIELDS
    //NOTE all precision values must match otherwise
    //misalignment & empty slices occur
    const double _eventsPrecision = 1;
    double _timeSlicePrecision = _eventsPrecision;
    ElementReference _dasaViewBox;

    //px width & height of each slice of time
    //used when generating dasa rows
    //note: changes needed only here
    int _widthPerSlice = 10;
    int _heightPerSlice = 40;



    //PROPERTIES
    private Person Person { get; set; }

    private List<Event>? RullingConstellationEventList { get; set; }

    private List<Event>? BhuktiEventList { get; set; }

    private List<Event>? AntaramEventList { get; set; }

    private MarkupString DasaRowItemsSvg { get; set; } = new("");

    private MarkupString BhuktiRowItemsSvg { get; set; } = new("");

    private MarkupString AntaramRowItemsSvg { get; set; } = new("");




    //OVERRIDES


    protected override async Task OnInitializedAsync()
    {

        //show loading box
        _jsRuntime.ShowLoading();

        //set people list into people selector
        //note : without above first call _peopleSelectorBox is null
        //PersonList = await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id);
        //_peopleSelectorBox.SetData(PersonList);

        //set defaults
        _startHourMinInput = "00:00";
        _endHourMinInput = "11:59";
        _startDateInput = $"{DateTimeOffset.Now:dd/MM/yyyy}";
        _endDateInput = $"{DateTimeOffset.Now.AddDays(1):dd/MM/yyyy}";
        //auto fill time zone based on system time
        _timeZonInput = DateTimeOffset.Now.ToString("zzz");

        //hide loading box
        _jsRuntime.HideAlert();

    }


    /// <summary>
    /// JS events are attached here because the html element is already loaded
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        //after first render attach event handler for Time Cursor
        //if (firstRender) { await _jsRuntime.AddEventListener(_dasaViewBox, "mousemove", "mouseOverEventsViewHandler"); }
    }


    private async Task OnClickCalculate(MouseEventArgs obj)
    {
        //show loading box
        _jsRuntime.ShowLoading();



        //get data from inputs and save it for use by other components
        SelectedPerson = _peopleSelectorBox.GetSelectedPerson();



        //set data into dasa viewer
        await SetData(SelectedPerson);


        //hide loading box
        _jsRuntime.HideAlert();


    }


    //METHODS

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// </summary>
    public async Task SetData(Person person)
    {
        //save inputed data
        this.Person = person;


        //get needed data from input fields &
        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();
        var startTimeStr = $"{_startHourMinInput} {_startDateInput} {_timeZonInput}";
        var endTimeStr = $"{_endHourMinInput} {_endDateInput} {_timeZonInput}";
        Time startTime = new Time(startTimeStr, geoLocation);
        Time endTime = new Time(endTimeStr, geoLocation);


        //use the inputed data to get events from API
        //note: below methods access the data internally
        RullingConstellationEventList = await getRullingConstellationEvents(startTime, endTime);



        //generate rows and pump them into the page
        DasaRowItemsSvg = new MarkupString(await GenerateRowSvg(startTime, endTime, RullingConstellationEventList, _eventsPrecision));



        this.StateHasChanged();

        //-----------------------LOCAL FUNCTIONS-------------------------

        async Task<string> GenerateRowSvg(Time startTime, Time endTime, List<Event> eventList, double precisionHours)
        {
            //get time slices used to get events
            var timeSlices = EventManager.GetTimeListFromRange(startTime, endTime, _timeSlicePrecision);

            //generate the row for each time slice
            var rowHtml = "";
            var horizontalPosition = 0; //distance from left
            EventName previousEventName = EventName.EmptyEvent; //used to set border when event changes
            string eventColor;

            foreach (var slice in timeSlices)
            {
                //get event that occurred at this time slice
                //if more than 1 event raise alarm
                var foundEventList = eventList.FindAll(tempEvent => tempEvent.IsOccurredAtTime(slice));
                if (foundEventList.Count > 1) throw new Exception("Only 1 event in 1 time slice!");
                var foundEvent = foundEventList[0];

                //based on event set some details
                //if even is different from previous event name, then new event has started draw border black
                eventColor = previousEventName != foundEvent.Name ? "black" : GetEventColor(foundEvent?.Nature);
                previousEventName = foundEvent.Name;
                var timeText = $"{slice.GetStdDateTimeOffset():h:mm tt dd/MM/yyyy}";

                //generate and add to row
                //the hard coded attribute names used here are used in App.js
                var rect = $"<rect " +
                          $"eventName=\"{foundEvent?.FormattedName}\" " +
                           $"stdTime=\"{timeText}\" " + //show only date
                          $"x=\"{horizontalPosition}\" " +
                          $"width=\"{_widthPerSlice}\" " +
                          $"height=\"{_heightPerSlice}\" " +
                          $"fill=\"{eventColor}\" />";

                //set position for next element
                horizontalPosition += _widthPerSlice;

                rowHtml += rect;

            }

            //create the final svg that will be displayed
            var svgTotalWidth = horizontalPosition + 10; //add little for wiggle room
            var svgTotalHeight = _heightPerSlice + 1; //add little as border between
            var svgBody = $"<svg " +
                          $"style=\"" +
                          $"width:{svgTotalWidth}px;" +
                          $"height:{svgTotalHeight}px;" +
                          $"\" " +
                          $"xmlns=\"http://www.w3.org/2000/svg\">" +
                          $"{rowHtml}</svg>";



            return svgBody;

        }

        // Get dasa color based on nature & number of events
        string GetEventColor(EventNature? eventNature)
        {
            var colorId = "gray";

            if (eventNature == null) { return colorId; }

            //set color id based on nature
            switch (eventNature)
            {
                case EventNature.Good:
                    colorId = "green";
                    break;
                case EventNature.Neutral:
                    colorId = "green";
                    break;
                case EventNature.Bad:
                    colorId = "red";
                    break;
            }

            return colorId;
        }

        async Task<List<Event>?> getRullingConstellationEvents(Time startTime, Time endTime) => await getEventsByTag(startTime, endTime, EventTag.RulingConstellation, _eventsPrecision);

        //gets events from server filtered by event tag
        async Task<List<Event>?> getEventsByTag(Time startTime, Time endTime, EventTag tag, double precisionHours)
        {

            //prep data
            //var startTime = Person.BirthTime; //start time is birth time
            //var endTime = startTime.AddYears(120); //end time is 120 years from birth (dasa cycle)

            //get events from API server
            var dasaEventsUnsorted =
                await GetEventsFromApi(
                    startTime,
                    endTime,
                    //birth location always as current place,
                    //since place does not matter for Dasa
                    Person.GetBirthLocation(),
                    Person,
                    tag,
                    precisionHours);


            //sort the list by time before sending view
            var orderByAscResult = from dasaEvent in dasaEventsUnsorted
                                   orderby dasaEvent.StartTime.GetStdDateTimeOffset()
                                   select dasaEvent;



            //send sorted events to view
            return orderByAscResult.ToList();
        }

        // Gets Muhurtha events from API
        async Task<List<Event>> GetEventsFromApi(Time startTime, Time endTime, GeoLocation location, Person person, EventTag tag, double precisionHours)
        {
            //prepare data to send to API
            var root = new XElement("Root");

            root.Add(
                new XElement("StartTime", startTime.ToXml()),
                new XElement("EndTime", endTime.ToXml()),
                location.ToXml(),
                person.ToXml(),
                Tools.AnyTypeToXml(tag),
                Tools.AnyTypeToXml(precisionHours));


            //send to api and get results
            var resultsRaw = await ServerManager.WriteToServerXmlReply(ServerManager.GetEventsApi, root);


            //parse raw results
            List<Event> resultsParsed = Event.FromXml(resultsRaw);


            //send to caller
            return resultsParsed;
        }
    }
}

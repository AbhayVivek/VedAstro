@*Component that allows the input of geo location*@

@using Microsoft.AspNetCore.Components
@using System.Xml.Linq


@inject GlobalVariableManager _globalVariable;
@inject LocationService LocationService


<LoadingMessage @ref="_loadingMessage"></LoadingMessage>

<div class="form-group">
    <div class="row">
        <div class="col-6">
            <label>Birth Location</label>
            <input @onblur="OnLocationNameUpdated" @bind="LocationName" type="text" class="form-control" placeholder="London">
        </div>
        <div class="col">
            <label>Longitude</label>
            <input @bind="Longitude" type="text" class="form-control" placeholder="101">
        </div>
        <div class="col">
            <label>Latitude</label>
            <input @bind="Latitude" type="text" class="form-control" placeholder="4.59">
        </div>
    </div>
</div>



@code {
    private LoadingMessage _loadingMessage { get; set; }
    private string _locationName;
    private double _longitude;
    private double _latitude;
    const string DefaultLocationCountry = "Singapore";

    [Parameter]
    public string LocationName
    {
        get => _locationName;
        set
        {
            //this stops update loops
            if (_locationName == value) return;
            _locationName = value;
            //update value in parent page
            LocationNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public double Longitude
    {
        get => _longitude;
        set
        {
            //this stops update loops
            if (_longitude == value) return;
            _longitude = value;
            //update value in parent page
            LongitudeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public double Latitude
    {
        get => _latitude;
        set
        {
            //this stops update loops
            if (_latitude == value) return;
            _latitude = value;
            //update value in parent page
            LatitudeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> LocationNameChanged { get; set; }
    [Parameter]
    public EventCallback<double> LongitudeChanged { get; set; }
    [Parameter]
    public EventCallback<double> LatitudeChanged { get; set; }


    Location locationCoordinates;


    protected override async Task OnInitializedAsync()
    {
        //try to auto set location gotten from browser
        await AutoSetLocation();
    }


    /// <summary>
    /// When location name text is changed this method is called to fetch longitude & latitude
    /// </summary>
    private async Task OnLocationNameUpdated(FocusEventArgs obj)
    {
        //show loading to user
        _loadingMessage.Open();

        await SetCoordinatesFromNameInput();

        //hide loading from user
        _loadingMessage.Close();

    }


    /// <summary>
    /// Takes location name and gets the coordinates
    /// and sets them in the input box
    /// </summary>
    private async Task SetCoordinatesFromNameInput()
    {

    TryAgain:
        //if location not set, default to preset location
        LocationName = LocationName is "" or null ? DefaultLocationCountry : LocationName;

        //sometimes location can't be found, causes critical failure
        //so if fail here try again with default location & alert user
        dynamic coordinates;
        try
        {
            //get longitude & latitude for location
            coordinates = await Tools.GetAddressLocation(LocationName);
        }
        catch (Exception e)
        {
            //alert user first with the wrong name
            _globalVariable.Alert.ShowError($"The location \"{LocationName}\", can not be found!" +
                                            $"\n Check the spelling, or try another nearby place.");

            //change to default location & try again to get coordinates
            LocationName = DefaultLocationCountry;
            goto TryAgain;
        }


        //set new coordinates into view
        Longitude = coordinates.Longitude;
        Latitude = coordinates.Latitude;

        //update user typed location name to proper formatted one
        LocationName = coordinates.FullName;

    }

    /// <summary>
    /// Gets location from browser & sets the input boxes
    /// </summary>
    private async Task AutoSetLocation()
    {
        try
        {
            //try get location from Browser
            locationCoordinates = await LocationService.GetLocationAsync();

            //set new coordinates into view
            Longitude = (double)locationCoordinates.Longitude;
            Latitude = (double)locationCoordinates.Latitude;

            //set gotten location name into view
            LocationName = await Tools.CoordinateToAddress(locationCoordinates.Longitude, locationCoordinates.Latitude);

        }
        catch (Exception e)
        {
            //if fail set default location name
            LocationName = DefaultLocationCountry;

            //update coordinates based on name
            SetCoordinatesFromNameInput();

        }



    }


}

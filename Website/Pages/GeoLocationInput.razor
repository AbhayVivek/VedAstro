@*
    Component that allows the input of geo location
    Note : When loaded location from browser is requested
*@

@using Microsoft.AspNetCore.Components
@using System.Xml.Linq
@using Genso.Astrology.Library


@inject LocationService _locationService


<div class="hstack gap-2">
    <div style="width: fit-content;">
        <label class="form-label">
            Birth Location<HelpBox SmallIcon="true" HelpText="@HelpText.GeoLocationName"></HelpBox>
        </label>
        <input style="width: 265px;" @ref="_locationNameInput" @onblur="OnLocationNameUpdated" @bind="LocationName" type="text" class="form-control">
    </div>
    <div style="width: fit-content;">
        <label class="form-label">Longitude</label>
        <input @ref="_longitudeInput" @bind="Longitude" type="text" class="form-control" placeholder="103.82">
    </div>
    <div style="width: fit-content;">
        <label class="form-label">Latitude</label>
        <input @ref="_latitudeInput" @bind="Latitude" type="text" class="form-control" placeholder="1.352">
    </div>
</div>



@code {
    //FIELDS
    const string DefaultLocationCountry = "Singapore";
    private ElementReference _locationNameInput;
    private ElementReference _longitudeInput;
    private ElementReference _latitudeInput;
    private string _locationName;
    private double _longitude;
    private double _latitude;


    //PARAMETERS

    public string LocationName
    {
        get => _locationName;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_locationName == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_locationNameInput, "value", value);

            //save the value
            _locationName = value;
        }
    }

    public double Longitude
    {
        get => _longitude;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_longitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_longitudeInput, "value", value);

            //save the value
            _longitude = value;
        }
    }

    public double Latitude
    {
        get => _latitude;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_latitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_latitudeInput, "value", value);

            //save the value
            _latitude = value;
        }

    }



    //PUBLIC METHODS

    public GeoLocation GetGeoLocation()
    {
        return new GeoLocation(this.LocationName, this.Longitude, this.Latitude);
    }

    /// <summary>
    /// Updates all the fields in the component
    /// Note: Does not call state has changed
    /// </summary>
    public void UpdateData(dynamic newData)
    {
        LocationName = newData.LocationName;
        Longitude = newData.Longitude;
        Latitude = newData.Latitude;
    }





    //PRIVATE METHODS

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //try to auto set location gotten from
        //browser if no location name set within 1 second
        if (firstRender)
        {
            //wait 1s before checking if it has been filled by user or other logic
            await Task.Delay(1500);
            if (LocationName == "" || LocationName == null) { await AutoSetLocation(); }
        }

    }

    /// <summary>
    /// When location name text is changed this method is called to fetch longitude & latitude
    /// </summary>
    private async Task OnLocationNameUpdated(FocusEventArgs obj)
    {
        //show loading to user
        //_jsRuntime.ShowLoading();

        await SetCoordinatesFromNameInput();

        //hide loading from user
        //_jsRuntime.HideAlert();

    }

    /// <summary>
    /// Takes location name and gets the coordinates
    /// and sets them in the input box
    /// </summary>
    private async Task SetCoordinatesFromNameInput()
    {

    TryAgain:
        //if location not set, default to preset location
        LocationName = LocationName is "" or null ? DefaultLocationCountry : LocationName;

        //sometimes location can't be found, causes critical failure
        //so if fail here try again with default location & alert user
        dynamic coordinates;
        try
        {
            //get longitude & latitude for location
            coordinates = await WebsiteTools.GetAddressLocation(LocationName);
        }
        catch (Exception e)
        {
            //alert user first with the wrong name
            var msg = $"The location \"{LocationName}\", not found!" +
                      $"\n Check the spelling or try other nearby place.";
            await _jsRuntime.ShowAlert("error", msg, true, timer: 0);


            //change to default location & try again to get coordinates
            LocationName = DefaultLocationCountry;
            goto TryAgain;
        }


        //set new coordinates into view
        Longitude = coordinates.Longitude;
        Latitude = coordinates.Latitude;

        //update user typed location name to proper formatted one
        LocationName = coordinates.FullName;

    }

    /// <summary>
    /// Gets location from browser & sets the input boxes
    /// </summary>
    private async Task AutoSetLocation()
    {
        try
        {
            //try get location from Browser
            var locationCoordinates = await _locationService.GetLocationAsync();

            //set new coordinates into view
            Longitude = (double)locationCoordinates.Longitude;
            Latitude = (double)locationCoordinates.Latitude;

            //set gotten location name into view
            LocationName = await WebsiteTools.CoordinateToAddress(locationCoordinates.Longitude, locationCoordinates.Latitude);

        }
        catch (Exception e)
        {
            //if fail set default location name
            LocationName = DefaultLocationCountry;

            //update coordinates based on name
            await SetCoordinatesFromNameInput();

        }



    }

}

@*
    Component that allows the input of geo location
    Note : When loaded location from browser is requested
*@

@using Microsoft.AspNetCore.Components
@using System.Xml.Linq
@using Genso.Astrology.Library

@inject LocationService _locationService


<div class="hstack gap-2">
    <div class="w-100">
        @*fill parent width*@
        <label class="form-label">
            @LabelText<HelpBox SmallIcon="true" HelpText="@HelpText.GeoLocationName"></HelpBox>
        </label>
        @*make input wider if without*@
        <div class="hstack">
            <input @ref="_locationNameInput" @onblur="OnLocationNameUpdated" @bind="LocationName" type="text" class="form-control">
            @*dummy button to start location search*@
            <div class="p-1 rounded border" style="cursor: pointer;height: 38px;margin-left: 4px;">
                <span class="iconify" data-icon="bx:search-alt" data-width="23"></span>
            </div>
        </div>

    </div>
    @if (!HideLongLat)
    {
        <div style="width: fit-content;">
            <label class="form-label">Longitude</label>
            <input @ref="_longitudeInput" @bind="Longitude" type="text" class="form-control" placeholder="103.82">
        </div>
        <div style="width: fit-content;">
            <label class="form-label">Latitude</label>
            <input @ref="_latitudeInput" @bind="Latitude" type="text" class="form-control" placeholder="1.352">
        </div>
    }
</div>



@code {
    //FIELDS
    const string DefaultLocationCountry = "Singapore";
    private ElementReference _locationNameInput;
    private ElementReference _longitudeInput;
    private ElementReference _latitudeInput;
    private string _locationName;
    private double _longitude;
    private double _latitude;


    /// <summary>
    /// Text shown next to
    /// </summary>
    [Parameter]
    public string LabelText { get; set; } = "Location";

    /// <summary>
    /// if set true will not auto update location after timeout
    /// default false, optional set
    /// </summary>
    [Parameter]
    public bool DisableAutoLocation { get; set; } = false;

    /// <summary>
    /// If true hides, long lat fields, else defaults to visible
    /// </summary>
    [Parameter]
    public bool HideLongLat { get; set; } = false;

    //PARAMETERS

    public string LocationName
    {
        get => _locationName;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_locationName == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_locationNameInput, "value", value);

            //save the value
            _locationName = value;
        }
    }

    public double Longitude
    {
        get => _longitude;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_longitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_longitudeInput, "value", value);

            //save the value
            _longitude = value;
        }
    }

    public double Latitude
    {
        get => _latitude;
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_latitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_latitudeInput, "value", value);

            //save the value
            _latitude = value;
        }

    }



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);





    //PUBLIC METHODS

    public GeoLocation GetGeoLocation()
    {
        return new GeoLocation(this.LocationName, this.Longitude, this.Latitude);
    }

    /// <summary>
    /// Updates all the fields in the component
    /// Note: Does not call state has changed, because called by parent
    /// </summary>
    public void UpdateData(dynamic newData)
    {
        LocationName = newData.LocationName;
        Longitude = newData.Longitude;
        Latitude = newData.Latitude;
    }



    //PRIVATE METHODS

    private async Task _OnAfterRender(bool firstRender)
    {
        //try to auto set location gotten from
        //browser if no location name set within 1 second
        if (firstRender)
        {
            //if disable auto location is false,
            //only then set timeout for auto set
            //note: default is false, so will always run unless set
            if (!DisableAutoLocation)
            {
                //wait 1s before checking if it has been filled by user or other logic
                await Task.Delay(1500);
                if (string.IsNullOrEmpty(LocationName)) { await AutoSetLocation(); }

            }
        }

    }

    /// <summary>
    /// When location name text is changed this method is called to fetch longitude & latitude
    /// </summary>
    private async Task OnLocationNameUpdated(FocusEventArgs obj)
    {
        //show loading to user
        //_jsRuntime.ShowLoading();

        await SetCoordinatesFromNameInput();

        //hide loading from user
        //_jsRuntime.HideAlert();

    }

    /// <summary>
    /// Takes location name and gets the coordinates
    /// and sets them in the input box
    /// </summary>
    private async Task SetCoordinatesFromNameInput()
    {

        (string FullName, double Latitude, double Longitude) coordinates = await Tools.CoordinateToAddressGuiHandle(LocationName, _jsRuntime);

        //update user typed location name to proper formatted one
        LocationName = coordinates.FullName;

        //set new coordinates into view
        Longitude = coordinates.Longitude;
        Latitude = coordinates.Latitude;
    }

    /// <summary>
    /// Gets location from browser & sets the input boxes
    /// </summary>
    private async Task AutoSetLocation()
    {
        try
        {
            //try get location from Browser
            var locationCoordinates = await _locationService.GetLocationAsync();

            //set new coordinates into view
            Longitude = (double)locationCoordinates.Longitude;
            Latitude = (double)locationCoordinates.Latitude;

            //if no location data available set default location
            //will return 0 when permission not given
            if (Longitude == 0 && Latitude == 0) { goto SetDefault; }

            //set gotten location name into view
            LocationName = await Tools.CoordinateToAddress(locationCoordinates.Longitude, locationCoordinates.Latitude, ServerManager.GoogleGeoLocationApiKey);

            //exit
            return;
        }
        catch (Exception)
        {
            //if errors occur, set default name
        }


    SetDefault:
        //if fail set default location name
        LocationName = DefaultLocationCountry;

        //update coordinates based on name
        await SetCoordinatesFromNameInput();


    }
}

@using System.Xml.Linq
@using Genso.Astrology.Library
@attribute [Route(PageRoute.Horoscope)]
@attribute [Route(PageRoute.HoroscopeParam)]

@inject HttpClient Client


<PageTitle>@_pageTitle</PageTitle>

<PageTop Title="Horoscope" IconName="fluent:book-star-20-filled">
    <Description>Astrological predictions of a person's horoscope.<br />Over +370 planetary combinations are checked.</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.AddPerson"></IconButton>
        <IconButton IconName="carbon:graphical-data-flow" ButtonText="Horoscope Data" ClickUrl="@PageRoute.HoroscopeData"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>


<div>

    @*SELECTOR & BUTTON*@
    <div class="d-flex flex-wrap">
        <div class="vstack gap-3">
            <PeopleSelectorBox @ref="_peopleSelectorBox" />
            <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="CalculateButtonClicked"></IconButton>
        </div>
        <div class="alert alert-warning d-flex align-items-center w-50" role="alert">
            <span class="iconify bi flex-shrink-0 me-2" data-icon="ant-design:warning-twotone" data-width="50"></span>
            <div>
                <strong>Remember!</strong><br />
                Results shown here need to be combined with <a href="@PageRoute.HoroscopeData"><span class="fw-bold">Astrological Data</span></a> to get accurate predictions.
                Every combination mentioned should be applied to the Rasi, Bhava and Navamsa charts and then a conclusion drawn.
            </div>
        </div>
    </div>

    @*divider*@
    <hr />

    @*SHOW RAW HOROSCOPE & PREDICTION DATA VIA TABS*@
    <HoroscopeInfoView @ref="_horoscopeInfoView" />


    @*HELP SECTION*@
    <PageHelpSection @ref="_helpSection">
        <Content>
            <h4 class="fw-bold">How to use these predictions?</h4>
            <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
                For accurate predictions, results must be duly modified
                or qualified according to the affliction or otherwise of the
                planets concerned. For example, predictions involving planets with
                high strength (Bhava Bala), is often accurate.
            </p>

            <h4 class="fw-bold">Where are these predictions from?</h4>
            <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
                Prediction data come from books by renowned astrologer B.V. Raman.
                Books such as <span class="fw-bold">How to Judge Horoscope</span> and
                <span class="fw-bold">Hindu Predictive Astrology</span>,
                were used to make this calculator.
            </p>
        </Content>
    </PageHelpSection>

</div>


@code {



    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    private string _pageTitle = "Horoscope | VedAstro";
    private PeopleSelectorBox? _peopleSelectorBox;
    private Person _selectedPerson;
    private HoroscopeInfoView _horoscopeInfoView;

    private PageHelpSection _helpSection;

    private bool _isReady = false;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    private async Task CalculateButtonClicked() => await InvokeAsync(async () => await _CalculateAndUpdateEvents()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);





    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRenderAsync(bool firstRender)
    {
        //if parameter has been set then auto load person data as
        //though person was selected and calculate was clicked
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _peopleSelectorBox.SetPerson(PersonIdUrl);

            //start the same process as show button click
            //todo loading box disappears here, needs fix
            await _CalculateAndUpdateEvents();

            //needed to see updates because any changes in OnAfterRender
            //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();
        }
    }


    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> ValidationPassed()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        return true;
    }

    private async Task _CalculateAndUpdateEvents()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!await ValidationPassed()) { return; }

        //hide data while loading, only after validation
        _isReady = false;

        //get person from person dropdown
        _selectedPerson = await _peopleSelectorBox?.GetSelectedPerson();

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = _selectedPerson.Id; //save local copy
        _navigation.NavigateTo($"{PageRoute.Horoscope}/{PersonIdUrl}"); //change url

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Horoscope | {_selectedPerson.Name}";

        //inject selected person into component
        await _horoscopeInfoView.SetPerson(_selectedPerson);

    }



}
@attribute [Route(PageRoute.Horoscope)]

@inject HttpClient _client


<PageTitle>Horoscope</PageTitle>
<PageTop Title="Horoscope" IconName="fluent:book-star-20-filled">
    <Description>Astrological predictions of a person's horoscope</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
        <IconButton IconName="carbon:graphical-data-flow" ButtonText="Horoscope Data" ClickUrl="@PageRoute.HoroscopeData"></IconButton>
    </ButtonsRow>
</PageTop>



<div class="vstack gap-4">


    <div class="hstack gap-3">
        <PeopleSelectorBox @ref="_peopleSelectorBox" />
        <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="CalculateButtonClicked"></IconButton>
    </div>

    <div class="hstack gap-3">
        <input @bind="_searchInput" type="text" class="form-control" placeholder="Search">
        <button class="btn btn-primary" style="align-self: end;" @onclick="SearchButtonClicked">Search</button>
    </div>

    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th style="min-width: 123px;">Info</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prediction in _filteredHoroscopePredictions)
            {
                <tr>
                    <td>@prediction.FormattedName</td>
                    <td>@prediction.Description</td>
                    <td>@prediction.Info</td>
                </tr>
            }
        </tbody>
    </table>

</div>

@code {

    private PeopleSelectorBox? _peopleSelectorBox;
    private List<HoroscopePrediction> _horoscopePredictions = new();
    private List<HoroscopePrediction> _filteredHoroscopePredictions = new();
    private string _searchInput = "";



    private async Task SearchButtonClicked()
    {
        //if no search text means reset (no filter applied)
        if (_searchInput == "") { _filteredHoroscopePredictions = _horoscopePredictions.ToList(); return; }

        //else search by text
        _filteredHoroscopePredictions = _horoscopePredictions.FindAll(x => x.Contains(_searchInput));
    }


    private async Task CalculateButtonClicked()
    {
        //todo progress bar does not move, because computation hogs progress calc
        //await _globalVariable.LoadingMessage.DisableProgressBar();
        await _globalVariable.LoadingMessage.Show();

        await CalculateAndUpdateEvents();

        await _globalVariable.LoadingMessage.Hide();
    }

    private async Task CalculateAndUpdateEvents()
    {
        //get person from person dropdown
        var person = _peopleSelectorBox.GetSelectedPerson();

        //get main horoscope prediction file (located in wwwroot)
        var predictionDataList = await _client.GetStreamAsync("data/PredictionDataList.xml");

        //calculate predictions for current person (client side)
        _horoscopePredictions = await HoroscopeCore.GetPrediction(person, predictionDataList);
        _filteredHoroscopePredictions = _horoscopePredictions.ToList(); //make a copy for search

        StateHasChanged();
    }

}
@attribute [Route(PageRoute.Horoscope)]

@inject HttpClient _client


<PageTitle>Horoscope</PageTitle>
<PageTop Title="Horoscope" IconName="fluent:book-star-20-filled">
    <Description>Astrological predictions of a person's horoscope</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
        <IconButton IconName="carbon:graphical-data-flow" ButtonText="Horoscope Data" ClickUrl="@PageRoute.HoroscopeData"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>



<div class="vstack gap-3">

    <PeopleSelectorBox @ref="_peopleSelectorBox" />
    <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="CalculateButtonClicked"></IconButton>

    <hr />

    @*Only show table and search after button clicked*@
    <div @ref="holder" class="vstack gap-2" style="display: none;">
        <div class="hstack gap-3">
            <input @bind="_searchInput" type="text" class="form-control" placeholder="Search">
            <IconButton ButtonText="Search" IconName="bx:search-alt" OnClickCallback="SearchButtonClicked"></IconButton>
        </div>

        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th style="min-width: 123px;">Info</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prediction in _filteredHoroscopePredictions)
                {
                    <tr>
                        <td>@prediction.FormattedName</td>
                        <td>@prediction.Description</td>
                        <td>@prediction.Info</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

    @*HELP SECTION*@
    <PageHelpSection @ref="_helpSection">
        <Content>
            <h4 class="fw-bold">Where are these predictions from?</h4>
            <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
                Prediction data come from books by renowned astrologer B.V. Raman.
                Books such as <span class="fw-bold">How to Judge Horoscope</span> and
                <span class="fw-bold">Hindu Predictive Astrology</span>,
                were used to make this calculator.
            </p>

            <h4 class="fw-bold">How to use these predictions?</h4>
            <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
                For accurate predictions, results must be duly modified
                or qualified according to the affliction or otherwise of the
                planets concerned. For example, predictions involving planets with
                high strength (Bhava Bala), is often accurate.
            </p>
        </Content>
    </PageHelpSection>

</div>

@code {

    private PeopleSelectorBox? _peopleSelectorBox;
    private List<HoroscopePrediction> _horoscopePredictions = new();
    private List<HoroscopePrediction> _filteredHoroscopePredictions = new();
    private string _searchInput = "";

    private ElementReference holder;
    private PageHelpSection _helpSection;


    private async Task SearchButtonClicked()
    {
        //if no search text means reset (no filter applied)
        if (_searchInput == "") { _filteredHoroscopePredictions = _horoscopePredictions.ToList(); return; }

        //else search by text
        _filteredHoroscopePredictions = _horoscopePredictions.FindAll(x => x.Contains(_searchInput));
    }


    private async Task CalculateButtonClicked()
    {
        //only continue if passed input field validation
        if (!ValidationPassed()) { return; }

        //todo progress bar does not move, because computation hogs progress calc
        //await _globalVariable.LoadingMessage.DisableProgressBar();
        await _globalVariable.LoadingMessage.Show();

        await CalculateAndUpdateEvents();

        //make table and search visible
        await _jsRuntime.Show(holder);

        await _globalVariable.LoadingMessage.Hide();
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassed()
    {
        var isValid = true;

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            isValid = false;
            var msg = $"Select person name!";
            _jsRuntime.ShowAlert("error", msg, true, timer: 0);
        }


        return isValid;
    }


    private async Task CalculateAndUpdateEvents()
    {
        //get person from person dropdown
        var person = _peopleSelectorBox.GetSelectedPerson();

        //get main horoscope prediction file (located in wwwroot)
        var predictionDataList = await _client.GetStreamAsync("data/PredictionDataList.xml");

        //calculate predictions for current person (client side)
        _horoscopePredictions = await HoroscopeCore.GetPrediction(person, predictionDataList);
        _filteredHoroscopePredictions = _horoscopePredictions.ToList(); //make a copy for search

        StateHasChanged();
    }



}
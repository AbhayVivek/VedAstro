@using Website.Managers

<style>
    .iconButton {
        width: fit-content;
        height: fit-content;
        /*align-self: end;*/
        /* padding: 5px; */
        min-width: 100px;
        /*align-self: center;*/
    }
</style>

<button @onclick="OnClickButton" class="btn btn-primary hstack gap-2 iconButton">
    <span class="iconify" data-icon="@IconName" data-width="25"></span> @ButtonText
</button>

@code {

    /// <summary>
    /// Text that will be displayed in button
    /// </summary>
    [Parameter]
    public string? ButtonText { get; set; }

    /// <summary>
    /// Special icon name from icon-sets.iconify.design
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }


    /// <summary>
    /// Function that is called on click of button
    /// Note: using delegate so that can change function based on page mode
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    /// <summary>
    /// If URL is provided, on button click will navigate to URL
    /// </summary>
    [Parameter]
    public string? ClickUrl { get; set; }


    /// <summary>
    /// Default button click will send page to URL link if provided
    /// else exit silently
    /// </summary>
    private async Task OnClickButton(MouseEventArgs obj)
    {
        //log this
        await WebsiteLogManager.LogClick(_jsRuntime,ButtonText);

        //if custom onclick has been specified than use that
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(obj);
        }
        //else if URL has been specified use that
        else if (ClickUrl != "" || ClickUrl != null)
        {
            _navigation.NavigateTo(ClickUrl);
        }

    }

}

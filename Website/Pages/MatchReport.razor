@attribute [Route(PageRoute.MatchReportParam)]

@using Genso.Astrology.Library.Compatibility
@using Genso.Astrology.Library

<PageTitle>Match Report</PageTitle>

<PageTop Title="Match Report" IconName="bi:arrow-through-heart-fill">
    <Description>Below is the results.</Description>
    <ButtonsRow>
        <IconButton IconName="akar-icons:arrow-back" ButtonText="Back" ClickUrl="@PageRoute.Match"></IconButton>
    </ButtonsRow>
</PageTop>



@if (_report != null)
{

    <h1>@MaleName + @FemaleName = Score <b style="color:@GetScoreColor(_report.KutaScore);">@_report.KutaScore/100</b></h1>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Nature</th>
                <th scope="col">Info</th>
                <th scope="col">MaleInfo</th>
                <th scope="col">FemaleInfo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prediction in _report.PredictionList)
            {
                //if no prediction then don't print
                @if (prediction.Name == Name.Empty) { continue; }

                <tr>
                    <td scope="row">
                        <b>@prediction.Name</b>
                        <p><small>@prediction.Description</small></p>
                    </td>
                    <td style="color:@GetNatureColor(prediction.Nature);"><b>@prediction.Nature</b></td>
                    <td>@prediction.Info</td>
                    <td>@prediction.MaleInfo</td>
                    <td>@prediction.FemaleInfo</td>
                </tr>
            }
        </tbody>
    </table>

}


@code {

    //VARIABLES
    [Parameter]
    public string? MaleHash { get; set; } //data from URL not necessary provided
    [Parameter]
    public string? FemaleHash { get; set; } //data from URL not necessary provided

    string MaleName;
    string FemaleName;

    CompatibilityReport? _report = null; //when needs to be show before init



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    //generate the report
    protected override async Task OnInitializedAsync() => _report = await GetCompatibilityReport(MaleHash ?? "", FemaleHash ?? "");

    //hide the loading message that was open in init
    protected override async Task OnAfterRenderAsync(bool firstRender) => await _globalVariable.LoadingMessage.Hide();




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private static string GetNatureColor(EventNature nature)
    {
        switch (nature)
        {
            case EventNature.Good:
                return "Green";
            case EventNature.Bad:
                return "Red";
            default:
                return "Black";
        }
    }

    private static string GetScoreColor(double score) => score > 50 ? "Green" : "Red";

    /// <summary>
    /// Gets CompatibilityReport from API server
    /// </summary>
    private async Task<CompatibilityReport?> GetCompatibilityReport(string maleHash, string femaleHash)
    {

        //show loading box
        await _globalVariable.LoadingMessage.Show();

        //prepare request to API server
        MaleName = (await WebsiteTools.GetPersonFromHash(maleHash)).Name;
        FemaleName = (await WebsiteTools.GetPersonFromHash(femaleHash)).Name;
        var url = $"{ServerManager.GetMatchReportApi}?male={maleHash}&female={femaleHash}";

        //get report from server
        var matchReportXml = await ServerManager.ReadFromServerXmlReply(url);

        //parse report
        var matchReport = CompatibilityReport.FromXml(matchReportXml);

        //return parsed report to caller
        return matchReport;
    }


}

@attribute [Route(PageRoute.MatchReportParam)]

@using Genso.Astrology.Library.Compatibility
@using Genso.Astrology.Library
@using System.Xml.Linq

<PageTitle>Match Report</PageTitle>

<PageTop Title="Match Report" IconName="bi:arrow-through-heart-fill">
    <Description>Below is the results.</Description>
    <ButtonsRow>
        <IconButton IconName="akar-icons:arrow-back" ButtonText="Back" ClickUrl="@PageRoute.Match"></IconButton>
        <IconButton IconName="carbon:report" ButtonText="Advanced Chart" OnClickCallback="() => showAdvanced = !showAdvanced"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>



@if (_report != null)
{

    <h3>@MaleName + @FemaleName</h3>
    <h2>Score <b style="color:@GetScoreColor(_report.KutaScore);">@_report.KutaScore/100</b></h2>

    <table class="table table-striped table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th scope="col"><span class="hstack gap-2">Name<HelpBox SmallIcon="true" HelpText="@HelpText.MatchReportName"></HelpBox></span></th>
                <th scope="col"><span class="hstack gap-2">Result<HelpBox SmallIcon="true" HelpText="@HelpText.MatchReportResult"></HelpBox></span></th>
                @if (showAdvanced)
                {
                    <th scope="col"><span class="hstack gap-2">Info<HelpBox SmallIcon="true" HelpText="@HelpText.MatchReportInfo"></HelpBox></span></th>
                    <th scope="col"><span class="hstack gap-2">Male Info<HelpBox SmallIcon="true" HelpText="@HelpText.MatchReportMale"></HelpBox></span></th>
                    <th scope="col"><span class="hstack gap-2">Female Info<HelpBox SmallIcon="true" HelpText="@HelpText.MatchReportFemale"></HelpBox></span></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var prediction in _report.PredictionList)
            {
                //if no prediction then don't print
                @if (prediction.Name == MatchPredictionName.Empty) { continue; }

                <tr>
                    <td scope="row">
                        <b>@prediction.FormattedName</b>
                        <p style="margin: 0px;" ><small>@prediction.Description</small></p>
                    </td>
                    <td style="color:@GetNatureColor(prediction.Nature);"><b>@prediction.Nature</b></td>
                    @if (showAdvanced)
                    {
                        <td>@prediction.Info</td>
                        <td>@prediction.MaleInfo</td>
                        <td>@prediction.FemaleInfo</td>
                    }
                </tr>
            }
        </tbody>
    </table>

}

@*HELP SECTION*@
<PageHelpSection @ref="_helpSection">
    <Content>
        <h4 class="fw-bold">Three Factors</h4>
        <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
            In selecting horoscopes for marriage purposes, three factors have to be
            carefully considered. They are: -
            <ol class="list-group list-group-numbered">
                <li class="list-group-item">The longevity of the bride and the bridegroom.</li>
                <li class="list-group-item">The larger strength of the 7th and 8th houses.</li>
                <li class="list-group-item">Agreeability in regard to the Kutas or Pooruththam.</li>
            </ol>
        </p>

        <h4 class="fw-bold">Longevity</h4>
        <p class="text-justify mb-4" style="max-width:@AppData.MaxWidth;">
            When there is no longevity in the case of bride, the horoscope must be
            rejected even though the 7th house may be strong or the requsite
            number of units are available. Likewise when the 7th house is weak and
            is considerably blemished, the horoscope to be matched should have
            antidotes or counteracting influences.
        </p>
    </Content>
</PageHelpSection>


@code {

    //VARIABLES
    [Parameter]
    public string? MaleHash { get; set; } //data from URL not necessary provided
    [Parameter]
    public string? FemaleHash { get; set; } //data from URL not necessary provided

    //if true shows extra info columns
    bool showAdvanced = false;
    string MaleName;
    string FemaleName;

    CompatibilityReport? _report = null; //when needs to be show before init

    private PageHelpSection _helpSection;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    //generate the report
    protected override async Task OnInitializedAsync() => _report = await GetCompatibilityReport(MaleHash ?? "", FemaleHash ?? "");



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private static string GetNatureColor(EventNature nature)
    {
        switch (nature)
        {
            case EventNature.Good:
                return "Green";
            case EventNature.Bad:
                return "Red";
            default:
                return "Black";
        }
    }

    private static string GetScoreColor(double score) => score > 50 ? "Green" : "Red";

    /// <summary>
    /// Gets CompatibilityReport from API server
    /// </summary>
    private async Task<CompatibilityReport?> GetCompatibilityReport(string maleHash, string femaleHash)
    {

        //show loading box
        _jsRuntime.ShowLoading();

        //show names on page
        MaleName = (await WebsiteTools.GetPersonFromHash(maleHash)).Name;
        FemaleName = (await WebsiteTools.GetPersonFromHash(femaleHash)).Name;

        //get report from server
        var rootXml = new XElement("Root", new XElement("MaleHash", maleHash), new XElement("FemaleHash", femaleHash));
        var matchReportXml = await ServerManager.WriteToServerXmlReply(ServerManager.GetMatchReportApi, rootXml);

        //parse report
        var matchReport = CompatibilityReport.FromXml(matchReportXml);

        _jsRuntime.HideAlert();

        //return parsed report to caller
        return matchReport;
    }


}

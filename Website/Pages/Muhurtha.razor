@page "/muhurtha"
@using Genso.Astrology.Library

<style>

</style>


<PageTitle>Muhurtha</PageTitle>

@if (_isPageReady)
{

    <div>
        <label>Person</label>
        <select @bind="SelectedPersonName" class="form-control">
            <option value="">Select Name</option>
            @foreach (var person in PersonList)
            {
                <option value="@person.GetName()">@person.GetName() - @person.GetBirthDateTime().GetStdDateTimeOffset().Year</option>
            }
        </select>
    </div>
    <div style="margin-top: 50px" class="row">
        <button type="submit" @onclick="OnClickCalculate" class="btn btn-primary">Calculate</button>
    </div>
}

@if (_isResultReady)
{

    <DasaViewBox @ref="_dasaViewBox" Person="@SelectedPerson" Location="@SelectedLocation" />

    <h4 class="mt-2">Planets</h4>
    <div class="d-flex flex-nowrap">
        <PlanetInfoBox PlanetName="PlanetName.Sun" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Moon" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Mercury" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Mars" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Jupiter" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Saturn" time="@SelectedPerson.GetBirthDateTime()" />
        <PlanetInfoBox PlanetName="PlanetName.Venus" time="@SelectedPerson.GetBirthDateTime()" />
    </div>

}



@code {


    private DasaViewBox? _dasaViewBox;
    public List<Person> PersonList { get; set; } //data from URL not necessary provided
    public string? SelectedPersonName { get; set; }
    public Person SelectedPerson { get; set; }
    public GeoLocation SelectedLocation { get; set; }
    List<Event> _dasaEvents;
    private bool _isPageReady = false; //marks if the page ready to loaded
    private bool _isResultReady = false; //marks if the page ready to loaded


    protected override async Task OnInitializedAsync()
    {
        //wait and show loading message
        await _globalVariable.LoadingMessage.Show();

        //get person list from api server & save it for later
        var personListRootXml = await ServerManager.ReadFromServer(ServerManager.GetPersonListAPI);
        PersonList = personListRootXml.Elements().Select(maleXml => Person.FromXml(maleXml)).ToList();

        _isPageReady = true;

        //hide loading message
        await _globalVariable.LoadingMessage.Hide();
    }


    private async Task OnClickCalculate()
    {
        //show loading box
        await _globalVariable.LoadingMessage.Show();

        //get data from inputs and save it for use by other components
        SelectedPerson = PersonList.Find(p => p.GetName() == SelectedPersonName); //TODO: find person by hash not name only
        SelectedLocation = new GeoLocation("Ipoh", 101, 4.59);//todo get real location

        //mark page as ready to show results
        _isResultReady = true;

        //update view box data directly when clicked 2nd time
        //without this update does not propagate
        if (_dasaViewBox != null)
        {
            _dasaViewBox.Person = SelectedPerson;
            _dasaViewBox.Location = SelectedLocation;

            await _dasaViewBox.RefreshData();
        }

    }


}
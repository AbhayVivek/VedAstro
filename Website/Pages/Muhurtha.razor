@page "/muhurtha"
@using Genso.Astrology.Library
@using Tools = Genso.Astrology.Library.Tools
@inject GlobalVariableManager _globalVariable

<PageTitle>Muhurtha</PageTitle>

@if (_isPageReady)
{

    <div>
        <label>Person</label>
        <select @bind="SelectedPersonName" class="form-control">
            <option value="">Select Name</option>
            @foreach (var person in PersonList)
            {
                <option value="@person.GetName()">@person.GetName() - @person.GetBirthDateTime().GetStdDateTimeOffset().Year</option>
            }
        </select>
    </div>
    <div style="margin-top: 50px" class="row">
        <button type="submit" @onclick="GetDasaEventsFromApi" class="btn btn-primary">Submit</button>
    </div>
}
else
{
    <LoadingMessage Show="true"/>
}


@if (_isResultReady)
{
    <DasaViewBox EventList="@_dasaEvents" Person="@SelectedPerson" />
}


@code {

    public List<Person> PersonList { get; set; } //data from URL not necessary provided
    public string? SelectedPersonName { get; set; }
    public Person SelectedPerson { get; set; }
    List<Event> _dasaEvents;
    private bool _isPageReady = false; //marks if the page ready to loaded
    private bool _isResultReady = false; //marks if the page ready to loaded


    protected override async Task OnInitializedAsync()
    {
        //get person list from api server & save it for later
        var personListRootXml = await ServerManager.ReadFromServer(ServerManager.GetPersonListAPI);
        PersonList = personListRootXml.Elements().Select(maleXml => Person.FromXml(maleXml)).ToList();

        _isPageReady = true;

    }

    private async Task GetDasaEventsFromApi()
    {
        //show loading message
        _globalVariable.loadingMessage.Open();

        //get person instance from string name
        SelectedPerson = PersonList.Find(p => p.GetName() == SelectedPersonName);

        var location = new GeoLocation("Ipoh", 101, 4.59); //todo check if change in location changes much

        var tag = EventTag.Dasa;
        double precision = Tools.DaysToHours(7);

        //get events from API server
        var _120yearsFromBirth = SelectedPerson.GetBirthDateTime().AddYears(120);
        var dasaEventsUnsorted = await ServerManager.GetEvents(SelectedPerson.GetBirthDateTime(), _120yearsFromBirth, location, SelectedPerson, tag, precision);

        //sort the list by time before sending view
        var orderByAscResult = from dasaEvent in dasaEventsUnsorted
                               orderby dasaEvent.StartTime.GetStdDateTimeOffset() ascending
                               select dasaEvent;

        //send sorted events to view
        _dasaEvents = orderByAscResult.ToList();

        _isResultReady = true;

        //show loading message
        _globalVariable.loadingMessage.Close();

    }


}
@using System.Collections
@using Genso.Astrology.Library

@*Component shows combo box with people list*@

<div>
    <label class="form-label">@Label</label>
    <select @bind="SelectedPersonHash" class="form-control" style="width: fit-content;min-width: 273px;">
        <option value="">Select Name</option>
        @DropDownOptionsHtml
    </select>
</div>


@code {

    //DEFAULTS
    const string DefaultLabel = "Person";
    private MarkupString DropDownOptionsHtml { get; set; } = new("");


    //PARAMETERS

    /// <summary>
    /// Get selected person name
    /// </summary>
    [Parameter]
    public string SelectedPersonHash
    {
        get => _selectedPersonHash;
        set
        {
            //this stops update loops
            if (_selectedPersonHash == value) return;

            //log this, don't await to reduce lag
            WebsiteLogManager.LogData(_jsRuntime, $"Selected Person:{value}");

            _selectedPersonHash = value;
            //update value in parent page
            SelectedPersonHashChanged.InvokeAsync(value);
        }
    }

    private const string NotSelectedPersonHash = "0";
    private string _selectedPersonHash = NotSelectedPersonHash;


    /// <summary>
    /// Text that is shown above list
    /// </summary>
    [Parameter]
    public string? Label { get; set; } = DefaultLabel;


    //below prop needed for 2-way binding between page & component to work
    [Parameter]
    public EventCallback<string> SelectedPersonHashChanged { get; set; }


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    private async Task _OnInitialized()
    {

        //show loading box
        await _jsRuntime.ShowLoading();

        //else use already available list
        await FillDropDown();

        //hide loading box
        _jsRuntime.HideAlert();
    }





    private async Task FillDropDown()
    {
        var html = "";

        var personList = await AppData.TryGetPersonList(_jsRuntime);

        //generate drop down options in html
        foreach (var person in personList)
        {
            html += $"<option value=\"{person.GetHashCode()}\">{person.GetName()} - {person.BirthYear}</option>";
        }

        //set drop down list into view
        DropDownOptionsHtml = new MarkupString(html);

        //need to propagate changes
        this.StateHasChanged();

    }

    public Person GetSelectedPerson() => WebsiteTools.GetPersonFromHashCached(SelectedPersonHash);


    /// <summary>
    /// True if a person has been selected else false
    /// </summary>
    public bool IsPersonSelected => SelectedPersonHash != NotSelectedPersonHash && SelectedPersonHash != null && SelectedPersonHash != "";

}

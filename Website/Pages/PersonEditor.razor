@attribute [Route(PageRoute.PersonEditor)]
@attribute [Route(PageRoute.PersonEditorParam)]

@using Genso.Astrology.Library
@using System.Xml.Linq

<PageTitle>@_pageTitle</PageTitle>

<div class="container">
    <div class="vstack gap-3" style="max-width:826px;">
        <div>
            <label>Name</label>
            <input @bind="_nameInput" type="text" class="form-control" placeholder="Enter name">
        </div>
        <div>
            <div class="row">
                <div class="col-5">
                    <label>Birth Time (24h)</label>
                    <input @bind="_hourMinInput" type="text" class="form-control" placeholder="06:42">
                </div>
                <div class="col-5">
                    <label>Date</label>
                    <input @bind="_dateInput" type="text" class="form-control" placeholder="16/04/2021">
                </div>
                <div class="col">
                    <label>Timezone</label>
                    <input @bind="_timeZonInput" type="text" class="form-control" placeholder="+08:00">
                </div>
            </div>
        </div>

        <GeoLocationInput @ref="_geoLocationInput" />
        <div>
            <label>Gender</label>
            <select @bind="_genderInput" class="form-control">
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>

        <div class="accordion" id="advancedTabAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingOne">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                        <strong>Advanced</strong>
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#advancedTabAccordion">
                    <div class="accordion-body">
                        <div class="vstack gap-3">
                            @*LIFE EVENTS*@
                            <LifeEventEditor @ref="_lifeEventEditor"/>
                            <div>
                                <label>Notes</label>
                                <textarea @bind="_notesInput" type="text" class="form-control" placeholder="Extra details regarding the person" style="min-height:132px;">
                                </textarea>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*BUTTONS*@
    <div style="margin-top: 50px" class="hstack row gap-2">
        @*Only show delete button in Editor mode*@
        @if (PageMode == Mode.Editor)
        {
            <IconButton ButtonText="Delete" IconName="fluent:delete-20-regular" OnClickCallback="@OnClickDeleteButton" />
        }
        <IconButton ButtonText="Save" IconName="bx:save" OnClickCallback="@OnClickSubmitButton" />
    </div>
</div>



@code {

    /// <summary>
    /// Person name passed in as param, page becomes
    /// editor passed, else becomes creator
    /// </summary>
    [Parameter]
    public string PersonHash { get; set; }

    /// <summary>
    /// represents the Person instance that this page represents
    /// </summary>
    private Person _person;

    /// <summary>
    /// a copy of the person's hash during init is saved in edit mode
    /// because hash will change on edit, used as when updating to API
    /// </summary>
    private int _originalPersonHash;

    //gets page mode that was decided earlier
    private bool IsCreator => PageMode == Mode.Creator;

    /// <summary>
    /// Function that is called on click of button
    /// Note: using delegate so that can change function based on page mode
    /// </summary>
    private Action OnClickSubmitButton { get; set; }

    string? _hourMinInput, _dateInput, _timeZonInput;

    string _nameInput = "";
    string _notesInput = "";
    string _genderInput = "";
    string _pageTitle = "";
    private GeoLocationInput _geoLocationInput;
    private LifeEventEditor _lifeEventEditor;





    //--------------------PROPERTIES

    /// <summary>
    /// Mode the page is initialed in Creator or Editor
    /// </summary>
    private Mode PageMode { get; set; }


    protected override async void OnInitialized()
    {
        //decide if page should be editor or creator
        PageMode = PersonHash == null ? Mode.Creator : Mode.Editor;

        await RenderPage();
    }

    /// <summary>
    /// Renders page based on page mode set during init
    /// </summary>
    private async Task RenderPage()
    {
        //based on page mode set the details

        //set page title
        _pageTitle = IsCreator ? "Add New Person" : "Edit Person Details";

        //set person
        _person = IsCreator ? new Person() : await WebsiteTools.GetPersonFromHash(PersonHash);


        //in edit mode save hash of unedited person
        _originalPersonHash = IsCreator ? 0 : _person.GetHashCode();

        _nameInput = IsCreator ? "" : _person.Name;

        _notesInput = IsCreator ? "" : _person.Notes;

        _genderInput = IsCreator ? "Male" : _person.Gender.ToString();

        //auto fill time zone based on system time
        var personBirthTimeOffset = _person.GetBirthDateTime().GetStdDateTimeOffset().ToString("zzz");
        var systemTimeOffset = DateTimeOffset.Now.ToString("zzz");
        _timeZonInput = IsCreator ? systemTimeOffset : personBirthTimeOffset;

        var birthTimeHourMin = _person.GetBirthDateTime().GetStdDateTimeOffset().ToString("hh:mm");
        var defaultHourMin = "00:00";
        _hourMinInput = IsCreator ? defaultHourMin : birthTimeHourMin;

        var birthTimeDate = _person.GetBirthDateTime().GetStdDateTimeOffset().ToString("dd/MM/yyyy");
        var defaultDate = "10/10/1990";
        _dateInput = IsCreator ? defaultDate : birthTimeDate;


        //geolocation only needs to be set in Editor mode
        //in Creator mode it will auto set after timeout
        if (!IsCreator)
        {
            var geoLocation = new
            {
                LocationName = IsCreator ? "" : _person.GetBirthLocation().GetName(),
                Longitude = IsCreator ? 0 : _person.GetBirthLocation().GetLongitude(),
                Latitude = IsCreator ? 0 : _person.GetBirthLocation().GetLatitude()
            };
            _geoLocationInput.UpdateData(geoLocation);
        }

        var emptyList = new List<LifeEvent>();
        var lifeEventList = IsCreator ? emptyList : _person.LifeEventList;
        await _lifeEventEditor.SetData(lifeEventList);

        //button does different stuff based on page mode
        OnClickSubmitButton = IsCreator ? SubmitNewPerson : UpdateExistingPerson;

        this.StateHasChanged();
    }

    //sends the newly created person to API server
    private async void SubmitNewPerson()
    {
        await _globalVariable.LoadingMessage.Show();

        //make a new person from the details in the input
        _person = await GetPersonInstanceFromInput();

        //send newly created person to API server
        var xmlData = _person.ToXml();
        var result = ServerManager.WriteToServer(ServerManager.AddPersonApi, xmlData);

        //let user know person has been added
        await _globalVariable.Alert.ShowSuccess($"{_nameInput} added successfully!");

        //refresh the page variables
        //todo marked for deletion, test without = no difference > delete
        StateHasChanged();

        //page ready
        await _globalVariable.LoadingMessage.Hide();

        //send user to person list page after period of time
        await Task.Delay(100);
        _navigation.NavigateTo(PageRoute.PersonList);
    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private async Task<Person> GetPersonInstanceFromInput()
    {

        //parse data received from user
        var geoLocation = new GeoLocation(_geoLocationInput.LocationName, _geoLocationInput.Longitude, _geoLocationInput.Latitude);
        var fullTimeString = $"{_hourMinInput} {_dateInput} {_timeZonInput}";
        var stdTimeMale = DateTimeOffset.ParseExact(fullTimeString, Time.GetDateTimeFormat(), null);
        var lifeEventList = await _lifeEventEditor.GetData();

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //create a new person from the inputed data
        var birthTime = new Time(stdTimeMale, geoLocation);
        return new Person(_nameInput, birthTime, gender, await WebsiteTools.GetUserIdAsync(_jsRuntime), _notesInput, lifeEventList);

        //----------LOCAL FUNCTION ---------------------

    }

    private async void UpdateExistingPerson()
    {
        //show loading message
        await _globalVariable.LoadingMessage.Show();

        //make a new person from the details in the input
        _person = await GetPersonInstanceFromInput();

        //update person in API by hash
        await WebsiteTools.UpdatePerson(_person, _originalPersonHash);

        //let user know person has been updates
        await _globalVariable.Alert.ShowSuccess($"{_nameInput} updated successfully!");

        //refresh the page variables
        //todo marked for deletion, test without = no difference > delete
        this.StateHasChanged();

        //page ready
        await _globalVariable.LoadingMessage.Hide();

        //send user to task list page after period of time
        await Task.Delay(100);
        _navigation.NavigateTo(PageRoute.PersonList);
    }





    //-------------------EVENT HANDLERS

    private async Task OnClickDeleteButton()
    {
        //show loading message
        await _globalVariable.LoadingMessage.Show();

        //tell API to delete person, using hash as id
        await WebsiteTools.DeletePerson(_originalPersonHash);

        //let user know person has been updates
        await _globalVariable.Alert.ShowSuccess($"{_nameInput} deleted successfully!");

        //refresh the page variables
        //todo marked for deletion, test without = no difference > delete
        this.StateHasChanged();

        //page ready
        await _globalVariable.LoadingMessage.Hide();

        //send user to task list page after period of time
        await Task.Delay(100);
        _navigation.NavigateTo(PageRoute.PersonList);
    }




}
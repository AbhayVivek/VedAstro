@using Genso.Astrology.Library
@attribute [Route(PageRoute.PersonList)]

<PageTitle>Person List</PageTitle>

<PageTop Title="Person List" IconName="fluent:people-list-20-filled">
    <Description>This is a list of all person profiles available, you can also add or edit persons.</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.AddPerson"></IconButton>
        @*        <IconButton IconName="dashicons:video-alt3" ButtonText="Watch Guide" OnClickCallback="()=> _jsRuntime.OpenNewTab(PageRoute.AddPersonGuideVideo)"></IconButton>
        *@
    </ButtonsRow>
</PageTop>

@if (_isReady)
{

    <table class="table table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Birth Date & Time</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in AppData.PersonList)
            {
                <tr style="cursor: pointer;" @onclick="() => PersonNameClicked(person)">
                    <td>@person.Name</td>
                    <td>@person.BirthTimeString</td>
                    <td>@person.GetBirthLocation().ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="fw-bold">No person profiles found.<br /> Click "Add Person" to get started.</p>
}


@code {

    //FIELDS
    const string TableId = "PersonListTable"; //change only needed here

    private bool _isReady = false;



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    //code executed after page has been rendered
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //generate table
    //    if (firstRender)
    //    {
    //        await InvokeAsync(async () => await GenerateTable()).Try();
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        await GenerateTable();
    }


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task GenerateTable()
    {
        _jsRuntime.ShowLoading();
        await Task.Delay(250);

        _isReady = false;

        //get all people from API server
        //check if people list already loaded before
        AppData.PersonList ??= await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id, _jsRuntime);

        //convert objects to json (for js generator library)
        //and calls js code change table directly
        //await _jsRuntime.InvokeVoidAsync("generatePersonListTable", TableId, personList.ToArray());

        _isReady = true;

        _jsRuntime.HideAlert();
    }


    private void PersonNameClicked(Person person)
    {
        _navigation.NavigateTo($"{PageRoute.PersonEditor}/{person.Hash}");
    }

}
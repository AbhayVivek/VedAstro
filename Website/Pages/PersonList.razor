@using Genso.Astrology.Library
@attribute [Route(PageRoute.PersonList)]

<PageTitle>Person List</PageTitle>

<PageTop Title="Person List" IconName="fluent:people-list-20-filled">
    <Description>This is a list of all person profiles available, you can also add or edit persons.</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
    </ButtonsRow>
</PageTop>


<div class="container mt-3">
    <div id="@TableId"></div>
</div>

@code {

    //FIELDS
    const string TableId = "PersonListTable"; //change only needed here



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER 

    //code executed after page has been rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //generate table
        if (firstRender)
        {
            await InvokeAsync(async () => await GenerateTable()).Try();
        }
    }




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task GenerateTable()
    {
        await _globalVariable.LoadingMessage.Show();

        //get all people from API server
        var personList = await WebsiteTools.GetPeopleList(await WebsiteTools.GetUserIdAsync(_jsRuntime));

        //convert objects to json (for js generator library)
        //and calls js code change table directly
        await _jsRuntime.InvokeVoidAsync("generatePersonListTable", TableId, personList.ToArray());

        await _globalVariable.LoadingMessage.Hide();

    }


}
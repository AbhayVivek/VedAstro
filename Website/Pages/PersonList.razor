@using Genso.Astrology.Library
@attribute [Route(PageRoute.PersonList)]

<PageTitle>Person List</PageTitle>

<PageTop Title="Person List" IconName="fluent:people-list-20-filled">
    <Description>This is a list of all person profiles available, you can also add or edit persons.</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.PersonEditor"></IconButton>
    </ButtonsRow>
</PageTop>

@if (personList.Any())
{

    <table class="table table-bordered table-hover">
        <thead class="table-dark">
        <tr>
            <th>Name</th>
            <th>Birth Date & Time</th>
            <th>Location</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var person in personList)
        {
            <tr style="cursor: pointer;" @onclick="() => PersonNameClicked(person)">
                <td>@person.Name</td>
                <td>@person.BirthTimeString</td>
                <td>@person.GetBirthLocation().ToString()</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p class="fw-bold">No person profiles found.<br/> Click "Add Person" to get started.</p>
}


@code {

    //FIELDS
    const string TableId = "PersonListTable"; //change only needed here

    List<Person> personList = new List<Person>();



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    //code executed after page has been rendered
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //generate table
    //    if (firstRender)
    //    {
    //        await InvokeAsync(async () => await GenerateTable()).Try();
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        await GenerateTable();
    }


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task GenerateTable()
    {
        //todo needs to be updated
        //await _globalVariable.LoadingMessage.Show();

        //get all people from API server
        personList = await WebsiteTools.GetPeopleList(AppData.CurrentUser?.Id);

        //convert objects to json (for js generator library)
        //and calls js code change table directly
        //await _jsRuntime.InvokeVoidAsync("generatePersonListTable", TableId, personList.ToArray());

        //todo needs to be updated
        //await _globalVariable.LoadingMessage.Hide();

    }


    private void PersonNameClicked(Person person)
    {
        _navigation.NavigateTo($"{PageRoute.PersonEditor}/{person.Hash}");
    }

}
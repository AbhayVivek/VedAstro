@using Genso.Astrology.Library

<style>
    /*highlights frozen planet column*/
    .PlanetColumn {
        background-color: #1b6ec2 !important;
        color: white;
    }
</style>

<h4>Planet Info</h4>
<div style="min-height: 150px; width:100%;" class="mb-5" id="@PlanetTableId"></div>
<hr />
<div style="min-height: 150px; width:100%;" class="mb-5" id="@PlanetInfoTableId"></div>

<h4>House Info</h4>
<div style="min-height: 150px; width:100%;" class="mb-5" id="@HouseTableId"></div>
<hr />
<div style="min-height: 150px; width:100%;" class="mb-5" id="@HouseInfoTableId"></div>


@code {
    [Parameter]
    public Time Time
    {
        get => _time;
        set
        {
            _time = value;
            //needed for updates to be shown on 2nd click
            _isDirty = true;
        }
    }
    const string PlanetTableId = "PlanetDataTable"; //change only needed here
    const string PlanetInfoTableId = "PlanetDataInfoTable"; //change only needed here
    const string HouseTableId = "HouseDataTable"; //change only needed here
    const string HouseInfoTableId = "HouseDataInfoTable"; //change only needed here

    private Time _time;
    bool _isDirty = false;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    //protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {

        //get planet data
        var planetData = GetPlanetData();

        //and calls js code change table directly
        //the data column to show is in js side
        await _jsRuntime.InvokeVoidAsync("generatePlanetDataTable", PlanetTableId, planetData);
        await _jsRuntime.InvokeVoidAsync("generatePlanetDataInfoTable", PlanetInfoTableId, planetData);

        //get house data
        var houseData = GetHouseData();

        //and calls js code change table directly
        await _jsRuntime.InvokeVoidAsync("generateHouseDataTable", HouseTableId, houseData);
        await _jsRuntime.InvokeVoidAsync("generateHouseDataInfoTable", HouseInfoTableId, houseData);

    }


    public List<object> GetHouseData()
    {
        var returnList = new List<object>();

        foreach (var house in House.AllHouses)
        {
            returnList.Add(getData((int)house));
        }

        return returnList;


        object getData(int houseNumber)
        {
            var lordOfHouse = AstronomicalCalculator.GetLordOfHouse((HouseName)houseNumber, Time);

            //get house details and save it for view
            var _houseDetails = AstronomicalCalculator.GetHouseDescription(houseNumber);
            var _houseLord = lordOfHouse.ToString();
            var _planetsInHouse = Tools.ListToString<PlanetName>(AstronomicalCalculator.GetPlanetsInHouse(houseNumber, Time));
            var _planetsAspectingHouse = Tools.ListToString<PlanetName>(AstronomicalCalculator.GetPlanetsAspectingHouse((HouseName)houseNumber, Time));
            var rawHouseStrength = AstronomicalCalculator.GetBhavabala((HouseName)houseNumber, Time).ToDouble();
            var _houseStrength = Math.Round(rawHouseStrength, 2).ToString();
            var _houseSign = AstronomicalCalculator.GetHouseSignName(houseNumber, Time).ToString();
            var _houseNavamsaSign = AstronomicalCalculator.GetHouseNavamsaSign((HouseName)houseNumber, Time).ToString();

            var _lordExalted = AstronomicalCalculator.IsPlanetExaltated(lordOfHouse, Time);
            var _lordDebilitated = AstronomicalCalculator.IsPlanetDebilitated(lordOfHouse, Time);

            var _currentSignDescription = AstronomicalCalculator.GetSignDescription(AstronomicalCalculator.GetHouseSignName(houseNumber, Time));
            var _lordInfo = AstronomicalCalculator.GetPlanetInfo(lordOfHouse);

            return new
            {
                House = "House " + houseNumber,
                HouseLord = _houseLord,
                PlanetsInHouse = _planetsInHouse,
                PlanetsAspectingHouse = _planetsAspectingHouse,
                HouseStrength = _houseStrength,
                HouseSign = _houseSign,
                CurrentSignDescription = _currentSignDescription,
                HouseNavamsaSign = _houseNavamsaSign,
                LordExalted = _lordExalted,
                LordDebilitated = _lordDebilitated,
                HouseDetails = _houseDetails,
                LordInfo = _lordInfo

            };
        }


    }

    public List<object> GetPlanetData()
    {

        var returnList = new List<object>();

        foreach (var planet in PlanetName.All9Planets)
        {
            returnList.Add(getData(planet));
        }

        return returnList;

        object getData(PlanetName planetName)
        {
            //find out if planet is rahu or ketu, because not all calculations supported
            var isRahuKetu = planetName == PlanetName.Rahu || planetName == PlanetName.Ketu;

            //get planet details and save it for view
            var _shadbalaPinda =  AstronomicalCalculator.GetPlanetShadbalaPinda(planetName, Time).ToDouble();

            var _positionStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetSthanaBala(planetName, Time).ToDouble(), 2);

            var _directionalStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetDigBala(planetName, Time).ToDouble(), 2);

            var _motionalStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetChestaBala(planetName, Time).ToDouble(), 2);
            var _motionName = AstronomicalCalculator.GetPlanetMotionName(planetName, Time).ToString();

            var _temporalStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetKalaBala(planetName, Time).ToDouble(), 2);

            var _aspectStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetDrikBala(planetName, Time).ToDouble(), 2);

            var _permanentStrength = isRahuKetu ? 0 : Math.Round(AstronomicalCalculator.GetPlanetNaisargikaBala(planetName, Time).ToDouble(), 2);

            var _planetCurrentHouse = AstronomicalCalculator.GetHousePlanetIsIn(Time, planetName);

            var _planetRasiSign = AstronomicalCalculator.GetPlanetRasiSign(planetName, Time);

            var _planetCurrentSign = _planetRasiSign.ToString();
            
            var _nirayanaLongitude = AstronomicalCalculator.GetPlanetNirayanaLongitude(Time, planetName).TotalDegrees;

            var planetNavamsaSign = AstronomicalCalculator.GetPlanetNavamsaSign(planetName, Time);

            var _planetCurrentNavamsaSign = planetNavamsaSign.ToString();

            var _planetCurrentConstellation = AstronomicalCalculator.GetPlanetConstellation(Time, planetName).ToString();

            var _currentHouseRelation = isRahuKetu ? 0 : AstronomicalCalculator.GetPlanetRelationshipWithHouse((HouseName)_planetCurrentHouse, planetName, Time);

            var _navamsaRelation = isRahuKetu ? 0 : AstronomicalCalculator.GetPlanetRelationshipWithSign(planetName, planetNavamsaSign, Time);

            var _isPlanetAspectedByMaleficPlanets = AstronomicalCalculator.IsPlanetAspectedByMaleficPlanets(planetName, Time);

            var _isPlanetConjunctWithMaleficPlanets = AstronomicalCalculator.IsPlanetConjunctWithMaleficPlanets(planetName, Time);

            var _conjunctPlanets = Tools.ListToString<PlanetName>(AstronomicalCalculator.GetPlanetsInConjuction(Time, planetName));

            var _aspectingPlanets = Tools.ListToString<PlanetName>(AstronomicalCalculator.GetPlanetsAspectingPlanet(Time, planetName));

            var _currentSignDescription = AstronomicalCalculator.GetSignDescription(_planetRasiSign.GetSignName());

            var _currentHouseDescription = AstronomicalCalculator.GetHouseDescription(AstronomicalCalculator.GetHousePlanetIsIn(Time, planetName));

            var _planetCurrentHouseType = AstronomicalCalculator.GetHouseType(AstronomicalCalculator.GetHousePlanetIsIn(Time, planetName));

            var _planetInfo = AstronomicalCalculator.GetPlanetInfo(planetName);

            var lagna = AstronomicalCalculator.GetHouseSignName(1, Time);
            var _isPlanetBeneficToLagna = AstronomicalCalculator.IsPlanetBeneficToLagna(planetName, lagna);
            var _isPlanetMaleficToLagna = AstronomicalCalculator.IsPlanetMaleficToLagna(planetName, lagna);
            var _isPlanetYogakarakaToLagna = AstronomicalCalculator.IsPlanetYogakarakaToLagna(planetName, lagna);
            var _isPlanetMarakaToLagna = AstronomicalCalculator.IsPlanetMarakaToLagna(planetName, lagna);

            //todo
            //var _getPlanetStateDescription = AstronomicalCalculator.GetPlanetStateDescription();

            return new
            {
                Planet = planetName.ToString(),
                ShadbalaPinda = _shadbalaPinda,
                PositionStrength = _positionStrength,
                DirectionalStrength = _directionalStrength,
                MotionalStrength = _motionalStrength,
                MotionName = _motionName,
                TemporalStrength = _temporalStrength,
                AspectStrength = _aspectStrength,
                PermanentStrength = _permanentStrength,
                PlanetCurrentHouse = _planetCurrentHouse,
                PlanetCurrentSign = _planetCurrentSign,
                NirayanaLongitude = _nirayanaLongitude,
                CurrentSignDescription = _currentSignDescription,
                PlanetCurrentNavamsaSign = _planetCurrentNavamsaSign,
                PlanetCurrentConstellation = _planetCurrentConstellation,
                HouseRelation = Format.FormatName(_currentHouseRelation.ToString()),
                NavamsaRelation = Format.FormatName(_navamsaRelation.ToString()),
                IsPlanetAspectedByMaleficPlanets = _isPlanetAspectedByMaleficPlanets,
                IsPlanetConjunctWithMaleficPlanets = _isPlanetConjunctWithMaleficPlanets,
                ConjunctPlanets = _conjunctPlanets,
                AspectingPlanets = _aspectingPlanets,
                CurrentHouseDescription = _currentHouseDescription,
                PlanetCurrentHouseType = _planetCurrentHouseType,
                PlanetInfo = _planetInfo,
                IsPlanetBeneficToLagna = _isPlanetBeneficToLagna,
                IsPlanetMaleficToLagna = _isPlanetMaleficToLagna,
                IsPlanetMarakaToLagna = _isPlanetMarakaToLagna,
                IsPlanetYogakarakaToLagna = _isPlanetYogakarakaToLagna,
            };
        }
    }
}

@using Genso.Astrology.Library
@using System.Xml.Linq
@using System.Text.RegularExpressions
@attribute [Route(PageRoute.SearchResult)]
@inject HttpClient Client

<PageTitle>Search Vedic Astrology</PageTitle>

<PageTop Title="Search Astrology" IconName="fluent:document-table-search-24-filled">
    <Description>Search all astrological combination or predictions that have been programmed into VedAstro</Description>
</PageTop>

@if (_resultReady)
{
    <h4 class="mb-3">Found "@resultCount" results for "@SearchText"</h4>

    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">
                Reference <HelpBox HelpText="@HelpText.SearchReference" SmallIcon="true"></HelpBox>
            </button>
            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                Horoscope Predictions <HelpBox HelpText="@HelpText.SearchPredictions" SmallIcon="true"></HelpBox>
            </button>
            <button class="nav-link" id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#nav-contact" type="button" role="tab" aria-controls="nav-contact" aria-selected="false">
                Muhurtha Events <HelpBox HelpText="@HelpText.SearchEvents" SmallIcon="true"></HelpBox>
            </button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundReference)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundPrediction)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Nature")?.Value  @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundEvent)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Nature")?.Value  @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

}
else
{
    <h4>No results found. Try fewer keywords for more results.</h4>
}


@code {

    public string? SearchText = "";

    private int resultCount = 0;
    private bool _resultReady = false;
    private bool filesLoaded = false;


    IEnumerable<XElement> foundPrediction = new List<XElement>();
    IEnumerable<XElement> foundEvent = new List<XElement>();
    IEnumerable<XElement> foundReference = new List<XElement>();


    //makes this page instance available to others
    protected override void OnInitialized() => AppData.SearchPage = this;


    private async Task LoadFiles()
    {
        //this data is used later search for fast loading
        AppData.PredictionDataList = await GetXmlFile("data/PredictionDataList.xml");
        AppData.EventDataList = await GetXmlFile("data/EventDataList.xml");
        AppData.ReferenceList = await GetXmlFile("data/ReferenceList.xml");

        //mark as loaded so on next search won't reload
        filesLoaded = true;

        async Task<List<XElement>> GetXmlFile(string url)
        {
            //load xml event data files before hand to be used quickly later for search
            //get main horoscope prediction file (located in wwwroot)
            var fileStream = await Client.GetStreamAsync(url);

            //parse raw file to xml doc
            var document = XDocument.Load(fileStream);

            //get all records in document
            return document.Root.Elements().ToList();
        }
    }

    /// <summary>
    /// does the search
    /// </summary>
    public async Task Search(string searchText)
    {
        _jsRuntime.ShowLoading();

        //only load the xml files if not yet loaded
        if (!filesLoaded) { await LoadFiles(); }

        //little time for loading to pop
        //note: without it, no loading
        await Task.Delay(250);

        //show search text
        SearchText = searchText;

        //search file
        foundPrediction = AppData.PredictionDataList.Where(IsFound);
        foundEvent = AppData.EventDataList.Where(IsFound);
        foundReference = AppData.ReferenceList.Where(IsFound);

        //show search result count
        resultCount = foundPrediction.Count() + foundEvent.Count();

        //mark as ready to show user
        _resultReady = true;

        //needed to make changes appear
        StateHasChanged();

        _jsRuntime.HideLoading();

    }


    /// <summary>
    /// checks x element for matching keyword
    /// note: for speed purposes we stick with xelement
    /// </summary>
    private bool IsFound(XElement x)
    {
        //convert the event data to string form
        //note: all 1st level children are converted
        var evenDataXmlString = "";
        foreach (var xElement in x.Elements())
        {
            //only name make format it first
            var text = "";
            if (xElement.Name == "Name")
            {
                text = Format.FormatName(xElement?.Value ?? "");
            }
            else
            {
                text = $" {xElement.Value}";
            }
            evenDataXmlString += text;
        }

        //convert to lower case and do basic word match
        return evenDataXmlString.ToLower().Contains(SearchText.ToLower());
    }


}

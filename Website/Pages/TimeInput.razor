@implements IAsyncDisposable
@using Genso.Astrology.Library

<style>
    #CalendarPickerHolder input{
        border: 0;
    }
</style>

<div class="hstack gap-2">
    <div style="width: fit-content;">
        <label class="form-label">Time</label>
        <input @onclick="OnClickDateTimeInput" id="TimeInput" style="max-width: 65px;" class="form-control" @bind="HourMin" type="text" placeholder="16:20">
        @*this is where js date picker will be created*@
        <div @ref="CalendarPickerHolder" class="vanilla-calendar visually-hidden" style="position: absolute; z-index: 999;" id="CalendarPickerHolder"></div>
    </div>
    <div style="width: fit-content;">
        <label class="form-label">
            Date
        </label>
        <input @onclick="OnClickDateTimeInput" id="DateInput" style="max-width: 125px;margin-left: -5px;" class="form-control" @bind="Date" type="text" placeholder="16/04/2021">
    </div>
    <div style="width: fit-content;">
        <label class="form-label">
            Timezone
            <HelpBox SmallIcon="true" HelpText="@HelpText.TimezoneInput"></HelpBox>
        </label>
        <input style="max-width: 86px;" class="form-control" @bind="TimeZone" type="text">
    </div>
</div>


@code {


    public string? HourMin
    {
        get => _hourMin;
        set
        {
            _hourMin = value;
            StateHasChanged();
        }
    }

    public string? Date
    {
        get => _date;
        set
        {
            _date = value;
            StateHasChanged();
        }
    }

    public string? TimeZone
    {
        get => _timeZone;
        set
        {
            _timeZone = value;
            StateHasChanged();
            //mark timezone input as modified
            IsAutoTimezone = false;
        }
    }

    /// <summary>
    /// Gets parseable time string
    /// </summary>
    public string? FullTimeString => $"{HourMin} {Date} {TimeZone}";


    private string? _hourMin = DateTime.Today.ToString("HH:mm");
    private string? _date = DateTime.Today.ToString("dd/MM/yyyy");
    private string? _timeZone = DateTimeOffset.Now.ToString("zzz");

    IJSObjectReference module;
    private ElementReference CalendarPickerHolder;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //auto set time zone to current user's location
            //set underlying value as not to fire update event
            _timeZone = DateTimeOffset.Now.ToString("zzz");

            //mark time zone has auto set
            IsAutoTimezone = true;

            //load js script for date time picker
            module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/TimeInput.js");
        }
    }

    /// <summary>
    /// Creates a new time instance with inputed time data
    /// </summary>
    public Time GetTime(GeoLocation geoLocation) => new(this.FullTimeString, geoLocation);

    /// <summary>
    /// Returns true if time zone field was set by auto and not changed by user
    /// if user modified it, will return false
    /// </summary>
    public bool IsAutoTimezone { get; private set; }

    private async Task OnClickDateTimeInput()
    {
        //toggle picker
        await _jsRuntime.ToggleClass(CalendarPickerHolder,"visually-hidden");
    }

    /// <summary>
    /// using a module, we need to make sure we explicitly dispose of it for garbage collection.
    /// If we don't, the JSRuntime will continue holding a reference to our module for the lifetime of the application.
    /// To do this, our component must implement IAsyncDisposable, then we can dispose of our module in the DisposeAsync method.
    /// </summary>
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}

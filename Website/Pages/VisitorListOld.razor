@using System.Xml.Linq
@attribute [Route(PageRoute.VisitorListOld)]
<PageTitle>Visitor List</PageTitle>

<PageTop Title="Visitor List" IconName="fluent:people-list-20-filled">
    <Description>List of visitors to the site</Description>
</PageTop>


@switch (whatToShow)
{
    case "uniqueVisitorList":
        <table class="table table-bordered table-striped text-nowrap">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Url</th>
                    <th>TimeStamp</th>
                    <th>Country</th>
                    <th>City</th>
                    <th>Browser</th>
                    <th>Os</th>
                    <th>device</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visitorXml in uniqueVisitorList)
                {
                    <tr>
                        <td>User:@visitorXml.Element("UserId")?.Value<br />Visitor:@visitorXml.Element("VisitorId")?.Value</td>
                        <td>@visitorXml.Element("Url")?.Value</td>
                        <td>@visitorXml.Element("TimeStamp")?.Value</td>
                        <td>@visitorXml.Element("Location")?.Element("country")?.Value</td>
                        <td>@visitorXml.Element("Location")?.Element("city")?.Value</td>
                        <td>@visitorXml.Element("BrowserData")?.Element("browser")?.Element("name")?.Value</td>
                        <td>@visitorXml.Element("BrowserData")?.Element("os")?.Element("name")?.Value</td>
                        <td>@visitorXml.Element("BrowserData")?.Element("device")?.Value</td>
                        <td>
                            <div>
                                <IconButton ButtonText="Trail Visitor ID" OnClickCallback="() => RenderVisitorTrailList(visitorXml)"></IconButton>
                                <IconButton ButtonText="Trail User ID" OnClickCallback="() => RenderUserTrailList(visitorXml)"></IconButton>
                            </div>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
        break;
    case "visitorTrailList":
        <IconButton IconName="akar-icons:arrow-back" ButtonText="Back" OnClickCallback="RenderUniqueVisitorList"></IconButton>
@*        <IconButton IconName="flat-color-icons:delete-database" ButtonText="Delete" OnClickCallback="() => DeleteVisitorByUserId()"></IconButton>
*@
        <div class="hstack gap-2 border border-primary">
            <div class="border">@clickedVisitorXml.Element("Location")?.Element("country")?.Value</div>
            <div class="border">@clickedVisitorXml.Element("Location")?.Element("city")?.Value</div>
            <div class="border">@clickedVisitorXml.Element("BrowserData")?.Element("browser")?.Element("name")?.Value</div>
            <div class="border">@clickedVisitorXml.Element("BrowserData")?.Element("os")?.Element("name")?.Value</div>
            <div class="border">@clickedVisitorXml.Element("BrowserData")?.Element("device")?.Value</div>
        </div>

        <table class="table table-bordered table-striped text-nowrap">
            <thead class="table-dark">
                <tr>
                    <th>UserId</th>
                    <th>VisitorId</th>
                    <th>Url</th>
                    <th>Button</th>
                    <th>TimeStamp</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visitorXml in visitorTrailList)
                {
                    <tr>
                        <td>@visitorXml.Element("UserId")?.Value</td>
                        <td>@visitorXml.Element("VisitorId")?.Value</td>
                        <td>@visitorXml.Element("Url")?.Value</td>
                        <td>@visitorXml.Element("ButtonText")?.Value</td>
                        <td>@visitorXml.Element("TimeStamp")?.Value</td>
                    </tr>
                }

            </tbody>
        </table>
        break;
    default:
        <p>Do Nothing</p>
        break;
}




@code {

    List<XElement> uniqueVisitorList = new List<XElement>();
    List<XElement> visitorTrailList = new List<XElement>();
    List<XElement> rawVisitorList = new List<XElement>();
    string whatToShow = "";
    XElement clickedVisitorXml;

    //code executed after page has been rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //generate table
        if (firstRender) { await RenderUniqueVisitorList(); }
    }


    private async Task RenderUniqueVisitorList()
    {
        _jsRuntime.ShowLoading();

        //get all people from API server
        rawVisitorList = await WebsiteTools.GetVisitorList(AppData.CurrentUser.Id);


        var uniqueVisitorIds = (rawVisitorList.Select(x => x.Element("VisitorId")?.Value).Distinct()).ToList();

        //remove old data
        uniqueVisitorList.Clear();

        foreach (var visitorId in uniqueVisitorIds)
        {
            //get all visitor xml by visitor id
            var x = rawVisitorList.Where(x => x.Element("VisitorId")?.Value == visitorId);
            //pick out the element with browser data to represent others
            //"Location" & "BrowserData" only exist in unique 1st visit
            var y = (from xElement in x
                     where
                         xElement.Element("Location") != null &&
                         xElement.Element("BrowserData") != null
                     select xElement).FirstOrDefault();

            //if none found, use back 1 from top list
            y = y ?? x.FirstOrDefault();
            uniqueVisitorList.Add(y);
        }


        whatToShow = "uniqueVisitorList";

        StateHasChanged();

        //convert objects to json (for js generator library)
        //and calls js code change table directly
        //await _jsRuntime.InvokeVoidAsync("generatePersonListTable", TableId, personList.ToArray());

        _jsRuntime.HideAlert();

    }


    private void RenderVisitorTrailList(XElement visitorXml)
    {
        clickedVisitorXml = visitorXml;
        var visitorIdClicked = clickedVisitorXml.Element("VisitorId")?.Value;

        //filter list to show all visits made by this unique ID
        visitorTrailList = (from xElement in rawVisitorList
                            where xElement.Element("VisitorId")?.Value == visitorIdClicked
                            select xElement).ToList();

        whatToShow = "visitorTrailList";

        StateHasChanged();

    }

    private void RenderUserTrailList(XElement visitorXml)
    {
        clickedVisitorXml = visitorXml;
        var userIdClicked = clickedVisitorXml.Element("UserId")?.Value;

        //filter list to show all visits made by this unique ID
        visitorTrailList = (from xElement in rawVisitorList
                            where xElement.Element("UserId")?.Value == userIdClicked
                            select xElement).ToList();

        whatToShow = "visitorTrailList";

        StateHasChanged();

    }

    //deletes given list from API server main list
    private async Task DeleteVisitorByUserId(string userId)
    {
        //convert list to xml for sending
        var userIdXml = new XElement("UserId", userId);

        var result = await ServerManager.WriteToServerXmlReply(ServerManager.DeleteVisitorByUserId, userIdXml);

        if (ServerManager.IsReplyPass(result))
        {
            await _jsRuntime.ShowAlert("success", $"{userId} deleted successfully!", false, timer: 1000);
        }
        else
        {
            await _jsRuntime.ShowAlert("error", $"{userId} delete failed!", false, timer: 1000);
        }
    }

}

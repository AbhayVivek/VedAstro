@using Genso.Astrology.Library
@using System.Xml.Linq
@inherits LayoutComponentBase

@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{

    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>
        <main>
            <article class="content px-4 mb-5">
                @Body
            </article>
        </main>
    </div>
}



@code
{
    bool _mainPageInitDone;



    protected override async Task OnInitializedAsync()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //save current page url, (if error used for logging)
        AppData.CurrentPage = _navigation.Uri;

        //retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //other components can start loading now
        _mainPageInitDone = true;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("InitErrorCatcher");
        }

        //log visit everytime page is rendered
        await WebsiteLogManager.LogVisitor(_jsRuntime);
    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
        Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml));
        }
    }


}




@*
<ErrorBoundary>
    <ChildContent>
        @Body
    </ChildContent>
    <ErrorContent Context="ex">
        @{ OnError(@ex); }
        <p>@ex.Message</p>
    </ErrorContent>
</ErrorBoundary>
*@

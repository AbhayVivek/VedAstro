@inherits LayoutComponentBase
@using Genso.Astrology.Library
@using System.Xml.Linq
@using Website.Pages


@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{
    <!--only wrap in mobile screen-->
    <div class="row mt-3 flex-md-nowrap">

        <!-- DESKTOP ONLY : SIDEBAR -->
        <div class="col-auto align-items-start d-none d-md-block">
            <!--only visible in Desktop-->
            <div class="vstack gap-2 mb-3 rounded-3 border shadow sticky-md-top p-md-3 "><SideBarButtons /></div>

            <!-- DEPLOYMENT STAMP : Not visible in mobile, no space to joke around -->
            <div class=" sticky-bottom position-fixed mb-1" style="color: rgb(200, 200, 200); font-size: 8px;">
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="ion:earth" data-width="10"></span>
                    <span>Made on Earth</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="bi:rocket-fill" data-width="10"></span>
                    <!-- Stamped build version during deployment, used to identify code in cloud -->
                    <span>@ThisAssembly.Version</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="material-symbols:copyright-outline" data-width="11"></span>
                    <!-- Stamped build version during deployment, used to identify code in cloud -->
                    <span>2014 - 2023 VedAstro</span>
                </div>
            </div>
        </div>

        <!-- MOBILE ONLY : SIDEBAR -->
        <div class="col-auto d-md-none">
            <nav class="navbar fixed-top" style="background: #acd1eb;">
                <div class="container-fluid">
                    <a class="navbar-brand" href="@PageRoute.Home">VedAstro</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                        <div class="offcanvas-header">
                            <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Mobile Menu</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </div>
                        <div class="offcanvas-body">
                            <div class="d-flex flex-wrap gap-2 mb-2 p-2 rounded-3 border shadow"><TopBarButtons /></div>
                            <hr />
                            <div class="vstack gap-2 mb-2 p-2 rounded-3 border shadow"><SideBarButtons /></div>
                        </div>
                    </div>
                </div>
            </nav>
        </div>

        <!-- CONTENT + REF BUTTONS -->
        <!-- in mobile push down to make room for mobile menu-->
        <div class="col mt-sm-5 mt-md-0">

            <!-- REFERENCE BUTTONS : buttons placed here are
            linked to places not needed all the time, like About and Docs -->
            <!--only visible in Desktop-->
            <div class="rounded-3 mb-4 p-2 border shadow d-none d-md-flex gap-2 justify-content-between"><TopBarButtons /></div>

            <!-- PAGE CONTENT INSERTED HERE -->
            <div>@Body</div>
        </div>
    </div>

}



@code
{
    //IJSObjectReference? _module;
    bool _mainPageInitDone;
    private ElementReference searchInput, navLink1, navLink2, navLink3, navLink4, navLink5, navLink6, navLink7, navLink8, navLink9, navLink10, navLink11;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //load js script for date time picker
            //_module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/MainLayout.js");

            await _jsRuntime.InvokeVoidAsync("InitErrorCatcher");

            //log visit only 1 once when page is rendered
            await WebLogger.Visitor(_jsRuntime);

            //attach tooltip lib to dark mode & nav button element
            //todo remove after update
            await _jsRuntime.Tippy("#DarkModeButton", new { content = "Night Mode" });
            await _jsRuntime.Tippy("#DesktopMenuBtn", new { content = "Hide Menu" });
        }
    }

    private async Task _OnInitialized()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //create url based on beta or stable
        AppData.URL = new URL(WebsiteTools.GetIsBetaRuntime());

        //to be accessed by classes
        AppData.HttpClient = _client;

        //used later to create HTTP client with correct base address
        AppData.BaseAddress = new Uri(_navigation.BaseUri);

        //get visitor ID if available
        AppData.VisitorId = await WebsiteTools.TryGetVisitorId(_jsRuntime);

        //retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //other components can start loading now
        _mainPageInitDone = true;
    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml));
        }
    }

    /// <summary>
    /// Handle when user uses the Search
    /// </summary>
    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //only start search when user press Enter
        if (keyEventArgs.Key != "Enter") return;

        await PerformSearch();

    }

    private async Task PerformSearch()
    {
        //get search text
        var text = await _jsRuntime.GetValue(searchInput);

        //log
        WebLogger.Data("Search: " + text);

        //go home when no text
        if (text.Length == 0) { _navigation.NavigateTo(PageRoute.Home); return; }

        //show search page & input the search text
        _navigation.NavigateTo(PageRoute.SearchResult);
        await Task.Delay(250);//little time for page to load (needed else fails)
        await AppData.SearchPage.Search(text);
    }

    private async Task OnClickSearchIcon() => await PerformSearch();



}




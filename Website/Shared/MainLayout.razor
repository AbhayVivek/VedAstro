@using Genso.Astrology.Library
@using System.Xml.Linq
@using Microsoft.Extensions.FileSystemGlobbing.Internal
@inherits LayoutComponentBase
@inject HttpClient Client
@using Website.Pages

@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{
    <!-- SIDEBAR NAV BAR -->
    <div class="sidebar">
        <div class="sidebar-header">
            <a href="#" class="sidebar-logo"><span></span></a>
            <a href="#" class="sidebar-logo-text">Ved<span>Astro</span></a>
        </div><!-- sidebar-header -->
        <div class="sidebar-search">
            <div class="search-body">
                <input @ref="searchInput" @onkeyup="OnKeyUpSearchBar" type="text" class="form-control" placeholder="Search...">
                <div @onclick="OnClickSearchIcon" style="cursor: pointer;">
                    <span class="iconify" data-icon="bx:search-alt" data-width="24"></span>
                </div>
            </div><!-- search-body -->
        </div><!-- sidebar-search -->
        <div class="sidebar-body">
            <nav class="nav-sidebar">
                <a @ref="navLink1" href="@PageRoute.Home" @onclick="()=>OnClickNavItem(navLink1, PageRoute.Home)" style="cursor: pointer;" class="nav-link active">
                    <span class="iconify" data-icon="ant-design:home-twotone" data-width="25"></span><span>Home</span>
                </a>
                <a @ref="navLink2" href="@PageRoute.QuickGuide" @onclick="()=>OnClickNavItem(navLink2, PageRoute.QuickGuide)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="cil:book" data-width="25"></span><span>Quick Guide</span>
                </a>
                <a @ref="navLink3" href="@PageRoute.AskAstrolger" @onclick="()=>OnClickNavItem(navLink3, PageRoute.AskAstrolger)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="wpf:ask-question" data-width="25"></span><span>Ask Astrologer</span>
                </a>
                <a @ref="navLink4" href="@PageRoute.CalculatorList" @onclick="()=>OnClickNavItem(navLink4, PageRoute.CalculatorList)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="bi:calculator" data-width="25"></span><span>Calculators</span>
                </a>
                <a @ref="navLink5" href="@PageRoute.PersonList" @onclick="()=>OnClickNavItem(navLink5, PageRoute.PersonList)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="fluent:people-list-20-filled" data-width="25"></span><span>Person List</span>
                </a>
                <a @ref="navLink6" href="@PageRoute.OpenAPI" @onclick="()=>OnClickNavItem(navLink6, PageRoute.OpenAPI)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="carbon:gateway-api" data-width="25"></span><span>Open API</span>
                </a>
                <a @ref="navLink7" href="@PageRoute.Contact" @onclick="()=>OnClickNavItem(navLink7, PageRoute.Contact)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="ci:mail" data-width="24"></span><span>Contact</span>
                </a>
                <a @ref="navLink8" href="@PageRoute.Donate" @onclick="()=>OnClickNavItem(navLink8, PageRoute.Donate)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="iconoir:donate" data-width="25"></span><span>Donate</span>
                </a>
                <a @ref="navLink9" href="@PageRoute.About" @onclick="()=>OnClickNavItem(navLink9, PageRoute.About)" style="cursor: pointer;" class="nav-link">
                    <span class="iconify" data-icon="akar-icons:info" data-width="25"></span><span>About</span>
                </a>
                @*                <a @ref="navLink9" @onclick="()=>OnClickNavItem(navLink9, PageRoute.Contact)" style="cursor: pointer;" class="nav-link">
            <span class="iconify" data-icon="codicon:feedback" data-width="25"></span><span>Give Feedback</span>
            </a>
            *@
            </nav>
            @*<hr>
        <nav class="nav-sidebar">
        </nav>*@
        </div><!-- sidebar-body -->
        <!--
        <div class="sidebar-footer">
            <a href="" class="avatar online"><span class="avatar-initial">s</span></a>
            <div class="avatar-body">
                <div class="d-flex align-items-center justify-content-between">
                    <SignInButton />
                    <h6></h6>
                    <a href="" class="footer-menu"><i class="ri-settings-4-line"></i></a>
                </div>
                <span>Superuser/Administrator</span>
            </div>
        </div>
        -->

    </div>

    <!-- MAIN CONTENT -->
    <div class="content">
        <!-- TOP BUTTON ROW -->
        <div class="d-flex content-header border-bottom my-0 mx-4 py-0 px-2 pb-2 ">
            <div class="p-2 hstack gap-2">
                @*visible in Desktop view todo shoe menu fold icon line-md:menu-fold-left*@
                <a id="DesktopMenuBtn" href="#" class="content-menu d-none d-md-flex border"><span class="iconify" data-icon="dashicons:menu-alt3" data-width="100"></span></a>
                @*visible in Mobile view*@
                <a id="MobileMenuBtn" href="#" class="content-menu d-md-none border"><span class="iconify" data-icon="dashicons:menu-alt3" data-width="100"></span></a>
                <a id="DarkModeButton" @onclick="OnClickDarkModeButton" class="content-menu border"><span class="iconify" data-icon="material-symbols:dark-mode-outline-rounded" data-width="100"></span></a>
            </div>
            <div class="ms-auto p-2">
                @*User already signed in show account button else show login button*@
                @if (AppData.CurrentUser != UserData.Empty)
                {
                    <IconButton ButtonText="Log Out" ButtonColorClass="btn-warning" IconName="icon-park-outline:logout" OnClickCallback="OnClickSignOutButton" />
                    @*<IconButton ButtonText="Account" ButtonColorClass="btn-warning" IconName="material-symbols:settings-account-box-outline" OnClickCallback="OnClickNavBarLoginButton"></IconButton>
            *@  }
                else
                {
                    <IconButton ButtonText="Log In" ButtonColorClass="btn-warning" IconName="mdi:user-circle" OnClickCallback="OnClickNavBarLoginButton" />
                }

            </div>
        </div>

        <!-- content-body -->
        <div class="content-body">
            @Body
        </div>
    </div>

}



@code
{
    IJSObjectReference? _module;
    bool _mainPageInitDone;
    private ElementReference searchInput, navLink1, navLink2, navLink3, navLink4, navLink5, navLink6, navLink7, navLink8, navLink9;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //load js script for date time picker
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/MainLayout.js");

            await _jsRuntime.InvokeVoidAsync("InitErrorCatcher");

            //log visit only 1 once when page is rendered
            await WebLogger.Visitor(_jsRuntime);

            //attach tooltip lib to dark mode & nav button element
            await _jsRuntime.Tippy("#DarkModeButton", new { content = "Night Mode" });
            await _jsRuntime.Tippy("#DesktopMenuBtn", new { content = "Hide Menu" });
        }
    }

    private async Task _OnInitialized()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //used later to create HTTP client with correct base address
        AppData.BaseAddress = new Uri(_navigation.BaseUri);

        //get visitor ID if available
        AppData.VisitorId = await WebsiteTools.TryGetVisitorId(_jsRuntime);

        //retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //other components can start loading now
        _mainPageInitDone = true;
    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml));
        }
    }

    /// <summary>
    /// Handle when user uses the Search
    /// </summary>
    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //only start search when user press Enter
        if (keyEventArgs.Key != "Enter") return;

        await PerformSearch();

    }

    private async Task PerformSearch()
    {
        //get search text
        var text = await _jsRuntime.GetValue(searchInput);

        //log
        WebLogger.Data("Search:" + text);

        //go home when no text
        if (text.Length == 0) { _navigation.NavigateTo(PageRoute.Home); return; }

        //show search page & input the search text
        _navigation.NavigateTo(PageRoute.SearchResult);
        await Task.Delay(250);//little time for page to load (needed else fails)
        await AppData.SearchPage.Search(text);
    }

    private async Task OnClickSearchIcon() => await PerformSearch();

    private async Task OnClickDarkModeButton()
    {
        //using JS lib toggle the dark mode
        await _jsRuntime.InvokeVoidAsync("window.DarkMode.toggle");

        //get dark mode value and store it for use by event chart
        await AppData.UpdateDarkMode(_jsRuntime);

        //special for event chart, if exist on page change vis JS for instant correction
        //note : this makes chart appear normal in dark/normal mode
        var value = AppData.DarkMode ? "difference" : "normal";
        await _jsRuntime.SetCss("#EventsChartSvgHolder", "mix-blend-mode", value);

    }

    private async Task OnClickNavItem(ElementReference elementReference, string pageName)
    {
        //remove highlight from all nav (reset)
        DeselectAll();

        //log
        WebLogger.Data("Click Nav:" + pageName);

        //set proper color for nav menu
        await _jsRuntime.AddClass(elementReference, "active");

        //goto page
        _navigation.NavigateTo(pageName);

        void DeselectAll()
        {
            _jsRuntime.RemoveClass(navLink1, "active");
            _jsRuntime.RemoveClass(navLink2, "active");
            _jsRuntime.RemoveClass(navLink3, "active");
            _jsRuntime.RemoveClass(navLink4, "active");
            _jsRuntime.RemoveClass(navLink5, "active");
            _jsRuntime.RemoveClass(navLink6, "active");
            _jsRuntime.RemoveClass(navLink7, "active");
            _jsRuntime.RemoveClass(navLink8, "active");
            _jsRuntime.RemoveClass(navLink9, "active");

        }
    }

    private async Task OnClickSignOutButton()
    {
        //log this
        await WebLogger.Click("Sign Out");

        //clear local storage of user data
        //since login status is basically the existence of user data in localstorage
        //removing it removes user's login
        await _jsRuntime.RemoveProperty("UserData");

        //reset person's list
        AppData.ClearPersonList();

        //reset app data
        AppData.CurrentUser = UserData.Empty;

        //refresh page
        WebsiteTools.ReloadPage(_navigation);

    }



    private void OnClickNavBarLoginButton()
    {

        //remember previous page to come back to after login
        //saved in browser, so doesn't get deleted by refresh
        _jsRuntime.SetProperty("PreviousPage", _navigation.Uri);

        //goto page
        _navigation.NavigateTo(PageRoute.Login);


        //var alertData = new
        //{
        //    showConfirmButton = false,
        //    width = "280px",
        //    padding = "1px",
        //    //allowOutsideClick = false,
        //    //allowEscapeKey = false,
        //    stopKeydownPropagation = true,
        //    keydownListenerCapture = true,
        //    html = ""

        //};

        ////don't wait here
        //_jsRuntime.ShowAlert(alertData);
        //show pop up with login choices
        //_jsRuntime.ShowAlert()
    }
}




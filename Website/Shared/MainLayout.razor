@using Genso.Astrology.Library
@using System.Xml.Linq
@inherits LayoutComponentBase
@inject HttpClient Client


@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{
    <!-- sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <a href="#" class="sidebar-logo"><span></span></a>
            <a href="#" class="sidebar-logo-text">Ved<span>Astro</span></a>
        </div><!-- sidebar-header -->
        <div class="sidebar-search">
            <div class="search-body">
                <i data-feather="search"></i>
                <input @ref="searchInput" @onkeyup="OnKeyUpSearchBar" type="text" class="form-control" placeholder="Search...">
            </div><!-- search-body -->
        </div><!-- sidebar-search -->
        <div class="sidebar-body">
            <nav class="nav-sidebar">
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.Home)" class="nav-link active">
                    <span class="iconify" data-icon="ant-design:home-twotone" data-width="25"></span><span>Home</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.QuickGuide)" class="nav-link">
                    <span class="iconify" data-icon="cil:book" data-width="25"></span><span>Quick Guide</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.AskAstrolger)" class="nav-link">
                    <span class="iconify" data-icon="wpf:ask-question" data-width="25"></span><span>Ask Astrologer</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.CalculatorList)" class="nav-link">
                    <span class="iconify" data-icon="bi:calculator" data-width="25"></span><span>Calculators</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.PersonList)" class="nav-link">
                    <span class="iconify" data-icon="fluent:people-list-20-filled" data-width="25"></span><span>Person List</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.Donate)" class="nav-link">
                    <span class="iconify" data-icon="iconoir:donate" data-width="25"></span><span>Donate</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.Contact)" class="nav-link">
                    <span class="iconify" data-icon="ci:mail" data-width="24"></span><span>Contact</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.About)" class="nav-link">
                    <span class="iconify" data-icon="akar-icons:info" data-width="25"></span><span>About</span>
                </a>
                <a href="" @onclick="() => _navigation.NavigateTo(PageRoute.Contact)" class="nav-link">
                    <span class="iconify" data-icon="codicon:feedback" data-width="25"></span><span>Give Feedback</span>
                </a>

            </nav>
            @*<hr>
        <nav class="nav-sidebar">
        </nav>*@
        </div><!-- sidebar-body -->

        <div class="sidebar-footer">
            <SignInButton />
            @*            <a href="" class="avatar online"><span class="avatar-initial">s</span></a>
        <div class="avatar-body">
        <div class="d-flex align-items-center justify-content-between">
        <h6></h6>
        <a href="" class="footer-menu"><i class="ri-settings-4-line"></i></a>
        </div>
        <span>Superuser/Administrator</span>
        </div><!-- avatar-body -->
        *@
        </div><!-- sidebar-footer -->
    </div>


    <div class="content">
        <!-- content-header -->
        @*don't show until mobile view (md)*@
        <div class="content-header d-md-none border-bottom my-0 mx-4 py-0 px-2">
            <a id="contentMenu" href="#" class="content-menu d-none d-lg-flex border"><span class="iconify" data-icon="dashicons:menu-alt3" data-width="100"></span></a>
            <a id="mobileMenu" href="#" class="content-menu d-lg-none border mb-2"><span class="iconify" data-icon="dashicons:menu-alt3" data-width="100"></span></a>
        </div>

        <!-- content-body -->
        <div class="content-body">
            @Body
        </div>
    </div>

}



@code
{
    IJSObjectReference? _module;
    bool _mainPageInitDone;
    private ElementReference searchInput;

    protected override async Task OnInitializedAsync()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //save current page url, (if error used for logging)
        AppData.CurrentPage = _navigation.Uri;

        //retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //other components can start loading now
        _mainPageInitDone = true;

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //load js script for date time picker
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/MainLayout.js");

            await _jsRuntime.InvokeVoidAsync("InitErrorCatcher");

            //log visit only 1 once when page is rendered
            await WebsiteLogManager.LogVisitor(_jsRuntime);
        }
    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml));
        }
    }

    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //only start search when user press Enter
        if (keyEventArgs.Key != "Enter") return;

        //get search text
        var text = await _jsRuntime.GetValue(searchInput);

        //go home when no text
        if (text.Length == 0) { _navigation.NavigateTo(PageRoute.Home); return; }

        //show search page & input the search text
        _navigation.NavigateTo(PageRoute.SearchResult);
        await Task.Delay(250);//little time for page to load (needed else fails)
        await AppData.SearchPage.Search(text);
    }

}




@using Genso.Astrology.Library
@using System.Xml.Linq
@inherits LayoutComponentBase
@using Website.Pages

@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{

    <div class="row mt-3 flex-md-nowrap"> <!--only wrap in mobile screen-->
        <!-- SIDEBAR -->
        <div class="col-auto align-items-start">
            <ul class="mb-3 rounded-3 border shadow nav nav-pills flex-md-column sticky-md-top p-md-3 p-sm-2" style="background: #fff;">
                <!--when on mobile become top nav-->
                <li class="nav-item">
                    <a class="nav-link active hstack gap-2" href="#"><span class="iconify" data-icon="ant-design:home-twotone" data-width="19"></span><span>Home</span></a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle hstack gap-2" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false"><span class="iconify" data-icon="cil:book" data-width="19"></span><span>Docs</span></a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#">Quick Guide</a></li>
                        <li><a class="dropdown-item" href="#">Philosophy</a></li>
                        <li><a class="dropdown-item" href="#">Blog</a></li>
                        <li><a class="dropdown-item" href="#">Forum</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#">Separated link</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link hstack gap-2" href="#"><span class="iconify" data-icon="bi:calculator" data-width="19"></span><span>Calculators</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link hstack gap-2" href="#"><span class="iconify" data-icon="ci:mail" data-width="19"></span><span>Contact</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link hstack gap-2" href="#"><span class="iconify" data-icon="iconoir:donate" data-width="19"></span><span>Donate</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link hstack gap-2" href="#"><span class="iconify" data-icon="akar-icons:info" data-width="19"></span><span>About</span></a>
                </li>
            </ul>
        </div>

        <!-- CONTENT + REF BUTTONS -->
        <div class="col">

            <!-- REFERENCE BUTTONS : buttons placed here are
            linked to places not needed all the time, like About and Docs -->
            <div class="row rounded-3 border shadow mb-3 p-sm-1 p-md-2">
                <div class="col">
                    <ul class="nav nav-pills">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="#">Active</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Link</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Link</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled">Disabled</a>
                        </li>
                    </ul>
                </div>
                <div class="col">
                    <ul class="nav nav-pills justify-content-end">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="#">Active</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Link</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Link</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled">Disabled</a>
                        </li>
                    </ul>

                </div>
            </div>

            <!-- PAGE CONTENT INSERTED HERE -->
            <div>
                @Body
            </div>
        </div>
    </div>

}



@code
{
    //IJSObjectReference? _module;
    bool _mainPageInitDone;
    private ElementReference searchInput, navLink1, navLink2, navLink3, navLink4, navLink5, navLink6, navLink7, navLink8, navLink9, navLink10, navLink11;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //load js script for date time picker
            //_module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/MainLayout.js");

            await _jsRuntime.InvokeVoidAsync("InitErrorCatcher");

            //log visit only 1 once when page is rendered
            await WebLogger.Visitor(_jsRuntime);

            //attach tooltip lib to dark mode & nav button element
            //todo remove after update
            await _jsRuntime.Tippy("#DarkModeButton", new { content = "Night Mode" });
            await _jsRuntime.Tippy("#DesktopMenuBtn", new { content = "Hide Menu" });
        }
    }

    private async Task _OnInitialized()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //create url based on beta or stable
        AppData.URL = new URL(WebsiteTools.GetIsBetaRuntime());

        //to be accessed by classes
        AppData.HttpClient = _client;

        //used later to create HTTP client with correct base address
        AppData.BaseAddress = new Uri(_navigation.BaseUri);

        //get visitor ID if available
        AppData.VisitorId = await WebsiteTools.TryGetVisitorId(_jsRuntime);

        //retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //other components can start loading now
        _mainPageInitDone = true;
    }



    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml));
        }
    }

    /// <summary>
    /// Handle when user uses the Search
    /// </summary>
    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //only start search when user press Enter
        if (keyEventArgs.Key != "Enter") return;

        await PerformSearch();

    }

    private async Task PerformSearch()
    {
        //get search text
        var text = await _jsRuntime.GetValue(searchInput);

        //log
        WebLogger.Data("Search: " + text);

        //go home when no text
        if (text.Length == 0) { _navigation.NavigateTo(PageRoute.Home); return; }

        //show search page & input the search text
        _navigation.NavigateTo(PageRoute.SearchResult);
        await Task.Delay(250);//little time for page to load (needed else fails)
        await AppData.SearchPage.Search(text);
    }

    private async Task OnClickSearchIcon() => await PerformSearch();

    private async Task OnClickDarkModeButton()
    {
        //using JS lib toggle the dark mode
        await _jsRuntime.InvokeVoidAsync("window.DarkMode.toggle");

        //get dark mode value and store it for use by event chart
        await AppData.UpdateDarkMode(_jsRuntime);

        //special for event chart, if exist on page change vis JS for instant correction
        //note : this makes chart appear normal in dark/normal mode
        var value = AppData.DarkMode ? "difference" : "normal";
        await _jsRuntime.SetCss("#EventsChartSvgHolder", "mix-blend-mode", value);

    }

    private async Task OnClickNavItem(ElementReference elementReference, string pageName)
    {
        //remove highlight from all nav (reset)
        DeselectAll();

        //log
        WebLogger.Data("Click Nav:" + pageName);

        //set proper color for nav menu
        await _jsRuntime.AddClass(elementReference, "active");

        //goto page
        _navigation.NavigateTo(pageName);

        void DeselectAll()
        {
            _jsRuntime.RemoveClass(navLink1, "active");
            _jsRuntime.RemoveClass(navLink2, "active");
            _jsRuntime.RemoveClass(navLink3, "active");
            _jsRuntime.RemoveClass(navLink4, "active");
            _jsRuntime.RemoveClass(navLink5, "active");
            _jsRuntime.RemoveClass(navLink6, "active");
            _jsRuntime.RemoveClass(navLink7, "active");
            _jsRuntime.RemoveClass(navLink8, "active");
            _jsRuntime.RemoveClass(navLink9, "active");
            _jsRuntime.RemoveClass(navLink10, "active");
            _jsRuntime.RemoveClass(navLink11, "active");

        }
    }

    private async Task OnClickSignOutButton()
    {
        //log this
        await WebLogger.Click("Sign Out");

        //clear local storage of user data
        //since login status is basically the existence of user data in localstorage
        //removing it removes user's login
        await _jsRuntime.RemoveProperty("UserData");

        //reset person's list
        AppData.ClearPersonList();

        //reset app data
        AppData.CurrentUser = UserData.Empty;

        //refresh page
        WebsiteTools.ReloadPage(_navigation);

    }



    private void OnClickNavBarLoginButton()
    {

        //remember previous page to come back to after login
        //saved in browser, so doesn't get deleted by refresh
        _jsRuntime.SetProperty("PreviousPage", _navigation.Uri);

        //goto page
        _navigation.NavigateTo(PageRoute.Login);


        //var alertData = new
        //{
        //    showConfirmButton = false,
        //    width = "280px",
        //    padding = "1px",
        //    //allowOutsideClick = false,
        //    //allowEscapeKey = false,
        //    stopKeydownPropagation = true,
        //    keydownListenerCapture = true,
        //    html = ""

        //};

        ////don't wait here
        //_jsRuntime.ShowAlert(alertData);
        //show pop up with login choices
        //_jsRuntime.ShowAlert()
    }
}




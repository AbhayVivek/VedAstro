@using Website
@using System.Text.Json.Nodes
@using System.Xml.Linq
@using Genso.Astrology.Library
@inject ILocalStorage LocalStorage


<style>

    #GoogleSignInButton {
        text-align: -webkit-center;
        position: relative;
        top: -14px;
    }

</style>

@*Colored box behind login/logout button*@
<div class="rounded" style="background: rgba(0, 255, 255, 0.1)">

    @if (AppData.CurrentUser != UserData.Empty)
    {
        <div class="vstack gap-1" style="padding: 6px;">
            <span class="" style="align-self: center;padding: 10px; color: white;">@($"Hi, {AppData.CurrentUser?.Name}")</span>
            @*default hide Sign Out button*@
            <button @onclick="OnClickSignOutButton" class="btn btn-primary">Sign Out</button>
        </div>
    }
    else
    {
        @*default show Sign In button*@

        <div id="g_id_onload"
         data-client_id="1088062163573-is0ud5h4skblrdu7vlcpp3jskn7odbl7.apps.googleusercontent.com"
         data-context="signin"
         data-ux_mode="popup"
         data-callback="OnGoogleSignInSuccessHandler"
         data-auto_prompt="false">
        </div>

        <div class="g_id_signin"
         data-type="standard"
         data-shape="pill"
         data-theme="outline"
         data-text="signin"
         data-size="large"
         data-logo_alignment="center"
         data-width="150"
         id="GoogleSignInButton">
        </div>
    }
</div>

@code {



    //▒█▀▄▀█ ▒█▀▀▀ ▀▀█▀▀ ▒█░▒█ ▒█▀▀▀█ ▒█▀▀▄ ▒█▀▀▀█
    //▒█▒█▒█ ▒█▀▀▀ ░▒█░░ ▒█▀▀█ ▒█░░▒█ ▒█░▒█ ░▀▀▀▄▄
    //▒█░░▒█ ▒█▄▄▄ ░▒█░░ ▒█░▒█ ▒█▄▄▄█ ▒█▄▄▀ ▒█▄▄▄█

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //google sign in code must be only loaded after
            //special google button has been rendered
            await _jsRuntime.InvokeVoidAsync("loadJs", ServerManager.GoogleSignInJs);

            //makes this components instance available in JS,
            //to be used later when user clicks sign in button
            await _jsRuntime.InvokeVoidAsync("SignInButtonInstance", DotNetObjectReference.Create(this));
        }
    }


    /// <summary>
    /// This method is called from JS when user signs in
    /// note: works because SignInButtonInstance was called earlier
    /// </summary>
    [JSInvokable]
    public async Task OnGoogleSignInSuccessHandler(JsonNode credentialResponse)
    {

#if DEBUG
    Console.WriteLine("BLZ: OnGoogleSignInSuccessHandler");
#endif

        //todo show loading box

        //get the ID Token/JWT from the response
        var idToken = (string)credentialResponse["credential"]!;

        //send token to api for verification
        var rootXml = await ServerManager.WriteToServerXmlReply(ServerManager.SignInGoogle, new XElement("Token", idToken));

        //check if reply is pass or fail
        var isPass = ServerManager.IsReplyPass(rootXml);

        if (isPass)
        {
            //get payload containing user data
            var userDataXml = ServerManager.GetPayload(rootXml);

            //initialize user data & store it for access by the rest of the app
            AppData.CurrentUser = UserData.FromXml(userDataXml);

            //store in browser localstorage
            await LocalStorage.SetProperty("UserData", AppData.CurrentUser.ToXml().ToString());

            //refresh page
            WebsiteTools.ReloadPage(_navigation);
        }
        else
        {
            //TODO
            //show login failed message to user
            //note: this failure is already logged in API
        }


    }

    private void OnClickSignOutButton()
    {
        //clear local storage of user data
        //since login status is basically the existence of user data in localstorage
        //removing it removes user's login
        LocalStorage.RemoveProperty("UserData");

        //refresh page
        WebsiteTools.ReloadPage(_navigation);

    }

}
